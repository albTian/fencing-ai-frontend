{"id":"j5oG","dependencies":[{"name":"/Users/alberttian/f21/playground/frontend/live_video/node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js.map","includedInParent":true,"mtime":1631991247369},{"name":"/Users/alberttian/f21/playground/frontend/live_video/package.json","includedInParent":true,"mtime":1633056435183},{"name":"/Users/alberttian/f21/playground/frontend/live_video/.babelrc","includedInParent":true,"mtime":1633056216691},{"name":"/Users/alberttian/f21/playground/frontend/live_video/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1631991247369}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.MultinomialProgram=void 0;class t{constructor(t,e,n){this.variableNames=[\"probs\"],this.customUniforms=[{name:\"seed\",type:\"float\"}],this.outputShape=[t,n],this.userCode=`\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < ${e-1}; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(${e-1}));\\n      }\\n    `}}exports.MultinomialProgram=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":0}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":13}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":20}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":35}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":43}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":56}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":57}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":64}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":68}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":76}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":100}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":1,"column":102}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":1,"column":108}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":110}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":27,"column":14},"generated":{"line":1,"column":122}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":27,"column":33},"generated":{"line":1,"column":124}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":27,"column":54},"generated":{"line":1,"column":126}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":129}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":134}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":1,"column":148}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":1,"column":149}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":158}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":163}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":25,"column":19},"generated":{"line":1,"column":178}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":25,"column":20},"generated":{"line":1,"column":179}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":25,"column":21},"generated":{"line":1,"column":180}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":25,"column":27},"generated":{"line":1,"column":185}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":25,"column":35},"generated":{"line":1,"column":192}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":25,"column":41},"generated":{"line":1,"column":197}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":28,"column":9},"generated":{"line":1,"column":207}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":28,"column":9},"generated":{"line":1,"column":212}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":28,"column":23},"generated":{"line":1,"column":224}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":28,"column":24},"generated":{"line":1,"column":225}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":28,"column":35},"generated":{"line":1,"column":227}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":230}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":235}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":38,"column":30},"generated":{"line":1,"column":436}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":38,"column":44},"generated":{"line":1,"column":438}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":48,"column":26},"generated":{"line":1,"column":684}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":48,"column":40},"generated":{"line":1,"column":686}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":709}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":717}},{"source":"../src/multinomial_gpu.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":1,"column":736}}],"sources":{"../src/multinomial_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"58c09c392103d14cb982a0749506ddc3","cacheData":{"env":{}}}