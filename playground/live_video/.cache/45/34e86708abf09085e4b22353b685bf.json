{"id":"QdXF","dependencies":[{"name":"/Users/alberttian/f21/playground/frontend/live_video/node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js.map","includedInParent":true,"mtime":1631991247369},{"name":"/Users/alberttian/f21/playground/frontend/live_video/package.json","includedInParent":true,"mtime":1633056435183},{"name":"/Users/alberttian/f21/playground/frontend/live_video/.babelrc","includedInParent":true,"mtime":1633056216691},{"name":"/Users/alberttian/f21/playground/frontend/live_video/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1631991247369}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ClipPackedProgram=void 0;class e{constructor(e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:\"minVal\",type:\"float\"},{name:\"maxVal\",type:\"float\"}],this.outputShape=e,this.userCode=\"\\n      void main() {\\n        vec4 value = getAAtOutCoords();\\n\\n        if (any(isnan(value))) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\\n      }\\n    \"}}exports.ClipPackedProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":0}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":13}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":20}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":35}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":43}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":56}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":57}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":64}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":68}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":76}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":99}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":1,"column":101}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":1,"column":107}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":32,"column":2},"generated":{"line":1,"column":109}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":32,"column":14},"generated":{"line":1,"column":121}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":124}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":129}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":1,"column":143}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":1,"column":144}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":149}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":154}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":23,"column":17},"generated":{"line":1,"column":168}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":170}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":175}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":24,"column":17},"generated":{"line":1,"column":189}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":191}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":196}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":27,"column":19},"generated":{"line":1,"column":211}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":28,"column":4},"generated":{"line":1,"column":212}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":28,"column":5},"generated":{"line":1,"column":213}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":1,"column":218}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":28,"column":21},"generated":{"line":1,"column":227}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":28,"column":27},"generated":{"line":1,"column":232}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":29,"column":4},"generated":{"line":1,"column":241}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":29,"column":5},"generated":{"line":1,"column":242}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":29,"column":11},"generated":{"line":1,"column":247}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":29,"column":21},"generated":{"line":1,"column":256}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":29,"column":27},"generated":{"line":1,"column":261}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":33,"column":9},"generated":{"line":1,"column":271}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":33,"column":9},"generated":{"line":1,"column":276}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":33,"column":23},"generated":{"line":1,"column":288}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":34,"column":9},"generated":{"line":1,"column":290}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":34,"column":9},"generated":{"line":1,"column":295}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":34,"column":20},"generated":{"line":1,"column":304}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":544}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":552}},{"source":"../src/clip_packed_gpu.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":1,"column":570}}],"sources":{"../src/clip_packed_gpu.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"dad1a0963d126962b19ea79eea61d7b8","cacheData":{"env":{}}}