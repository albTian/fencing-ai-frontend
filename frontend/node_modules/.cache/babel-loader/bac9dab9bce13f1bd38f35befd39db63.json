{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function createUnaryKernelConfig(kernelName) {\n  var wasmFunc;\n\n  function setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(kernelName, null\n    /* void */\n    , ['number', 'number']);\n  }\n\n  function kernelFunc(args) {\n    var backend = args.backend,\n        x = args.inputs.x;\n    var xId = backend.dataIdMap.get(x.dataId).id;\n    var out = backend.makeOutput(x.shape, x.dtype);\n    var outId = backend.dataIdMap.get(out.dataId).id; // Short-circuit zero-sized tensors.\n\n    if (util.sizeFromShape(out.shape) === 0) {\n      return out;\n    }\n\n    wasmFunc(xId, outId);\n    return out;\n  }\n\n  return {\n    kernelName: kernelName,\n    backendName: 'wasm',\n    setupFunc: setupFunc,\n    kernelFunc: kernelFunc\n  };\n}","map":{"version":3,"sources":["../../src/kernels/unary_kernel.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA+C,IAA/C,QAA0D,uBAA1D;AAIA,OAAM,SAAU,uBAAV,CAAkC,UAAlC,EAAoD;AACxD,MAAI,QAAJ;;AAEA,WAAS,SAAT,CAAmB,OAAnB,EAAuC;AACrC,IAAA,QAAQ,GACJ,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,UAAnB,EAA+B;AAAK;AAApC,MAAgD,CAAC,QAAD,EAAW,QAAX,CAAhD,CADJ;AAED;;AAED,WAAS,UAAT,CAAoB,IAApB,EAAqE;AAAA,QAE5D,OAF4D,GAEpC,IAFoC,CAE5D,OAF4D;AAAA,QAE1C,CAF0C,GAEpC,IAFoC,CAEnD,MAFmD,CAE1C,CAF0C;AAGnE,QAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAC,CAAC,KAArB,EAA4B,CAAC,CAAC,KAA9B,CAAZ;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD,CALmE,CAOnE;;AACA,QAAI,IAAI,CAAC,aAAL,CAAmB,GAAG,CAAC,KAAvB,MAAkC,CAAtC,EAAyC;AACvC,aAAO,GAAP;AACD;;AAED,IAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,CAAR;AACA,WAAO,GAAP;AACD;;AAED,SAAO;AAAC,IAAA,UAAU,EAAV,UAAD;AAAa,IAAA,WAAW,EAAE,MAA1B;AAAkC,IAAA,SAAS,EAAT,SAAlC;AAA6C,IAAA,UAAU,EAAV;AAA7C,GAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, TensorInfo, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nexport function createUnaryKernelConfig(kernelName: string): KernelConfig {\n  let wasmFunc: (xId: number, outId: number) => void;\n\n  function setupFunc(backend: BackendWasm): void {\n    wasmFunc =\n        backend.wasm.cwrap(kernelName, null /* void */, ['number', 'number']);\n  }\n\n  function kernelFunc(args: {backend: BackendWasm, inputs: UnaryInputs}):\n      TensorInfo {\n    const {backend, inputs: {x}} = args;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const out = backend.makeOutput(x.shape, x.dtype);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(out.shape) === 0) {\n      return out;\n    }\n\n    wasmFunc(xId, outId);\n    return out;\n  }\n\n  return {kernelName, backendName: 'wasm', setupFunc, kernelFunc};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}