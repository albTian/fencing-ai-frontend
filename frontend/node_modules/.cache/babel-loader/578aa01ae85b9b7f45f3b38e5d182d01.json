{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode,\n      activation = attrs.activation,\n      leakyreluAlpha = attrs.leakyreluAlpha;\n  var intermediates = [];\n  var $dilations = dilations;\n\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n    return 'Error in depthwiseConv2d: Either strides or dilations must be ' + \"1. Got strides \".concat(strides, \" and dilations '\").concat($dilations, \"'\");\n  });\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  var shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n  var fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n  var programInputs = [x, filter];\n  var hasBias = bias != null;\n  var hasPreluActivationWeights = preluActivationWeights != null;\n  var hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  if (hasLeakyreluAlpha) {\n    var $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  var program;\n\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  }\n\n  var customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n  var result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n  intermediates.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return result;\n}\nexport var fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"sources":["../../src/kernels/FusedDepthwiseConv2D.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}