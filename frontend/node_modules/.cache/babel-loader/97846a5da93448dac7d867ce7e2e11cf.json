{"ast":null,"code":"import _toConsumableArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot } from '@tensorflow/tfjs-core';\nvar wasmOneHot;\n\nfunction setup(backend) {\n  wasmOneHot = backend.wasm.cwrap(OneHot, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction oneHot(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var indices = inputs.indices;\n  var depth = attrs.depth,\n      onValue = attrs.onValue,\n      offValue = attrs.offValue;\n  var out = backend.makeOutput([].concat(_toConsumableArray(indices.shape), [depth]), 'int32');\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  var indicesData = backend.dataIdMap.get(indices.dataId);\n  var indicesId = indicesData.id;\n  wasmOneHot(indicesId, depth, onValue, offValue, outId);\n  return out;\n}\n\nexport var oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: oneHot\n};","map":{"version":3,"sources":["../../src/kernels/OneHot.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,MAAlC,QAA0E,uBAA1E;AAIA,IAAI,UAAJ;;AAIA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,MAAnB,EAA2B;AAAK;AAAhC,IAA4C,CACvD,QADuD,EAEvD,QAFuD,EAGvD,QAHuD,EAIvD,QAJuD,EAKvD,QALuD,CAK5C;AAL4C,GAA5C,CAAb;AAOD;;AAED,SAAS,MAAT,CACI,IADJ,EAC0E;AAAA,MACjE,MADiE,GACvC,IADuC,CACjE,MADiE;AAAA,MACzD,OADyD,GACvC,IADuC,CACzD,OADyD;AAAA,MAChD,KADgD,GACvC,IADuC,CAChD,KADgD;AAAA,MAEjE,OAFiE,GAEtD,MAFsD,CAEjE,OAFiE;AAAA,MAGjE,KAHiE,GAGrC,KAHqC,CAGjE,KAHiE;AAAA,MAG1D,OAH0D,GAGrC,KAHqC,CAG1D,OAH0D;AAAA,MAGjD,QAHiD,GAGrC,KAHqC,CAGjD,QAHiD;AAKxE,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,8BAAuB,OAAO,CAAC,KAA/B,IAAsC,KAAtC,IAA8C,OAA9C,CAAZ;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AAEA,MAAM,WAAW,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,OAAO,CAAC,MAA9B,CAApB;AACA,MAAM,SAAS,GAAG,WAAW,CAAC,EAA9B;AAEA,EAAA,UAAU,CAAC,SAAD,EAAY,KAAZ,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC,KAAtC,CAAV;AAEA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,YAAY,GAAiB;AACxC,EAAA,UAAU,EAAE,MAD4B;AAExC,EAAA,WAAW,EAAE,MAF2B;AAGxC,EAAA,SAAS,EAAE,KAH6B;AAIxC,EAAA,UAAU,EAAE;AAJ4B,CAAnC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmOneHot: (\n    indicesId: number, depth: number, onValue: number, offValue: number,\n    outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmOneHot = backend.wasm.cwrap(OneHot, null /* void */, [\n    'number',  // indices_id\n    'number',  // depth,\n    'number',  // onValue\n    'number',  // offValue\n    'number'   // out_id\n  ]);\n}\n\nfunction oneHot(\n    args: {inputs: OneHotInputs, attrs: OneHotAttrs, backend: BackendWasm}) {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  const out = backend.makeOutput([...indices.shape, depth], 'int32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n\n  wasmOneHot(indicesId, depth, onValue, offValue, outId);\n\n  return out;\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: oneHot as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}