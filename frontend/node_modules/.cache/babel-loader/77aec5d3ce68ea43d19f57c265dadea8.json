{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport var padV2 = function padV2(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var paddings = attrs.paddings,\n      constantValue = attrs.constantValue;\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    var outputShape = paddings.map(function (p, i) {\n      return p[0]\n      /* beforePad */\n      + x.shape[i] + p[1];\n    }\n    /* afterPad */\n    );\n    return fill({\n      backend: backend,\n      attrs: {\n        shape: outputShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n\n  var program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n  var customValues = [[constantValue]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport var padV2Config = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2\n};","map":{"version":3,"sources":["../../src/kernels/PadV2.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,EAAuC,KAAvC,EAAmF,IAAnF,QAA8F,uBAA9F;AAGA,SAAQ,UAAR,QAAyB,YAAzB;AACA,SAAQ,gBAAR,QAA+B,mBAA/B;AACA,SAAQ,IAAR,QAAmB,QAAnB;AAEA,OAAO,IAAM,KAAK,GACd,SADS,KACT,CAAC,IAAD,EACiB;AAAA,MACJ,MADI,GACsB,IADtB,CACJ,MADI;AAAA,MACI,OADJ,GACsB,IADtB,CACI,OADJ;AAAA,MACa,KADb,GACsB,IADtB,CACa,KADb;AAAA,MAEJ,CAFI,GAEC,MAFD,CAEJ,CAFI;AAAA,MAGJ,QAHI,GAGuB,KAHvB,CAGJ,QAHI;AAAA,MAGM,aAHN,GAGuB,KAHvB,CAGM,aAHN;;AAKX,MAAI,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,MAAgC,CAApC,EAAuC;AACrC;AACA;AACA,QAAM,WAAW,GAAG,QAAQ,CAAC,GAAT,CAChB,UAAC,CAAD,EAAI,CAAJ;AAAA,aACI,CAAC,CAAC,CAAD;AAAI;AAAL,QAAuB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAvB,GAAoC,CAAC,CAAC,CAAD,CADzC;AAAA;AAC6C;AAF7B,KAApB;AAGA,WAAO,IAAI,CAAC;AACV,MAAA,OAAO,EAAP,OADU;AAEV,MAAA,KAAK,EAAE;AAAC,QAAA,KAAK,EAAE,WAAR;AAAqB,QAAA,KAAK,EAAE,aAA5B;AAA2C,QAAA,KAAK,EAAE,CAAC,CAAC;AAApD;AAFG,KAAD,CAAX;AAID;;AAED,MAAM,OAAO,GAAG,GAAG,GAAG,OAAN,CAAc,6BAAd,IACZ,IAAI,gBAAJ,CAAqB,CAAC,CAAC,KAAvB,EAA8B,QAA9B,EAAwC,aAAxC,CADY,GAEZ,IAAI,UAAJ,CAAe,CAAC,CAAC,KAAjB,EAAwB,QAAxB,EAAkC,aAAlC,CAFJ;AAGA,MAAM,YAAY,GAAG,CAAC,CAAC,aAAD,CAAD,CAArB;AACA,SAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,CAAjC,EAAsC,CAAC,CAAC,KAAxC,EAA+C,YAA/C,CAAP;AACD,CAxBF;AA0BP,OAAO,IAAM,WAAW,GAAiB;AACvC,EAAA,UAAU,EAAE,KAD2B;AAEvC,EAAA,WAAW,EAAE,OAF0B;AAGvC,EAAA,UAAU,EAAE;AAH2B,CAAlC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}