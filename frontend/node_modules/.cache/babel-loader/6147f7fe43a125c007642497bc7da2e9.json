{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, FusedConv2D } from '@tensorflow/tfjs-core';\nimport { FusableActivation } from './types';\nlet wasmFusedConv2d;\n\nfunction setup(backend) {\n  wasmFusedConv2d = backend.wasm.cwrap(FusedConv2D, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction fusedConv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dataFormat,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode);\n  const fusedActivation = FusableActivation[activation];\n\n  if (fusedActivation == null) {\n    throw new Error(`${activation} activation not yet supported for FusedConv2D ` + `in the wasm backend.`);\n  }\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  const outputChannels = convInfo.outChannels;\n  let biasId = 0;\n\n  if (bias != null) {\n    const biasData = backend.dataIdMap.get(bias.dataId);\n\n    if (biasData.shape.length !== 1) {\n      throw new Error(`FusedConv2D only supports rank-1 bias but got ` + `rank ${biasData.shape.length}.`);\n    }\n\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(`FusedConv2D bias shape (${biasData.shape}) does not ` + `match the number of output channels (${outputChannels})`);\n    }\n\n    biasId = biasData.id;\n  }\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  const batchSize = convInfo.batchSize;\n  const inHeight = convInfo.inHeight;\n  const inWidth = convInfo.inWidth;\n\n  if (dataFormat !== 'NHWC') {\n    throw new Error(`wasm backend FusedConv2D does not support dataFormat:'` + `${dataFormat}'. Please use 'NHWC'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend.dataIdMap.get(preluActivationWeights.dataId).id;\n  wasmFusedConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n  return out;\n}\n\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedConv2d\n};","map":{"version":3,"sources":["../../src/kernels/FusedConv2D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,WAAtB,QAAiH,uBAAjH;AAIA,SAAQ,iBAAR,QAAgC,SAAhC;AAEA,IAAI,eAAJ;;AAUA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,eAAe,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,WAAnB,EAAgC;AAAK;AAArC,IAAiD,CACjE,QADiE,EAEjE,QAFiE,EAGjE,QAHiE,EAIjE,QAJiE,EAKjE,QALiE,EAMjE,QANiE,EAOjE,QAPiE,EAQjE,QARiE,EASjE,QATiE,EAUjE,QAViE,EAWjE,QAXiE,EAYjE,QAZiE,EAajE,QAbiE,EAcjE,QAdiE,EAejE,QAfiE,EAgBjE,QAhBiE,EAiBjE,QAjBiE,EAkBjE,QAlBiE,EAmBjE,QAnBiE,EAoBjE,QApBiE,EAqBjE,QArBiE,EAsBjE,QAtBiE,EAuBjE,QAvBiE,CAAjD,CAAlB;AAyBD;;AAED,SAAS,WAAT,CAAqB,IAArB,EAIC;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,KAAT;AAAgB,IAAA;AAAhB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA,CAAD;AAAI,IAAA,MAAJ;AAAY,IAAA,IAAZ;AAAkB,IAAA;AAAlB,MAA4C,MAAlD;AACA,QAAM;AACJ,IAAA,OADI;AAEJ,IAAA,GAFI;AAGJ,IAAA,SAHI;AAIJ,IAAA,UAJI;AAKJ,IAAA,eALI;AAMJ,IAAA,UANI;AAOJ,IAAA;AAPI,MAQF,KARJ;AAUA,QAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACZ,CAAc,CAAC,KADH,EACW,MAAmB,CAAC,KAD/B,EACsC,OADtC,EAC+C,SAD/C,EAEb,GAFa,EAER,eAFQ,CAAjB;AAIA,QAAM,eAAe,GACjB,iBAAiB,CAAC,UAAD,CADrB;;AAEA,MAAI,eAAe,IAAI,IAAvB,EAA6B;AAC3B,UAAM,IAAI,KAAJ,CACF,GAAG,UAAU,gDAAb,GACA,sBAFE,CAAN;AAGD;;AAED,QAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,QAAM,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,MAAM,CAAC,MAA7B,EAAqC,EAAtD;AAEA,QAAM,cAAc,GAAG,QAAQ,CAAC,WAAhC;AAEA,MAAI,MAAM,GAAG,CAAb;;AACA,MAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAM,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,IAAI,CAAC,MAA3B,CAAjB;;AACA,QAAI,QAAQ,CAAC,KAAT,CAAe,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,YAAM,IAAI,KAAJ,CACF,gDAAA,GACA,QAAQ,QAAQ,CAAC,KAAT,CAAe,MAAM,GAF3B,CAAN;AAGD;;AACD,QAAI,QAAQ,CAAC,KAAT,CAAe,CAAf,MAAsB,cAA1B,EAA0C;AACxC,YAAM,IAAI,KAAJ,CACF,2BAA2B,QAAQ,CAAC,KAAK,aAAzC,GACA,wCAAwC,cAAc,GAFpD,CAAN;AAGD;;AACD,IAAA,MAAM,GAAG,QAAQ,CAAC,EAAlB;AACD;;AAED,QAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,QAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,QAAM,MAAM,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAhC;AACA,QAAM,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAiB,KAAlC;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,OAAT,CAAiB,MAAnC;AACA,QAAM,OAAO,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjC;AACA,QAAM,cAAc,GAAG,QAAQ,CAAC,cAAhC;AACA,QAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,QAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,QAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,QAAM,aAAa,GAAG,QAAQ,CAAC,UAA/B;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjB,KAA0B,MAA1B,GAAmC,CAAnC,GAAuC,CAAzD;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,SAA3B;AACA,QAAM,QAAQ,GAAG,QAAQ,CAAC,QAA1B;AACA,QAAM,OAAO,GAAG,QAAQ,CAAC,OAAzB;;AAEA,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,UAAM,IAAI,KAAJ,CACF,wDAAA,GACA,GAAG,UAAU,uBAFX,CAAN;AAGD;;AAED,QAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,QAAQ,CAAC,QAA5B,EAAsC,SAAtC,CAAZ;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,QAAM,wBAAwB,GAAG,sBAAsB,IAAI,IAA1B,GAC7B,CAD6B,GAE7B,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,sBAAsB,CAAC,MAA7C,EAAqD,EAFzD;AAIA,EAAA,eAAe,CACX,GADW,EACN,SADM,EACK,QADL,EACe,OADf,EACwB,QADxB,EACkC,YADlC,EACgD,WADhD,EAEX,MAFW,EAEH,MAFG,EAEK,QAFL,EAEe,SAFf,EAE0B,OAF1B,EAEmC,SAFnC,EAE8C,cAF9C,EAGX,aAHW,EAGI,YAHJ,EAGkB,WAHlB,EAG+B,aAH/B,EAG8C,cAH9C,EAIX,eAJW,EAIM,wBAJN,EAIgC,cAAc,IAAI,CAJlD,EAIqD,KAJrD,CAAf;AAMA,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,iBAAiB,GAAiB;AAC7C,EAAA,UAAU,EAAE,WADiC;AAE7C,EAAA,WAAW,EAAE,MAFgC;AAG7C,EAAA,SAAS,EAAE,KAHkC;AAI7C,EAAA,UAAU,EAAE;AAJiC,CAAxC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, Tensor4D} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {FusableActivation} from './types';\n\nlet wasmFusedConv2d:\n    (xId: number, batchSize: number, inputHeight: number, inputWidth: number,\n     filterId: number, filterHeight: number, filterWidth: number,\n     biasId: number, padTop: number, padRight: number, padBottom: number,\n     padLeft: number, isSamePad: number, dilationHeight: number,\n     dilationWidth: number, strideHeight: number, strideWidth: number,\n     inputChannels: number, outputChannels: number, activation: number,\n     preluActivationWeightsId: number, leakyreluAlpha: number, outId: number) =>\n        void;\n\nfunction setup(backend: BackendWasm) {\n  wasmFusedConv2d = backend.wasm.cwrap(FusedConv2D, null /* void */, [\n    'number',  // xId\n    'number',  // batchSize\n    'number',  // inputHeight\n    'number',  // inputWidth\n    'number',  // filterId\n    'number',  // filterHeight\n    'number',  // filterWidth\n    'number',  // biasId\n    'number',  // padTop\n    'number',  // padRight\n    'number',  // padBottom\n    'number',  // padLeft\n    'number',  // isSamePad\n    'number',  // dilationHeight\n    'number',  // dilationWidth\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // inputChannels\n    'number',  // outputChannels\n    'number',  // activation\n    'number',  // preluActivationWeightsId\n    'number',  // leakyreluAlpha\n    'number',  // outId\n  ]);\n}\n\nfunction fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  backend: BackendWasm,\n  attrs: FusedConv2DAttrs\n}) {\n  const {inputs, attrs, backend} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dataFormat,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      (x as Tensor4D).shape, (filter as Tensor4D).shape, strides, dilations,\n      pad, dimRoundingMode);\n\n  const fusedActivation =\n      FusableActivation[activation as {} as keyof typeof FusableActivation];\n  if (fusedActivation == null) {\n    throw new Error(\n        `${activation} activation not yet supported for FusedConv2D ` +\n        `in the wasm backend.`);\n  }\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n\n  const outputChannels = convInfo.outChannels;\n\n  let biasId = 0;\n  if (bias != null) {\n    const biasData = backend.dataIdMap.get(bias.dataId);\n    if (biasData.shape.length !== 1) {\n      throw new Error(\n          `FusedConv2D only supports rank-1 bias but got ` +\n          `rank ${biasData.shape.length}.`);\n    }\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(\n          `FusedConv2D bias shape (${biasData.shape}) does not ` +\n          `match the number of output channels (${outputChannels})`);\n    }\n    biasId = biasData.id;\n  }\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  const batchSize = convInfo.batchSize;\n  const inHeight = convInfo.inHeight;\n  const inWidth = convInfo.inWidth;\n\n  if (dataFormat !== 'NHWC') {\n    throw new Error(\n        `wasm backend FusedConv2D does not support dataFormat:'` +\n        `${dataFormat}'. Please use 'NHWC'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const preluActivationWeightsId = preluActivationWeights == null ?\n      0 :\n      backend.dataIdMap.get(preluActivationWeights.dataId).id;\n\n  wasmFusedConv2d(\n      xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth,\n      biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight,\n      dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels,\n      fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n\n  return out;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedConv2d as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}