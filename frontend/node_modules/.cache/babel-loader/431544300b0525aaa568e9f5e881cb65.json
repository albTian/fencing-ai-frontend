{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmResizeBilinear;\n\nfunction setup(backend) {\n  wasmResizeBilinear = backend.wasm.cwrap(ResizeBilinear, null\n  /*void*/\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\n\nfunction resizeBilinear(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: images\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  const xId = xData.id;\n  const out = backend.makeOutput(outShape, 'float32');\n\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmResizeBilinear(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeBilinear\n};","map":{"version":3,"sources":["../../src/kernels/ResizeBilinear.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,cAAlC,EAAyG,IAAzG,QAAoH,uBAApH;AAIA,SAAQ,IAAR,QAAmB,QAAnB;AAEA,IAAI,kBAAJ;;AAKA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,kBAAkB,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,cAAnB,EAAmC;AAAK;AAAxC,IAAkD,CACrE,QADqE,EAErE,QAFqE,EAGrE,QAHqE,EAIrE,QAJqE,EAKrE,QALqE,EAMrE,QANqE,EAOrE,QAPqE,EAQrE,QARqE,EASrE,QATqE,EAUrE,QAVqE,CAU1D;AAV0D,GAAlD,CAArB;AAYD;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAIC;AACC,QAAM;AAAC,IAAA,OAAD;AAAU,IAAA,MAAV;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AAEA,QAAM;AAAC,IAAA;AAAD,MAAW,MAAjB;AACA,QAAM;AAAC,IAAA,YAAD;AAAe,IAAA,gBAAf;AAAiC,IAAA;AAAjC,MAAyC,KAA/C;AACA,QAAM,CAAC,SAAD,EAAY,QAAZ,IAAwB,IAA9B;AAEA,QAAM,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,WAA7B,IAA4C,MAAM,CAAC,KAAzD;AACA,QAAM,QAAQ,GAAG,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,WAA7B,CAAjB;AAEA,MAAI,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,MAAM,CAAC,MAA7B,CAAZ;AACA,MAAI,UAAJ;;AACA,MAAI,KAAK,CAAC,KAAN,KAAgB,SAApB,EAA+B;AAC7B,IAAA,UAAU,GACN,IAAI,CAAC;AAAC,MAAA,OAAD;AAAU,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAE;AAAJ,OAAlB;AAA+B,MAAA,KAAK,EAAE;AAAC,QAAA,KAAK,EAAE;AAAR;AAAtC,KAAD,CADR;AAEA,IAAA,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,UAAU,CAAC,MAAjC,CAAR;AACD;;AACD,QAAM,GAAG,GAAG,KAAK,CAAC,EAAlB;AAEA,QAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,QAAnB,EAA6B,SAA7B,CAAZ;;AACA,MAAI,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,KAA1B,MAAqC,CAAzC,EAA4C;AAC1C,WAAO,GAAP;AACD;;AACD,QAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AAEA,EAAA,kBAAkB,CACd,GADc,EACT,KADS,EACF,SADE,EACS,QADT,EACmB,WADnB,EACgC,SADhC,EAC2C,QAD3C,EAEd,YAAY,GAAG,CAAH,GAAO,CAFL,EAEQ,gBAAgB,GAAG,CAAH,GAAO,CAF/B,EAEkC,KAFlC,CAAlB;;AAIA,MAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,IAAA,OAAO,CAAC,WAAR,CAAoB,UAAU,CAAC,MAA/B;AACD;;AAED,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,oBAAoB,GAAiB;AAChD,EAAA,UAAU,EAAE,cADoC;AAEhD,EAAA,WAAW,EAAE,MAFmC;AAGhD,EAAA,SAAS,EAAE,KAHqC;AAIhD,EAAA,UAAU,EAAE;AAJoC,CAA3C","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {cast} from './Cast';\n\nlet wasmResizeBilinear: (\n    xId: number, batch: number, oldHeight: number, oldWidth: number,\n    numChannels: number, newHeight: number, newWidth: number,\n    alignCorners: number, halfPixelCenters: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmResizeBilinear = backend.wasm.cwrap(ResizeBilinear, null /*void*/, [\n    'number',  // xId\n    'number',  // batch\n    'number',  // oldHeight\n    'number',  // oldWidth\n    'number',  // numChannels\n    'number',  // newHeight\n    'number',  // newWidth\n    'number',  // alignCorners\n    'number',  // halfPixelCenters\n    'number'   // outId\n  ]);\n}\n\nfunction resizeBilinear(args: {\n  backend: BackendWasm,\n  inputs: ResizeBilinearInputs,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData =\n        cast({backend, inputs: {x: images}, attrs: {dtype: 'float32'}});\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n  const xId = xData.id;\n\n  const out = backend.makeOutput(outShape, 'float32');\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  wasmResizeBilinear(\n      xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth,\n      alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}