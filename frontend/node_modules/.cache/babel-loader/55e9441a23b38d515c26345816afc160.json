{"ast":null,"code":"import _slicedToArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, util } from '@tensorflow/tfjs-core';\nvar wasmConv2DBackpropInput;\n\nfunction setup(backend) {\n  wasmConv2DBackpropInput = backend.wasm.cwrap(Conv2DBackpropInput, null, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction conv2DBackpropInput(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dimRoundingMode = attrs.dimRoundingMode,\n      inputShape = attrs.inputShape;\n  var dilations = 1;\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  var batchSize = convInfo.batchSize,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      inHeight = convInfo.inHeight,\n      inWidth = convInfo.inWidth,\n      outChannels = convInfo.outChannels,\n      outHeight = convInfo.outHeight,\n      outWidth = convInfo.outWidth,\n      strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth;\n  var topPad = filterHeight - 1 - convInfo.padInfo.top;\n  var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  var dxStrides = util.computeStrides(convInfo.inShape);\n  var dyStrides = util.computeStrides(dy.shape);\n\n  var _util$computeStrides = util.computeStrides(filter.shape),\n      _util$computeStrides2 = _slicedToArray(_util$computeStrides, 3),\n      fltS0 = _util$computeStrides2[0],\n      fltS1 = _util$computeStrides2[1],\n      fltS2 = _util$computeStrides2[2];\n\n  var xBatchStride = dxStrides[0];\n  var xRowStride = isChannelsLast ? dxStrides[1] : dxStrides[2];\n  var xColStride = isChannelsLast ? dxStrides[2] : 1;\n  var xChannelStride = isChannelsLast ? 1 : dxStrides[1];\n  var yBatchStride = dyStrides[0];\n  var yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  var yColStride = isChannelsLast ? dyStrides[2] : 1;\n  var yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n  var out = backend.makeOutput(convInfo.inShape, 'float32');\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  var dyId = backend.dataIdMap.get(dy.dataId).id;\n  var filterId = backend.dataIdMap.get(filter.dataId).id;\n  wasmConv2DBackpropInput(dyId, filterId, batchSize, filterHeight, filterWidth, inHeight, inWidth, inChannels, outHeight, outWidth, outChannels, strideHeight, strideWidth, topPad, leftPad, fltS0, fltS1, fltS2, xBatchStride, xRowStride, xColStride, xChannelStride, yBatchStride, yRowStride, yColStride, yChannelStride, outId);\n  return out;\n}\n\nexport var conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: conv2DBackpropInput\n};","map":{"version":3,"sources":["../../src/kernels/Conv2DBackpropInput.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmConv2DBackpropInput: (\n    dyId: number, filterId: number, batchSize: number, filterHeight: number,\n    filterWidth: number, inHeight: number, inWidth: number, inChannels: number,\n    outHeight: number, outWidth: number, outChannels: number,\n    strideHeight: number, strideWidth: number, topPad: number, leftPad: number,\n    fltS0: number, fltS1: number, fltS2: number, xBatchStride: number,\n    xRowStride: number, xColStride: number, xChannelStride: number,\n    yBatchStride: number, yRowStride: number, yColStride: number,\n    yChannelStride: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmConv2DBackpropInput = backend.wasm.cwrap(Conv2DBackpropInput, null, [\n    'number',  // dyId\n    'number',  // filterId\n    'number',  // batchSize\n    'number',  // filterHeight\n    'number',  // filterWidth\n    'number',  // inHeight\n    'number',  // inWidth\n    'number',  // inChannels\n    'number',  // outHeight\n    'number',  // outWidth\n    'number',  // outChannels\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // topPad\n    'number',  // leftPad\n    'number',  // fltS0\n    'number',  // fltS1\n    'number',  // fltS2\n    'number',  // xBatchStride\n    'number',  // xRowStride\n    'number',  // xColStride\n    'number',  // xChannelStride\n    'number',  // yBatchStride\n    'number',  // yRowStride\n    'number',  // yColStride\n    'number',  // yChannelStride\n    'number',  // outId\n  ]);\n}\n\nfunction conv2DBackpropInput(args: {\n  backend: BackendWasm,\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, inputShape} = attrs;\n\n  const dilations = 1;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dxStrides = util.computeStrides(convInfo.inShape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [fltS0, fltS1, fltS2] = util.computeStrides(filter.shape);\n  const xBatchStride = dxStrides[0];\n  const xRowStride = isChannelsLast ? dxStrides[1] : dxStrides[2];\n  const xColStride = isChannelsLast ? dxStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dxStrides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  const out = backend.makeOutput(convInfo.inShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const dyId = backend.dataIdMap.get(dy.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n\n  wasmConv2DBackpropInput(\n      dyId, filterId, batchSize, filterHeight, filterWidth, inHeight, inWidth,\n      inChannels, outHeight, outWidth, outChannels, strideHeight, strideWidth,\n      topPad, leftPad, fltS0, fltS1, fltS2, xBatchStride, xRowStride,\n      xColStride, xChannelStride, yBatchStride, yRowStride, yColStride,\n      yChannelStride, outId);\n  return out;\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}