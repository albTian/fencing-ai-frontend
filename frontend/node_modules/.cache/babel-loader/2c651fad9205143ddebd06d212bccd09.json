{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n  var indicesCount = indicesShape[0];\n  var denseRows = denseShape[0];\n  var emptyRowIndicator = new Array(denseRows);\n  var reverseIndexMap = new Array(indicesCount);\n  var rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\"Received SparseTensor with denseShape[0] = 0 but\\n         indices.shape[0] = \".concat(indicesCount));\n    }\n\n    var outputIndices = util.getArrayFromDType(indicesDType, 0);\n    var outputValues = util.getArrayFromDType(valuesDType, 0);\n    return [outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  }\n\n  var rowsAreOrdered = true;\n  var lastIndicesRow = 0;\n  var csrOffset = new Array(denseRows).fill(0);\n\n  for (var i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    var row = indices[i * rank];\n\n    if (row < 0) {\n      throw new Error(\"indices(\".concat(i, \", 0) is invalid: \").concat(row, \" < 0\"));\n    }\n\n    if (row >= denseRows) {\n      throw new Error(\"indices(\".concat(i, \", 0) is invalid: \").concat(row, \" >= \").concat(denseRows));\n    }\n\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;\n    lastIndicesRow = row;\n  }\n\n  var allRowsFull = true;\n\n  for (var _row = 0; _row < denseRows; ++_row) {\n    // csrOffset here describes the number of elements in this dense row\n    var rowEmpty = csrOffset[_row] === 0;\n    emptyRowIndicator[_row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty; // In filled version, each row has at least one element.\n\n    csrOffset[_row] = Math.max(csrOffset[_row], 1); // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n\n    if (_row > 0) {\n      csrOffset[_row] += csrOffset[_row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    var _outputIndices = indices;\n    var _outputValues = values;\n\n    for (var _i = 0; _i < indicesCount; ++_i) {\n      reverseIndexMap[_i] = _i;\n    }\n\n    return [_outputIndices, [indicesCount, rank], _outputValues, emptyRowIndicator, reverseIndexMap];\n  } else {\n    var fullIndicesCount = csrOffset[denseRows - 1];\n\n    var _outputIndices2 = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n\n    var _outputValues2 = util.getArrayFromDType(valuesDType, fullIndicesCount);\n\n    var filledCount = new Array(denseRows).fill(0); // Fill in values for rows that are not missing\n\n    for (var _i2 = 0; _i2 < indicesCount; ++_i2) {\n      // indices is a 2d tensor with shape of [N, rank]\n      var _row2 = indices[_i2 * rank];\n      var offset = filledCount[_row2];\n      var outputI = (_row2 === 0 ? 0 : csrOffset[_row2 - 1]) + offset;\n      filledCount[_row2]++; // Increment the filled count for this row.\n\n      for (var j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        _outputIndices2[outputI * rank + j] = indices[_i2 * rank + j];\n      }\n\n      _outputValues2[outputI] = values[_i2]; // We'll need this reverse index map to backprop correctly.\n\n      reverseIndexMap[_i2] = outputI;\n    } // Fill in values for rows that are missing\n\n\n    for (var _row3 = 0; _row3 < denseRows; ++_row3) {\n      var rowCount = filledCount[_row3];\n\n      if (rowCount === 0) {\n        // We haven't filled this row\n        var startingIndex = _row3 === 0 ? 0 : csrOffset[_row3 - 1]; // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n\n        _outputIndices2[startingIndex * rank + 0] = _row3;\n\n        for (var col = 1; col < rank; ++col) {\n          _outputIndices2[startingIndex * rank + col] = 0;\n        }\n\n        _outputValues2[startingIndex] = defaultValue;\n      }\n    }\n\n    return [_outputIndices2, [fullIndicesCount, rank], _outputValues2, emptyRowIndicator, reverseIndexMap];\n  }\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n    }\n    if (row >= denseRows) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}