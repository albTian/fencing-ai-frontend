{"ast":null,"code":"import _slicedToArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nimport { CppDType } from './types';\nvar wasmProd;\n\nfunction setup(backend) {\n  wasmProd = backend.wasm.cwrap(Prod, null\n  /*void*/\n  , ['number', 'number', 'number', 'number']);\n}\n\nfunction prod(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  var x = inputs.x;\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var inputId = xId;\n  var input = x;\n\n  var _permuteAxesAndTransp = permuteAxesAndTranspose(x, axis, backend),\n      transposed = _permuteAxesAndTransp.transposed,\n      axes = _permuteAxesAndTransp.axes,\n      originalAxes = _permuteAxesAndTransp.originalAxes,\n      inputWasTransposed = _permuteAxesAndTransp.inputWasTransposed;\n\n  var reductionAxes = axes;\n\n  if (inputWasTransposed) {\n    var transposedId = backend.dataIdMap.get(transposed.dataId).id;\n\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, input.shape.length);\n    }\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', reductionAxes, input.shape.length);\n\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(input.shape, reductionAxes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      outShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var out = backend.makeOutput(outShape, input.dtype);\n\n  if (util.sizeFromShape(input.shape) !== 0) {\n    var outId = backend.dataIdMap.get(out.dataId).id;\n    wasmProd(inputId, reduceSize, CppDType[out.dtype], outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    var newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  return out;\n}\n\nexport var prodConfig = {\n  kernelName: Prod,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prod\n};","map":{"version":3,"sources":["../../src/kernels/Prod.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {permuteAxesAndTranspose} from './kernel_utils';\n\nimport {CppDType} from './types';\n\nlet wasmProd: (\n    xId: number, reduceSize: number,\n    dtype: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmProd = backend.wasm.cwrap(Prod, null /*void*/, [\n    'number',\n    'number',\n    'number',\n    'number'\n  ]);\n}\n\nfunction prod(args: {\n  backend: BackendWasm,\n  inputs: ProdInputs,\n  attrs: ProdAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {axis, keepDims} = attrs;\n  const {x} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n\n  const {transposed, axes, originalAxes, inputWasTransposed} =\n      permuteAxesAndTranspose(x, axis, backend);\n\n  let reductionAxes = axes;\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util.getInnerMostAxes(\n          reductionAxes.length, input.shape.length);\n    }\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'prod', reductionAxes, input.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, reductionAxes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const out = backend.makeOutput(outShape, input.dtype);\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmProd(inputId, reduceSize, CppDType[out.dtype], outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  return out;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prod as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}