{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { fill } from './Fill';\nimport { CppDType } from './types';\nvar wasmPadV2;\n\nfunction setup(backend) {\n  wasmPadV2 = backend.wasm.cwrap(PadV2, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'array', 'array', 'number', 'number']);\n}\n\nfunction pad(args) {\n  var x = args.inputs.x,\n      backend = args.backend,\n      _args$attrs = args.attrs,\n      paddings = _args$attrs.paddings,\n      constantValue = _args$attrs.constantValue;\n  var outShape = paddings.map(function (p, i) {\n    return p[0]\n    /* beforePad */\n    + x.shape[i] + p[1];\n  }\n  /* afterPad */\n  );\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    return fill({\n      backend: backend,\n      attrs: {\n        shape: outShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var out = backend.makeOutput(outShape, x.dtype);\n  var outTensorData = backend.dataIdMap.get(out.dataId);\n  var outId = outTensorData.id;\n  var xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  var prePaddingsFlat = paddings.map(function (padTuple) {\n    return padTuple[0];\n  });\n  var postPaddingsFlat = paddings.map(function (padTuple) {\n    return padTuple[1];\n  });\n  var prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n  var postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n  wasmPadV2(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes, postPaddingsBytes, constantValue, outId);\n  return out;\n}\n\nexport var padV2Config = {\n  kernelName: PadV2,\n  backendName: 'wasm',\n  kernelFunc: pad,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/PadV2.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {fill} from './Fill';\n\nimport {CppDType} from './types';\n\nlet wasmPadV2: (\n    xId: number, xShapeBytes: Uint8Array, xShapeLength: number, xDtype: number,\n    prePaddingsBytes: Uint8Array, postPaddingsBytes: Uint8Array,\n    constantValue: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmPadV2 = backend.wasm.cwrap(PadV2, null /* void */, [\n    'number',  // xId\n    'array',   // x.shape\n    'number',  // x.shape.length\n    'number',  // x.dtype\n    'array',   // pre-paddings\n    'array',   // post-paddings\n    'number',  // constantValue\n    'number',  // outId\n  ]);\n}\n\nfunction pad(\n    args: {inputs: PadV2Inputs, backend: BackendWasm, attrs: PadV2Attrs}) {\n  const {inputs: {x}, backend, attrs: {paddings, constantValue}} = args;\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    return fill({\n      backend,\n      attrs: {shape: outShape, value: constantValue, dtype: x.dtype}\n    });\n  }\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(outShape, x.dtype);\n  const outTensorData = backend.dataIdMap.get(out.dataId);\n  const outId = outTensorData.id;\n\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n\n  const prePaddingsFlat = paddings.map(padTuple => padTuple[0]);\n  const postPaddingsFlat = paddings.map(padTuple => padTuple[1]);\n  const prePaddingsBytes =\n      new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n  const postPaddingsBytes =\n      new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n\n  wasmPadV2(\n      xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes,\n      postPaddingsBytes, constantValue, outId);\n  return out;\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'wasm',\n  kernelFunc: pad as {} as KernelFunc,\n  setupFunc: setup\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}