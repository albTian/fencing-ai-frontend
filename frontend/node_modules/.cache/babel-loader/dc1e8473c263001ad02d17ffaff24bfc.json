{"ast":null,"code":"import _classCallCheck from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport var ReshapePackedProgram = function ReshapePackedProgram(outputShape, inputShape) {\n  _classCallCheck(this, ReshapePackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.customUniforms = [{\n    name: 'inputShape',\n    type: 'ivec3'\n  }];\n  this.outputShape = outputShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var mainLoop = \"\";\n\n  for (var i = 0; i < 4; i++) {\n    var thisRC = \"thisRC = rc;\";\n\n    if (i % 2 === 1) {\n      thisRC += \"thisRC.z += 1;\";\n    }\n\n    if (i > 1) {\n      thisRC += \"thisRC.y += 1;\";\n    }\n\n    mainLoop += \"\\n        \".concat(thisRC, \"\\n        \").concat(i > 0 ? \"if(thisRC.y < rows && thisRC.z < cols){\" : '', \"\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\").concat(i, \"] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        \").concat(i > 0 ? '}' : '', \"\\n      \");\n  }\n\n  this.userCode = \"\\n      \".concat(getReshapedInputCoords(inputShape, this.enableShapeUniforms), \"\\n      \").concat(this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = \").concat(this.enableShapeUniforms ? 'outShape[1]' : outputShape[1], \";\\n        int cols = \").concat(this.enableShapeUniforms ? 'outShape[2]' : outputShape[2], \";\\n\\n        \").concat(mainLoop, \"\\n\\n        setOutput(result);\\n      }\\n    \");\n};\n\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n  var coordsFromIndexSnippet = enableShapeUniforms ? shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') : shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \".concat(coordsFromIndexSnippet, \"\\n      return ivec3(r, c, d);\\n    }\\n  \");\n}","map":{"version":3,"sources":["../src/reshape_packed_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,gBAAtB,QAA6C,cAA7C;AACA,OAAO,KAAK,WAAZ,MAA6B,wBAA7B;AAEA,WAAa,oBAAb,GASE,8BAAY,WAAZ,EAAmD,UAAnD,EAEC;AAAA;;AAVD,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,OAAA,YAAA,GAAe,IAAf;AACA,OAAA,YAAA,GAAe,IAAf;AAIA,OAAA,cAAA,GAAiB,CAAC;AAAC,IAAA,IAAI,EAAE,YAAP;AAAqB,IAAA,IAAI,EAAE;AAA3B,GAAD,CAAjB;AAKE,OAAK,WAAL,GAAmB,WAAnB;AACA,OAAK,mBAAL,GAA2B,gBAAgB,CAAC,KAAK,WAAL,CAAiB,MAAlB,CAA3C;AAEA,MAAI,QAAQ,KAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,QAAI,MAAM,iBAAV;;AACA,QAAI,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACf,MAAA,MAAM,oBAAN;AACD;;AACD,QAAI,CAAC,GAAG,CAAR,EAAW;AACT,MAAA,MAAM,oBAAN;AACD;;AAED,IAAA,QAAQ,wBACJ,MADI,uBAEJ,CAAC,GAAG,CAAJ,+CAAoD,EAFhD,yOAQK,CARL,4GAUJ,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,EAVV,aAAR;AAYD;;AAED,OAAK,QAAL,qBACI,sBAAsB,CAAC,UAAD,EAAa,KAAK,mBAAlB,CAD1B,qBAGI,KAAK,mBAAL,GAA2B,WAAW,CAAC,wBAAZ,EAA3B,GAC2B,WAAW,CAAC,kBAAZ,CAA+B,WAA/B,CAJ/B,4JAYiB,KAAK,mBAAL,GAA2B,aAA3B,GAA2C,WAAW,CAAC,CAAD,CAZvE,mCAaiB,KAAK,mBAAL,GAA2B,aAA3B,GAA2C,WAAW,CAAC,CAAD,CAbvE,0BAeM,QAfN;AAoBD,CA3DH;;AA8DA,SAAS,sBAAT,CACI,KADJ,EACqC,mBADrC,EACiE;AAC/D,MAAM,sBAAsB,GAAG,mBAAmB,GAC9C,WAAW,CAAC,2CAAZ,CACI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADJ,EACqB,YADrB,CAD8C,GAG9C,WAAW,CAAC,kCAAZ,CAA+C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/C,EAAgE,KAAhE,CAHJ;AAKA,oFAEM,sBAFN;AAMD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}