{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nimport { parseResultStruct } from './NonMaxSuppression_util';\nvar wasmFunc;\n\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(NonMaxSuppressionV3, 'number', // Result*\n  ['number', 'number', 'number', 'number', 'number']);\n}\n\nfunction kernelFunc(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var iouThreshold = attrs.iouThreshold,\n      maxOutputSize = attrs.maxOutputSize,\n      scoreThreshold = attrs.scoreThreshold;\n  var boxes = inputs.boxes,\n      scores = inputs.scores;\n  var boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  var scoresId = backend.dataIdMap.get(scores.dataId).id;\n  var resOffset = wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold);\n\n  var _parseResultStruct = parseResultStruct(backend, resOffset),\n      pSelectedIndices = _parseResultStruct.pSelectedIndices,\n      selectedSize = _parseResultStruct.selectedSize,\n      pSelectedScores = _parseResultStruct.pSelectedScores,\n      pValidOutputs = _parseResultStruct.pValidOutputs; // Since we are not using scores for V3, we have to delete it from the heap.\n\n\n  backend.wasm._free(pSelectedScores);\n\n  backend.wasm._free(pValidOutputs);\n\n  var selectedIndicesTensor = backend.makeOutput([selectedSize], 'int32', pSelectedIndices);\n  return selectedIndicesTensor;\n}\n\nexport var nonMaxSuppressionV3Config = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: kernelFunc\n};","map":{"version":3,"sources":["../../src/kernels/NonMaxSuppressionV3.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,mBAAlC,QAA6H,uBAA7H;AAIA,SAAQ,iBAAR,QAAgC,0BAAhC;AAEA,IAAI,QAAJ;;AAIA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CACP,mBADO,EAEP,QAFO,EAEI;AACX,GACE,QADF,EAEE,QAFF,EAGE,QAHF,EAIE,QAJF,EAKE,QALF,CAHO,CAAX;AAUD;;AAED,SAAS,UAAT,CAAoB,IAApB,EAIC;AAAA,MACQ,OADR,GACkC,IADlC,CACQ,OADR;AAAA,MACiB,MADjB,GACkC,IADlC,CACiB,MADjB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,YAFR,GAEuD,KAFvD,CAEQ,YAFR;AAAA,MAEsB,aAFtB,GAEuD,KAFvD,CAEsB,aAFtB;AAAA,MAEqC,cAFrC,GAEuD,KAFvD,CAEqC,cAFrC;AAAA,MAGQ,KAHR,GAGyB,MAHzB,CAGQ,KAHR;AAAA,MAGe,MAHf,GAGyB,MAHzB,CAGe,MAHf;AAKC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,KAAK,CAAC,MAA5B,EAAoC,EAApD;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,MAAM,CAAC,MAA7B,EAAqC,EAAtD;AAEA,MAAM,SAAS,GACX,QAAQ,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,YAAnC,EAAiD,cAAjD,CADZ;;AARD,2BAYK,iBAAiB,CAAC,OAAD,EAAU,SAAV,CAZtB;AAAA,MAWQ,gBAXR,sBAWQ,gBAXR;AAAA,MAW0B,YAX1B,sBAW0B,YAX1B;AAAA,MAWwC,eAXxC,sBAWwC,eAXxC;AAAA,MAWyD,aAXzD,sBAWyD,aAXzD,EAcC;;;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,eAAnB;;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,aAAnB;;AAEA,MAAM,qBAAqB,GACvB,OAAO,CAAC,UAAR,CAAmB,CAAC,YAAD,CAAnB,EAAmC,OAAnC,EAA4C,gBAA5C,CADJ;AAGA,SAAO,qBAAP;AACD;;AAED,OAAO,IAAM,yBAAyB,GAAiB;AACrD,EAAA,UAAU,EAAE,mBADyC;AAErD,EAAA,WAAW,EAAE,MAFwC;AAGrD,EAAA,SAAS,EAAE,KAH0C;AAIrD,EAAA,UAAU,EAAE;AAJyC,CAAhD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {parseResultStruct} from './NonMaxSuppression_util';\n\nlet wasmFunc: (\n    boxesId: number, scoresId: number, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number) => number;\n\nfunction setup(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(\n      NonMaxSuppressionV3,\n      'number',  // Result*\n      [\n        'number',  // boxesId\n        'number',  // scoresId\n        'number',  // maxOutputSize\n        'number',  // iouThreshold\n        'number',  // scoreThreshold\n      ]);\n}\n\nfunction kernelFunc(args: {\n  backend: BackendWasm,\n  inputs: NonMaxSuppressionV3Inputs,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {iouThreshold, maxOutputSize, scoreThreshold} = attrs;\n  const {boxes, scores} = inputs;\n\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend.dataIdMap.get(scores.dataId).id;\n\n  const resOffset =\n      wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold);\n\n  const {pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs} =\n      parseResultStruct(backend, resOffset);\n\n  // Since we are not using scores for V3, we have to delete it from the heap.\n  backend.wasm._free(pSelectedScores);\n  backend.wasm._free(pValidOutputs);\n\n  const selectedIndicesTensor =\n      backend.makeOutput([selectedSize], 'int32', pSelectedIndices);\n\n  return selectedIndicesTensor;\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: kernelFunc as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}