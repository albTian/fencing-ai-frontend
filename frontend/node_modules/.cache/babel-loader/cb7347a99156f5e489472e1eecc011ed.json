{"ast":null,"code":"var _jsxFileName = \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/components/Camera.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@tensorflow/tfjs-backend-wasm\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\nimport Webcam from \"react-webcam\";\nimport { drawResults } from \"../utils/drawUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videoConstraints = {\n  width: 1280,\n  height: 720,\n  facingMode: \"environment\"\n};\nlet rafId;\nlet webcam, detector;\nlet canvas, ctx;\nexport default function Camera() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    run();\n  });\n\n  async function run() {\n    setupCamera();\n    await setupDetector();\n    renderPrediction();\n  }\n\n  function setupCamera() {\n    webcam = webcamRef.current;\n    canvas = canvasRef.current;\n    ctx = canvas.getContext(\"2d\");\n    ctx.translate(videoConstraints.width, 0);\n    ctx.scale(-1, 1);\n  }\n\n  async function setupDetector() {\n    const model = poseDetection.SupportedModels.MoveNet;\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n      minPoseScore: 0.2,\n      enableTracking: true\n    };\n    detector = await poseDetection.createDetector(model, detectorConfig);\n  } // Loop to render new skeleton pose and video every frame\n\n\n  async function renderPrediction() {\n    await renderResult();\n    rafId = requestAnimationFrame(renderPrediction);\n\n    if (rafId) {}\n  }\n\n  async function renderResult() {\n    if (!detector) return;\n    const poses = await detect(detector);\n    drawCanvas(poses);\n  }\n\n  async function detect(detector) {\n    if (typeof webcam === \"undefined\" || webcam === null) return;\n    if (webcam.video.readyState !== 4) return;\n    if (!detector) return;\n    return await detector.estimatePoses(webcam.video);\n  }\n\n  function drawCanvas(poses) {\n    ctx.drawImage(webcam.video, 0, 0, videoConstraints.width, videoConstraints.height);\n    drawResults(poses, ctx, 0.2);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative˝\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: videoConstraints.width,\n      height: videoConstraints.height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      playsInline: true,\n      width: videoConstraints.width,\n      height: videoConstraints.height,\n      videoConstraints: videoConstraints,\n      style: {\n        visibility: \"hidden\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Camera, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/components/Camera.jsx"],"names":["React","useRef","useEffect","poseDetection","Webcam","drawResults","videoConstraints","width","height","facingMode","rafId","webcam","detector","canvas","ctx","Camera","webcamRef","canvasRef","run","setupCamera","setupDetector","renderPrediction","current","getContext","translate","scale","model","SupportedModels","MoveNet","detectorConfig","modelType","movenet","MULTIPOSE_LIGHTNING","minPoseScore","enableTracking","createDetector","renderResult","requestAnimationFrame","poses","detect","drawCanvas","video","readyState","estimatePoses","drawImage","position","visibility"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@tensorflow/tfjs-backend-wasm\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\nimport Webcam from \"react-webcam\";\nimport { drawResults } from \"../utils/drawUtils\";\n\nconst videoConstraints = {\n  width: 1280,\n  height: 720,\n  facingMode: \"environment\"\n}\n\nlet rafId;\nlet webcam, detector;\nlet canvas, ctx;\n\nexport default function Camera() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    run();\n  });\n  \n  async function run() {\n    setupCamera();\n    await setupDetector();\n    renderPrediction();\n  }\n\n  function setupCamera() {\n    webcam = webcamRef.current;\n    \n    canvas = canvasRef.current\n    ctx = canvas.getContext(\"2d\");\n    ctx.translate(videoConstraints.width, 0)\n    ctx.scale(-1, 1)\n  }\n\n  async function setupDetector() {\n    const model = poseDetection.SupportedModels.MoveNet;\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n      minPoseScore: 0.2,\n      enableTracking: true,\n    };\n    detector = await poseDetection.createDetector(model, detectorConfig);\n  }\n\n  // Loop to render new skeleton pose and video every frame\n  async function renderPrediction() {\n    await renderResult();\n    rafId = requestAnimationFrame(renderPrediction);\n    if (rafId) {\n    }\n  }\n\n  async function renderResult() {\n    if (!detector) return;\n    const poses = await detect(detector);\n    drawCanvas(poses)\n  }\n\n  async function detect(detector) {\n    if (typeof webcam === \"undefined\" || webcam === null) return;\n    if (webcam.video.readyState !== 4) return;\n    if (!detector) return;\n\n    return await detector.estimatePoses(webcam.video);\n  }\n\n  function drawCanvas(poses) {\n    ctx.drawImage(webcam.video, 0, 0, videoConstraints.width, videoConstraints.height);\n    drawResults(poses, ctx, 0.2);\n  }\n\n  return (\n    <div style={{ position: \"relative˝\" }}>\n      <canvas\n        ref={canvasRef}\n        width={videoConstraints.width}\n        height={videoConstraints.height}\n      />\n      <Webcam\n        ref={webcamRef}\n        playsInline\n        width={videoConstraints.width}\n        height={videoConstraints.height}\n        videoConstraints={videoConstraints}\n        style={{\n          visibility: \"hidden\"\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}