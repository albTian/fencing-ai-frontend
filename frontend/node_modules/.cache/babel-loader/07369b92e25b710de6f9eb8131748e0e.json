{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast'; // Must match enum in CropAndResize.cc\n\nvar InterpolationMethod;\n\n(function (InterpolationMethod) {\n  InterpolationMethod[InterpolationMethod[\"bilinear\"] = 0] = \"bilinear\";\n  InterpolationMethod[InterpolationMethod[\"nearest\"] = 1] = \"nearest\";\n})(InterpolationMethod || (InterpolationMethod = {}));\n\nlet wasmCropAndResize;\n\nfunction setup(backend) {\n  wasmCropAndResize = backend.wasm.cwrap(CropAndResize, null\n  /*void*/\n  , ['number', 'number', 'number', 'number', 'array', 'number', 'number', 'number', 'number', 'number' // out id\n  ]);\n}\n\nfunction cropAndResize(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    method,\n    extrapolationValue,\n    cropSize\n  } = attrs;\n  const {\n    image,\n    boxes,\n    boxInd\n  } = inputs;\n  const numBoxes = boxes.shape[0];\n  const [cropHeight, cropWidth] = cropSize;\n  const outShape = [numBoxes, cropHeight, cropWidth, image.shape[3]];\n  let imagesData = backend.dataIdMap.get(image.dataId);\n  let castedData;\n\n  if (image.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: image\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    imagesData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  const imagesId = imagesData.id;\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;\n  const out = backend.makeOutput(outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);\n  wasmCropAndResize(imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight, cropWidth, InterpolationMethod[method], extrapolationValue, outId);\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cropAndResize\n};","map":{"version":3,"sources":["../../src/kernels/CropAndResize.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {cast} from './Cast';\n\n// Must match enum in CropAndResize.cc\nenum InterpolationMethod {\n  bilinear = 0,\n  nearest = 1\n}\n\nlet wasmCropAndResize: (\n    imagesId: number, boxesId: number, boxIndId: number, numBoxes: number,\n    imagesShape: Uint8Array, cropHeight: number, cropWidth: number,\n    method: number, extrapolationValue: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmCropAndResize = backend.wasm.cwrap(CropAndResize, null /*void*/, [\n    'number',  // imagesId\n    'number',  // boxesId\n    'number',  // boxIndId\n    'number',  // numBoxes\n    'array',   // images shape\n    'number',  // cropHeight\n    'number',  // cropWidth\n    'number',  // method\n    'number',  // extrapolation value\n    'number'   // out id\n  ]);\n}\n\nfunction cropAndResize(args: {\n  backend: BackendWasm,\n  inputs: CropAndResizeInputs,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {method, extrapolationValue, cropSize} = attrs;\n  const {image, boxes, boxInd} = inputs;\n\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize as [number, number];\n  const outShape = [numBoxes, cropHeight, cropWidth, image.shape[3]];\n\n  let imagesData = backend.dataIdMap.get(image.dataId);\n  let castedData;\n  if (image.dtype !== 'float32') {\n    castedData = cast({backend, inputs: {x: image}, attrs: {dtype: 'float32'}});\n    imagesData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  const imagesId = imagesData.id;\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;\n\n  const out = backend.makeOutput(outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);\n\n  wasmCropAndResize(\n      imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight,\n      cropWidth,\n      InterpolationMethod[method as {} as keyof typeof InterpolationMethod],\n      extrapolationValue, outId);\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}