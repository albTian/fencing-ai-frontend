{"ast":null,"code":"import * as poseDetection from '@tensorflow-models/pose-detection';\nconst COLOR_PALETTE = ['#ffffff', '#800000', '#469990', '#e6194b', '#42d4f4', '#fabed4', '#aaffc3', '#9a6324', '#000075', '#f58231', '#4363d8', '#ffd8b1', '#dcbeff', '#808000', '#ffe119', '#911eb4', '#bfef45', '#f032e6', '#3cb44b', '#a9a9a9']; // What are we prop drilling?\n// ctx, scoreThreshold\n\nclass DrawUtil {\n  constructor(ctx, scoreThreshold) {\n    this.ctx = ctx;\n    this.scoreThreshold = scoreThreshold;\n  }\n  /**\n   * Draw the skeleton of a body on the video.\n   * @param keypoints A list of keypoints.\n   * @param poseId The ID of the pose\n   */\n\n\n  drawSkeleton(keypoints, poseId) {\n    // Each poseId is mapped to a color in the color palette.\n    const color = poseId != null ? COLOR_PALETTE[poseId % 20] : 'White';\n    this.ctx.fillStyle = color;\n    this.ctx.strokeStyle = color;\n    this.ctx.lineWidth = 1;\n    poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet).forEach(([i, j]) => {\n      const kp1 = keypoints[i];\n      const kp2 = keypoints[j]; // If score is null, just show the keypoint.\n\n      const score1 = kp1.score != null ? kp1.score : 1;\n      const score2 = kp2.score != null ? kp2.score : 1;\n\n      if (score1 >= this.scoreThreshold && score2 >= this.scoreThreshold) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(kp1.x, kp1.y);\n        this.ctx.lineTo(kp2.x, kp2.y);\n        this.ctx.stroke();\n      }\n    });\n  }\n\n  drawKeypoint(keypoint) {\n    // If score is null, just show the keypoint.\n    const score = keypoint.score != null ? keypoint.score : 1;\n\n    if (score >= this.scoreThreshold) {\n      const circle = new Path2D();\n      circle.arc(keypoint.x, keypoint.y, 3, 0, 2 * Math.PI);\n      this.ctx.fill(circle);\n      this.ctx.stroke(circle);\n    }\n  }\n  /**\n   * Draw the keypoints on the video.\n   * @param keypoints A list of keypoints.\n   */\n\n\n  drawKeypoints(keypoints) {\n    // Hardcoding MoveNet in\n    const keypointInd = poseDetection.util.getKeypointIndexBySide(poseDetection.SupportedModels.MoveNet);\n    this.ctx.fillStyle = 'Red';\n    this.ctx.strokeStyle = 'White';\n    this.ctx.lineWidth = 2;\n\n    for (const i of keypointInd.middle) {\n      drawKeypoint(keypoints[i]);\n    }\n\n    this.ctx.fillStyle = 'Green';\n\n    for (const i of keypointInd.left) {\n      drawKeypoint(keypoints[i]);\n    }\n\n    this.ctx.fillStyle = 'Orange';\n\n    for (const i of keypointInd.right) {\n      drawKeypoint(keypoints[i]);\n    }\n  }\n  /**\n   * Draw the keypoints and skeleton on the video.\n   * @param pose A pose with keypoints to render.\n   */\n\n\n  drawResult(pose) {\n    if (pose.keypoints != null) {\n      drawKeypoints(pose.keypoints);\n      drawSkeleton(pose.keypoints, pose.id);\n    }\n  }\n  /**\n   * Draw the keypoints and skeleton on the video.\n   * @param poses A list of poses to render.\n   */\n\n\n  drawResults(poses) {\n    if (!poses || !this.ctx) return;\n\n    for (const pose of poses) {\n      drawResult(pose);\n    }\n  }\n\n}\n\nexport default DrawUtil;","map":{"version":3,"sources":["/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/utils/drawUtilClass.js"],"names":["poseDetection","COLOR_PALETTE","DrawUtil","constructor","ctx","scoreThreshold","drawSkeleton","keypoints","poseId","color","fillStyle","strokeStyle","lineWidth","util","getAdjacentPairs","SupportedModels","MoveNet","forEach","i","j","kp1","kp2","score1","score","score2","beginPath","moveTo","x","y","lineTo","stroke","drawKeypoint","keypoint","circle","Path2D","arc","Math","PI","fill","drawKeypoints","keypointInd","getKeypointIndexBySide","middle","left","right","drawResult","pose","id","drawResults","poses"],"mappings":"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","sourcesContent":["import * as poseDetection from '@tensorflow-models/pose-detection'\n\nconst COLOR_PALETTE = [\n    '#ffffff', '#800000', '#469990', '#e6194b', '#42d4f4', '#fabed4', '#aaffc3',\n    '#9a6324', '#000075', '#f58231', '#4363d8', '#ffd8b1', '#dcbeff', '#808000',\n    '#ffe119', '#911eb4', '#bfef45', '#f032e6', '#3cb44b', '#a9a9a9'\n];\n\n// What are we prop drilling?\n// ctx, scoreThreshold\n\nclass DrawUtil {\n    constructor(ctx, scoreThreshold) {\n        this.ctx = ctx\n        this.scoreThreshold = scoreThreshold\n    }\n    /**\n     * Draw the skeleton of a body on the video.\n     * @param keypoints A list of keypoints.\n     * @param poseId The ID of the pose\n     */\n    drawSkeleton(keypoints, poseId) {\n        // Each poseId is mapped to a color in the color palette.\n        const color = poseId != null ?\n        COLOR_PALETTE[poseId % 20] :\n        'White';\n        this.ctx.fillStyle = color;\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1;\n        \n        poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet).forEach(([\n            i, j\n        ]) => {\n            const kp1 = keypoints[i];\n            const kp2 = keypoints[j];\n            \n            // If score is null, just show the keypoint.\n            const score1 = kp1.score != null ? kp1.score : 1;\n            const score2 = kp2.score != null ? kp2.score : 1;\n            \n            if (score1 >= this.scoreThreshold && score2 >= this.scoreThreshold) {\n                this.ctx.beginPath();\n                this.ctx.moveTo(kp1.x, kp1.y);\n                this.ctx.lineTo(kp2.x, kp2.y);\n                this.ctx.stroke();\n            }\n        });\n    }\n\n    \n    drawKeypoint(keypoint) {\n        // If score is null, just show the keypoint.\n        const score = keypoint.score != null ? keypoint.score : 1;\n        \n        if (score >= this.scoreThreshold) {\n            const circle = new Path2D();\n            circle.arc(keypoint.x, keypoint.y, 3, 0, 2 * Math.PI);\n            this.ctx.fill(circle);\n            this.ctx.stroke(circle);\n        }\n    }\n    \n    /**\n     * Draw the keypoints on the video.\n     * @param keypoints A list of keypoints.\n     */\n    drawKeypoints(keypoints) {\n        // Hardcoding MoveNet in\n        const keypointInd = poseDetection.util.getKeypointIndexBySide(poseDetection.SupportedModels.MoveNet)\n        this.ctx.fillStyle = 'Red';\n        this.ctx.strokeStyle = 'White';\n        this.ctx.lineWidth = 2;\n        \n        for (const i of keypointInd.middle) {\n            drawKeypoint(keypoints[i]);\n        }\n        \n        this.ctx.fillStyle = 'Green';\n        for (const i of keypointInd.left) {\n            drawKeypoint(keypoints[i]);\n        }\n        \n        this.ctx.fillStyle = 'Orange';\n        for (const i of keypointInd.right) {\n            drawKeypoint(keypoints[i]);\n        }\n    }\n    \n    /**\n     * Draw the keypoints and skeleton on the video.\n     * @param pose A pose with keypoints to render.\n     */\n    drawResult(pose) {\n        if (pose.keypoints != null) {\n            drawKeypoints(pose.keypoints);\n            drawSkeleton(pose.keypoints, pose.id);\n        }\n    }\n    \n    /**\n     * Draw the keypoints and skeleton on the video.\n     * @param poses A list of poses to render.\n     */\n    drawResults(poses) {\n        if (!poses || !this.ctx) return\n        for (const pose of poses) {\n            drawResult(pose);\n        }\n    }\n}\n\nexport default DrawUtil"]},"metadata":{},"sourceType":"module"}