{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Min, util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nlet wasmMin;\n\nfunction setup(backend) {\n  wasmMin = backend.wasm.cwrap(Min, null\n  /*void*/\n  , ['number, number, number']);\n}\n\nfunction min(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n  const {\n    transposed,\n    axes,\n    originalAxes,\n    inputWasTransposed\n  } = permuteAxesAndTranspose(x, axis, backend);\n\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n    }\n  }\n\n  const inputRank = input.shape.length;\n  backend_util.assertAxesAreInnerMostDims('min', axes, inputRank);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(input.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const out = backend.makeOutput(outShape, input.dtype);\n\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmMin(inputId, reduceSize, outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  return out;\n}\n\nexport const minConfig = {\n  kernelName: Min,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: min\n};","map":{"version":3,"sources":["../../src/kernels/Min.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,GAAhD,EAAsF,IAAtF,QAAiG,uBAAjG;AAIA,SAAQ,uBAAR,QAAsC,gBAAtC;AAEA,IAAI,OAAJ;;AAEA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,GAAnB,EAAwB;AAAK;AAA7B,IAAuC,CAAC,wBAAD,CAAvC,CAAV;AACD;;AAED,SAAS,GAAT,CAAa,IAAb,EAA6E;AAE3E,QAAM;AAAC,IAAA,OAAD;AAAU,IAAA,MAAV;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA,IAAD;AAAO,IAAA;AAAP,MAAmB,KAAzB;AACA,QAAM;AAAC,IAAA;AAAD,MAAM,MAAZ;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,MAAI,OAAO,GAAG,GAAd;AACA,MAAI,KAAK,GAAG,CAAZ;AAEA,QAAM;AAAC,IAAA,UAAD;AAAa,IAAA,IAAb;AAAmB,IAAA,YAAnB;AAAiC,IAAA;AAAjC,MACF,uBAAuB,CAAC,CAAD,EAAI,IAAJ,EAAU,OAAV,CAD3B;;AAGA,MAAI,kBAAJ,EAAwB;AACtB,UAAM,YAAY,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,UAAU,CAAC,MAAjC,EAAyC,EAA9D;;AACA,QAAI,YAAY,KAAK,GAArB,EAA0B;AACxB;AACA;AACA,MAAA,KAAK,GAAG,UAAR;AACA,MAAA,OAAO,GAAG,YAAV;AACD;AACF;;AAED,QAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,MAA9B;AAEA,EAAA,YAAY,CAAC,0BAAb,CAAwC,KAAxC,EAA+C,IAA/C,EAAqD,SAArD;AACA,QAAM,CAAC,QAAD,EAAW,WAAX,IACF,YAAY,CAAC,yBAAb,CAAuC,KAAK,CAAC,KAA7C,EAAoD,IAApD,CADJ;AAEA,QAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAnB;AAEA,QAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,QAAnB,EAA6B,KAAK,CAAC,KAAnC,CAAZ;;AACA,MAAI,IAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,KAAzB,MAAoC,CAAxC,EAA2C;AACzC,UAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,IAAA,OAAO,CAAC,OAAD,EAAU,UAAV,EAAsB,KAAtB,CAAP;AACD;;AAED,MAAI,kBAAJ,EAAwB;AACtB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,UAAU,CAAC,MAA/B;AACD;;AAED,MAAI,QAAJ,EAAc;AACZ;AACA,UAAM,QAAQ,GAAG,YAAY,CAAC,oBAAb,CAAkC,GAAG,CAAC,KAAtC,EAA6C,YAA7C,CAAjB;AACA,IAAA,GAAG,CAAC,KAAJ,GAAY,QAAZ;AACD;;AAED,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,SAAS,GAAiB;AACrC,EAAA,UAAU,EAAE,GADyB;AAErC,EAAA,WAAW,EAAE,MAFwB;AAGrC,EAAA,SAAS,EAAE,KAH0B;AAIrC,EAAA,UAAU,EAAE;AAJyB,CAAhC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {permuteAxesAndTranspose} from './kernel_utils';\n\nlet wasmMin: (xId: number, reduceSize: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmMin = backend.wasm.cwrap(Min, null /*void*/, ['number, number, number']);\n}\n\nfunction min(args: {backend: BackendWasm, inputs: MinInputs, attrs: MinAttrs}):\n    TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {axis, keepDims} = attrs;\n  const {x} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n\n  const {transposed, axes, originalAxes, inputWasTransposed} =\n      permuteAxesAndTranspose(x, axis, backend);\n\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n    }\n  }\n\n  const inputRank = input.shape.length;\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, inputRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const out = backend.makeOutput(outShape, input.dtype);\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmMin(inputId, reduceSize, outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  return out;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: min as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}