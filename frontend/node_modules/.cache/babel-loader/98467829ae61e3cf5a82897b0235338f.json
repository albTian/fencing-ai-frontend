{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, util } from '@tensorflow/tfjs-core';\nvar wasmSelect;\n\nfunction setup(backend) {\n  wasmSelect = backend.wasm.cwrap('SelectV2', null, ['number', 'number', 'number', 'number', 'number']);\n}\n\nfunction select(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var condition = inputs.condition,\n      t = inputs.t,\n      e = inputs.e;\n  var conditionId = backend.dataIdMap.get(condition.dataId).id;\n  var tId = backend.dataIdMap.get(t.dataId).id;\n  var eId = backend.dataIdMap.get(e.dataId).id;\n  var out = backend.makeOutput(t.shape, t.dtype);\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  var cRank = condition.shape.length;\n  var tRank = t.shape.length;\n  var offset = cRank === 0 || cRank > 1 || tRank === 1 ? 1 : util.sizeFromShape(t.shape.slice(1));\n  wasmSelect(conditionId, tId, eId, offset, outId);\n  return out;\n}\n\nexport var selectConfig = {\n  kernelName: Select,\n  backendName: 'wasm',\n  kernelFunc: select,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/Select.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,MAAlC,EAAwD,IAAxD,QAAmE,uBAAnE;AAIA,IAAI,UAAJ;;AAIA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,UAAnB,EAA+B,IAA/B,EAAqC,CAChD,QADgD,EAEhD,QAFgD,EAGhD,QAHgD,EAIhD,QAJgD,EAKhD,QALgD,CAArC,CAAb;AAOD;;AAED,SAAS,MAAT,CAAgB,IAAhB,EAAkE;AAAA,MACzD,MADyD,GACtC,IADsC,CACzD,MADyD;AAAA,MACjD,OADiD,GACtC,IADsC,CACjD,OADiD;AAAA,MAEzD,SAFyD,GAEtC,MAFsC,CAEzD,SAFyD;AAAA,MAE9C,CAF8C,GAEtC,MAFsC,CAE9C,CAF8C;AAAA,MAE3C,CAF2C,GAEtC,MAFsC,CAE3C,CAF2C;AAIhE,MAAM,WAAW,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,SAAS,CAAC,MAAhC,EAAwC,EAA5D;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAC,CAAC,KAArB,EAA4B,CAAC,CAAC,KAA9B,CAAZ;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AAEA,MAAM,KAAK,GAAG,SAAS,CAAC,KAAV,CAAgB,MAA9B;AACA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AAEA,MAAM,MAAM,GAAG,KAAK,KAAK,CAAV,IAAe,KAAK,GAAG,CAAvB,IAA4B,KAAK,KAAK,CAAtC,GACX,CADW,GAEX,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAAF,CAAQ,KAAR,CAAc,CAAd,CAAnB,CAFJ;AAIA,EAAA,UAAU,CAAC,WAAD,EAAc,GAAd,EAAmB,GAAnB,EAAwB,MAAxB,EAAgC,KAAhC,CAAV;AACA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,YAAY,GAAiB;AACxC,EAAA,UAAU,EAAE,MAD4B;AAExC,EAAA,WAAW,EAAE,MAF2B;AAGxC,EAAA,UAAU,EAAE,MAH4B;AAIxC,EAAA,SAAS,EAAE;AAJ6B,CAAnC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmSelect: (\n    conditionId: number, tId: number, eId: number, offset: number,\n    outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmSelect = backend.wasm.cwrap('SelectV2', null, [\n    'number',  // conditionId\n    'number',  // tId\n    'number',  // eId\n    'number',  // offset\n    'number',  // outId\n  ]);\n}\n\nfunction select(args: {inputs: SelectInputs, backend: BackendWasm}) {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const conditionId = backend.dataIdMap.get(condition.dataId).id;\n  const tId = backend.dataIdMap.get(t.dataId).id;\n  const eId = backend.dataIdMap.get(e.dataId).id;\n  const out = backend.makeOutput(t.shape, t.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const cRank = condition.shape.length;\n  const tRank = t.shape.length;\n\n  const offset = cRank === 0 || cRank > 1 || tRank === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  wasmSelect(conditionId, tId, eId, offset, outId);\n  return out;\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'wasm',\n  kernelFunc: select as {} as KernelFunc,\n  setupFunc: setup\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}