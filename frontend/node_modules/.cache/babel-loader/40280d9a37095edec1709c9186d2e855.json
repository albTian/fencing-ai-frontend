{"ast":null,"code":"import _slicedToArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { gather_util, GatherNd } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nvar wasmGatherNd;\n\nfunction setup(backend) {\n  wasmGatherNd = backend.wasm.cwrap(GatherNd, null\n  /*void*/\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'array', 'number' // outId\n  ]);\n}\n\nfunction gatherNd(args) {\n  var backend = args.backend,\n      inputs = args.inputs;\n  var params = inputs.params,\n      indices = inputs.indices;\n\n  var _gather_util$prepareA = gather_util.prepareAndValidate(params, indices),\n      _gather_util$prepareA2 = _slicedToArray(_gather_util$prepareA, 4),\n      resultShape = _gather_util$prepareA2[0],\n      numSlices = _gather_util$prepareA2[1],\n      sliceSize = _gather_util$prepareA2[2],\n      strides = _gather_util$prepareA2[3];\n\n  var out = backend.makeOutput(resultShape, params.dtype);\n\n  if (numSlices === 0) {\n    return out;\n  }\n\n  var indicesShape = indices.shape;\n  var sliceRank = indicesShape[indicesShape.length - 1];\n  var xData = backend.dataIdMap.get(params.dataId);\n  var xId = xData.id;\n  var indicesData = backend.dataIdMap.get(indices.dataId);\n  var indicesId = indicesData.id;\n  var stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  wasmGatherNd(xId, CppDType[params.dtype], indicesId, numSlices, sliceRank, sliceSize, stridesBytes, outId);\n  return out;\n}\n\nexport var gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: gatherNd\n};","map":{"version":3,"sources":["../../src/kernels/GatherNd.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,WAAR,EAAqB,QAArB,QAA8E,uBAA9E;AAIA,SAAQ,QAAR,QAAuB,SAAvB;AAEA,IAAI,YAAJ;;AAKA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,YAAY,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,QAAnB,EAA6B;AAAK;AAAlC,IAA4C,CACzD,QADyD,EAEzD,QAFyD,EAGzD,QAHyD,EAIzD,QAJyD,EAKzD,QALyD,EAMzD,QANyD,EAOzD,OAPyD,EAQzD,QARyD,CAQ9C;AAR8C,GAA5C,CAAf;AAUD;;AAED,SAAS,QAAT,CAAkB,IAAlB,EAAsE;AAAA,MAE7D,OAF6D,GAE1C,IAF0C,CAE7D,OAF6D;AAAA,MAEpD,MAFoD,GAE1C,IAF0C,CAEpD,MAFoD;AAAA,MAG7D,MAH6D,GAG1C,MAH0C,CAG7D,MAH6D;AAAA,MAGrD,OAHqD,GAG1C,MAH0C,CAGrD,OAHqD;;AAAA,8BAMhE,WAAW,CAAC,kBAAZ,CAA+B,MAA/B,EAAuC,OAAvC,CANgE;AAAA;AAAA,MAK7D,WAL6D;AAAA,MAKhD,SALgD;AAAA,MAKrC,SALqC;AAAA,MAK1B,OAL0B;;AAQpE,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,WAAnB,EAAgC,MAAM,CAAC,KAAvC,CAAZ;;AACA,MAAI,SAAS,KAAK,CAAlB,EAAqB;AACnB,WAAO,GAAP;AACD;;AAED,MAAM,YAAY,GAAG,OAAO,CAAC,KAA7B;AACA,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,MAAb,GAAsB,CAAvB,CAA9B;AAEA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,MAAM,CAAC,MAA7B,CAAd;AACA,MAAM,GAAG,GAAG,KAAK,CAAC,EAAlB;AACA,MAAM,WAAW,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,OAAO,CAAC,MAA9B,CAApB;AACA,MAAM,SAAS,GAAG,WAAW,CAAC,EAA9B;AAEA,MAAM,YAAY,GAAG,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,OAAf,EAAwB,MAAvC,CAArB;AAEA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,EAAA,YAAY,CACR,GADQ,EACH,QAAQ,CAAC,MAAM,CAAC,KAAR,CADL,EACqB,SADrB,EACgC,SADhC,EAC2C,SAD3C,EACsD,SADtD,EAER,YAFQ,EAEM,KAFN,CAAZ;AAIA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,cAAc,GAAiB;AAC1C,EAAA,UAAU,EAAE,QAD8B;AAE1C,EAAA,WAAW,EAAE,MAF6B;AAG1C,EAAA,SAAS,EAAE,KAH+B;AAI1C,EAAA,UAAU,EAAE;AAJ8B,CAArC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {gather_util, GatherNd, GatherNdInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmGatherNd: (\n    xId: number, dtype: CppDType, indicesId: number, numSlices: number,\n    sliceRank: number, sliceSize: number, strides: Uint8Array, outId: number) =>\n    void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmGatherNd = backend.wasm.cwrap(GatherNd, null /*void*/, [\n    'number',  // xId\n    'number',  // dtype\n    'number',  // indicesId\n    'number',  // numSlices\n    'number',  // sliceRank\n    'number',  // sliceSize\n    'array',   // strides\n    'number'   // outId\n  ]);\n}\n\nfunction gatherNd(args: {backend: BackendWasm, inputs: GatherNdInputs}):\n    TensorInfo {\n  const {backend, inputs} = args;\n  const {params, indices} = inputs;\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      gather_util.prepareAndValidate(params, indices);\n\n  const out = backend.makeOutput(resultShape, params.dtype);\n  if (numSlices === 0) {\n    return out;\n  }\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const xData = backend.dataIdMap.get(params.dataId);\n  const xId = xData.id;\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmGatherNd(\n      xId, CppDType[params.dtype], indicesId, numSlices, sliceRank, sliceSize,\n      stridesBytes, outId);\n\n  return out;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: gatherNd\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}