{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nimport { CppDType } from './types';\nvar wasmFunc;\n\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(ArgMax, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction argmax(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var axis = attrs.axis;\n  var x = inputs.x;\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var inputId = xId;\n  var input = x;\n\n  var _permuteAxesAndTransp = permuteAxesAndTranspose(x, axis, backend),\n      transposed = _permuteAxesAndTransp.transposed,\n      axes = _permuteAxesAndTransp.axes,\n      inputWasTransposed = _permuteAxesAndTransp.inputWasTransposed;\n\n  if (inputWasTransposed) {\n    var transposedId = backend.dataIdMap.get(transposed.dataId).id;\n\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n    }\n  }\n\n  var outShape = input.shape.slice(0, -1);\n  var out = backend.makeOutput(outShape, 'int32');\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  var outerSize = util.sizeFromShape(out.shape);\n  var innerSize = input.shape[axes[0]];\n  wasmFunc(inputId, CppDType[input.dtype], outerSize, innerSize, outId);\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  return out;\n}\n\nexport var argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: 'wasm',\n  kernelFunc: argmax,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/ArgMax.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,EAAqE,IAArE,QAAgF,uBAAhF;AAIA,SAAQ,uBAAR,QAAsC,gBAAtC;AACA,SAAQ,QAAR,QAAuB,SAAvB;AAEA,IAAI,QAAJ;;AAIA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,MAAnB,EAA2B;AAAK;AAAhC,IAA4C,CACrD,QADqD,EAErD,QAFqD,EAGrD,QAHqD,EAIrD,QAJqD,EAKrD,QALqD,CAK1C;AAL0C,GAA5C,CAAX;AAOD;;AAED,SAAS,MAAT,CACI,IADJ,EAC0E;AAAA,MACjE,OADiE,GACvC,IADuC,CACjE,OADiE;AAAA,MACxD,MADwD,GACvC,IADuC,CACxD,MADwD;AAAA,MAChD,KADgD,GACvC,IADuC,CAChD,KADgD;AAAA,MAEjE,IAFiE,GAEzD,KAFyD,CAEjE,IAFiE;AAAA,MAGjE,CAHiE,GAG5D,MAH4D,CAGjE,CAHiE;AAIxE,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,MAAI,OAAO,GAAG,GAAd;AACA,MAAI,KAAK,GAAG,CAAZ;;AANwE,8BASpE,uBAAuB,CAAC,CAAD,EAAI,IAAJ,EAAU,OAAV,CAT6C;AAAA,MAQjE,UARiE,yBAQjE,UARiE;AAAA,MAQrD,IARqD,yBAQrD,IARqD;AAAA,MAQ/C,kBAR+C,yBAQ/C,kBAR+C;;AAWxE,MAAI,kBAAJ,EAAwB;AACtB,QAAM,YAAY,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,UAAU,CAAC,MAAjC,EAAyC,EAA9D;;AACA,QAAI,YAAY,KAAK,GAArB,EAA0B;AACxB;AACA;AACA,MAAA,KAAK,GAAG,UAAR;AACA,MAAA,OAAO,GAAG,YAAV;AACD;AACF;;AAED,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAAjB;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,QAAnB,EAA6B,OAA7B,CAAZ;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,aAAL,CAAmB,GAAG,CAAC,KAAvB,CAAlB;AACA,MAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,IAAI,CAAC,CAAD,CAAhB,CAAlB;AACA,EAAA,QAAQ,CAAC,OAAD,EAAU,QAAQ,CAAC,KAAK,CAAC,KAAP,CAAlB,EAAiC,SAAjC,EAA4C,SAA5C,EAAuD,KAAvD,CAAR;;AAEA,MAAI,kBAAJ,EAAwB;AACtB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,UAAU,CAAC,MAA/B;AACD;;AAED,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,YAAY,GAAiB;AACxC,EAAA,UAAU,EAAE,MAD4B;AAExC,EAAA,WAAW,EAAE,MAF2B;AAGxC,EAAA,UAAU,EAAE,MAH4B;AAIxC,EAAA,SAAS,EAAE;AAJ6B,CAAnC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {permuteAxesAndTranspose} from './kernel_utils';\nimport {CppDType} from './types';\n\nlet wasmFunc: (\n    xId: number, dtype: number, outerSize: number, innerSize: number,\n    outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmFunc = backend.wasm.cwrap(ArgMax, null /* void */, [\n    'number',  // x_id\n    'number',  // dtype\n    'number',  // outer_size\n    'number',  // inner_size\n    'number'   // out_id\n  ]);\n}\n\nfunction argmax(\n    args: {inputs: ArgMaxInputs, backend: BackendWasm, attrs: ArgMaxAttrs}) {\n  const {backend, inputs, attrs} = args;\n  const {axis} = attrs as {} as ArgMaxAttrs;\n  const {x} = inputs as {} as ArgMaxInputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n\n  const {transposed, axes, inputWasTransposed} =\n      permuteAxesAndTranspose(x, axis, backend);\n\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n    }\n  }\n\n  const outShape = input.shape.slice(0, -1);\n  const out = backend.makeOutput(outShape, 'int32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const outerSize = util.sizeFromShape(out.shape);\n  const innerSize = input.shape[axes[0]];\n  wasmFunc(inputId, CppDType[input.dtype], outerSize, innerSize, outId);\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'wasm',\n  kernelFunc: argmax as {} as KernelFunc,\n  setupFunc: setup\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}