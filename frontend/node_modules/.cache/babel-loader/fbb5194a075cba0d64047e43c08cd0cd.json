{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nvar wasmStridedSlice;\n\nfunction setup(backend) {\n  wasmStridedSlice = backend.wasm.cwrap(StridedSlice, null\n  /*void*/\n  , ['number', 'array', 'number', 'array', 'array', 'array', 'array', 'array', 'number', 'number']);\n}\n\nexport function stridedSlice(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var begin = attrs.begin,\n      end = attrs.end,\n      strides = attrs.strides;\n\n  if (strides == null) {\n    strides = new Array(begin.length);\n  }\n\n  var beginMask = attrs.beginMask,\n      endMask = attrs.endMask,\n      ellipsisMask = attrs.ellipsisMask,\n      newAxisMask = attrs.newAxisMask,\n      shrinkAxisMask = attrs.shrinkAxisMask;\n  var ellipsisAxes = backend_util.slice_util.maskToAxes(ellipsisMask);\n\n  if (ellipsisAxes.length > 1) {\n    throw new Error('Multiple ellipses in slice is not allowed.');\n  }\n\n  if (ellipsisMask !== 0 && newAxisMask !== 0) {\n    throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');\n  }\n\n  if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {\n    throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');\n  }\n\n  var numInterpolatedAxes = x.shape.length - begin.length; // Expand the dims of x based on the newAxisMask.\n\n  var expandAxes = backend_util.slice_util.maskToAxes(newAxisMask);\n  var newShape = x.shape.slice();\n  expandAxes.forEach(function (axis) {\n    begin[axis] = 0;\n    end[axis] = 1;\n    newShape.splice(axis, 0, 1);\n  });\n  var xReshaped = reshape({\n    inputs: {\n      x: x\n    },\n    attrs: {\n      shape: newShape\n    },\n    backend: backend\n  });\n\n  var _backend_util$slice_u = backend_util.slice_util.getNormalizedAxes(xReshaped.shape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask),\n      normalizedBegin = _backend_util$slice_u.begin,\n      normalizedEnd = _backend_util$slice_u.end,\n      normalizedStrides = _backend_util$slice_u.strides;\n\n  begin = normalizedBegin;\n  end = normalizedEnd;\n  strides = normalizedStrides;\n  var shrinkAxes = backend_util.slice_util.maskToAxes(shrinkAxisMask); // Adjust the ends based on the shrink mask.\n\n  shrinkAxes.forEach(function (axis) {\n    end[axis] = begin[axis] + 1;\n    strides[axis] = 1;\n  }); // Figure out the output shape.\n\n  var size = backend_util.slice_util.computeOutShape(begin, end, strides); // Remove the axes based on shrinkMask.\n\n  var outShape = size.filter(function (_, axis) {\n    return shrinkAxes.indexOf(axis) === -1;\n  });\n  var nonStrided = strides.every(function (v) {\n    return v === 1;\n  });\n\n  if (nonStrided) {\n    var xSliced = slice({\n      inputs: {\n        x: xReshaped\n      },\n      attrs: {\n        begin: begin,\n        size: size\n      },\n      backend: backend\n    });\n    backend.disposeData(xReshaped.dataId);\n\n    var _reshaped = reshape({\n      inputs: {\n        x: xSliced\n      },\n      attrs: {\n        shape: outShape\n      },\n      backend: backend\n    });\n\n    backend.disposeData(xSliced.dataId);\n    return _reshaped;\n  }\n\n  var out = backend.makeOutput(outShape, 'float32');\n\n  if (!outShape.some(function (axis) {\n    return axis === 0;\n  })) {\n    var xId = backend.dataIdMap.get(xReshaped.dataId).id;\n    var xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(xReshaped.shape)).buffer);\n    var beginBytes = new Uint8Array(new Int32Array(begin).buffer);\n    var endBytes = new Uint8Array(new Int32Array(end).buffer);\n    var stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n    var outputShapeBytes = new Uint8Array(new Int32Array(outShape).buffer);\n    var outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(outShape)).buffer);\n    var outId = backend.dataIdMap.get(out.dataId).id;\n    wasmStridedSlice(xId, xStridesBytes, xReshaped.shape.length, beginBytes, endBytes, stridesBytes, outputShapeBytes, outStridesBytes, outShape.length, outId);\n  }\n\n  backend.disposeData(xReshaped.dataId);\n  var reshaped = reshape({\n    inputs: {\n      x: out\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend: backend\n  });\n  backend.disposeData(out.dataId);\n  return reshaped;\n}\nexport var stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: stridedSlice\n};","map":{"version":3,"sources":["../../src/kernels/StridedSlice.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nlet wasmStridedSlice: (\n    xId: number, xStridesBytes: Uint8Array, xRank: number,\n    beginBytes: Uint8Array, endBytes: Uint8Array, stridesBytes: Uint8Array,\n    outShapeBytes: Uint8Array, outStridesBytes: Uint8Array,\n    outShapeLength: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmStridedSlice = backend.wasm.cwrap(StridedSlice, null /*void*/, [\n    'number',  // xId\n    'array',   // xStrides\n    'number',  // xRank\n    'array',   // beginBytes\n    'array',   // endBytes\n    'array',   // stridesBytes\n    'array',   // outShapeBytes\n    'array',   // outStridesBytes\n    'number',  // outShapeLength\n    'number',  // outId\n  ]);\n}\n\nexport function stridedSlice(args: {\n  backend: BackendWasm,\n  inputs: StridedSliceInputs,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {x} = inputs;\n\n  let {begin, end, strides} = attrs;\n  if (strides == null) {\n    strides = new Array(begin.length);\n  }\n\n  const {beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask} = attrs;\n\n  const ellipsisAxes = backend_util.slice_util.maskToAxes(ellipsisMask);\n  if (ellipsisAxes.length > 1) {\n    throw new Error('Multiple ellipses in slice is not allowed.');\n  }\n\n  if (ellipsisMask !== 0 && newAxisMask !== 0) {\n    throw new Error(\n        'Using both ellipsisMask and newAxisMask is not yet supported.');\n  }\n\n  if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {\n    throw new Error(\n        'Using both ellipsisMask and shrinkAxisMask is not yet supported.');\n  }\n\n  const numInterpolatedAxes = x.shape.length - begin.length;\n\n  // Expand the dims of x based on the newAxisMask.\n  const expandAxes = backend_util.slice_util.maskToAxes(newAxisMask);\n  const newShape = x.shape.slice();\n  expandAxes.forEach(axis => {\n    begin[axis] = 0;\n    end[axis] = 1;\n    newShape.splice(axis, 0, 1);\n  });\n\n  const xReshaped = reshape({inputs: {x}, attrs: {shape: newShape}, backend});\n\n  const {\n    begin: normalizedBegin,\n    end: normalizedEnd,\n    strides: normalizedStrides\n  } =\n      backend_util.slice_util.getNormalizedAxes(\n          xReshaped.shape, ellipsisAxes, numInterpolatedAxes, begin, end,\n          strides, beginMask, endMask, ellipsisMask);\n  begin = normalizedBegin;\n  end = normalizedEnd;\n  strides = normalizedStrides;\n\n  const shrinkAxes = backend_util.slice_util.maskToAxes(shrinkAxisMask);\n  // Adjust the ends based on the shrink mask.\n  shrinkAxes.forEach(axis => {\n    end[axis] = begin[axis] + 1;\n    strides[axis] = 1;\n  });\n\n  // Figure out the output shape.\n  const size = backend_util.slice_util.computeOutShape(begin, end, strides);\n  // Remove the axes based on shrinkMask.\n  const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);\n\n  const nonStrided = strides.every(v => v === 1);\n  if (nonStrided) {\n    const xSliced = slice(\n        {inputs: {x: xReshaped}, attrs: {begin, size}, backend});\n    backend.disposeData(xReshaped.dataId);\n    const reshaped =\n        reshape({inputs: {x: xSliced}, attrs: {shape: outShape}, backend});\n    backend.disposeData(xSliced.dataId);\n    return reshaped;\n  }\n\n  const out = backend.makeOutput(outShape, 'float32');\n  if (!outShape.some(axis => axis === 0)) {\n    const xId = backend.dataIdMap.get(xReshaped.dataId).id;\n    const xStridesBytes = new Uint8Array(\n        new Int32Array(util.computeStrides(xReshaped.shape)).buffer);\n    const beginBytes = new Uint8Array(new Int32Array(begin).buffer);\n    const endBytes = new Uint8Array(new Int32Array(end).buffer);\n    const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n\n    const outputShapeBytes = new Uint8Array(new Int32Array(outShape).buffer);\n    const outStridesBytes =\n        new Uint8Array(new Int32Array(util.computeStrides(outShape)).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n\n    wasmStridedSlice(\n        xId, xStridesBytes, xReshaped.shape.length, beginBytes, endBytes,\n        stridesBytes, outputShapeBytes, outStridesBytes, outShape.length,\n        outId);\n  }\n  backend.disposeData(xReshaped.dataId);\n\n  const reshaped =\n      reshape({inputs: {x: out}, attrs: {shape: outShape}, backend});\n\n  backend.disposeData(out.dataId);\n  return reshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}