{"ast":null,"code":"import _classCallCheck from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var SliceProgram = function SliceProgram(destSize) {\n  _classCallCheck(this, SliceProgram);\n\n  this.variableNames = ['source'];\n  this.outputShape = destSize;\n  this.rank = destSize.length;\n  var dtype = getCoordsDataType(this.rank);\n  this.customUniforms = [{\n    name: 'start',\n    arrayIndex: this.rank,\n    type: 'int'\n  }];\n  var sourceCoords = getCoords(this.rank);\n  var body;\n  var coordSum = destSize.map(function (_, i) {\n    return \"sourceLoc.\".concat(coords[i], \" = start[\").concat(i, \"] + coords.\").concat(coords[i], \";\");\n  });\n  body = \"\\n        \".concat(dtype, \" sourceLoc;\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        \").concat(coordSum.join('\\n'), \"\\n      \");\n  this.userCode = \"\\n      void main() {\\n        \".concat(body, \"\\n        setOutput(getSource(\").concat(sourceCoords, \"));\\n      }\\n    \");\n};\nvar coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(function (x) {\n      return 'sourceLoc.' + x;\n    }).join(',');\n  } else {\n    throw Error(\"Slicing for rank \".concat(rank, \" is not yet supported\"));\n  }\n}","map":{"version":3,"sources":["../src/slice_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAA6C,mBAA7C;AAEA,WAAa,YAAb,GAOE,sBAAY,QAAZ,EAA8B;AAAA;;AAN9B,OAAA,aAAA,GAAgB,CAAC,QAAD,CAAhB;AAOE,OAAK,WAAL,GAAmB,QAAnB;AACA,OAAK,IAAL,GAAY,QAAQ,CAAC,MAArB;AAEA,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AACA,OAAK,cAAL,GAAsB,CAAC;AAAC,IAAA,IAAI,EAAE,OAAP;AAAgB,IAAA,UAAU,EAAE,KAAK,IAAjC;AAAuC,IAAA,IAAI,EAAE;AAA7C,GAAD,CAAtB;AACA,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,IAAN,CAA9B;AAEA,MAAI,IAAJ;AACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAC,CAAD,EAAI,CAAJ,EAAS;AACrC,+BAAoB,MAAM,CAAC,CAAD,CAA1B,sBAAyC,CAAzC,wBAAwD,MAAM,CAAC,CAAD,CAA9D;AACD,GAFgB,CAAjB;AAGA,EAAA,IAAI,uBACE,KADF,kCAEE,KAFF,mDAGE,QAAQ,CAAC,IAAT,CAAc,IAAd,CAHF,aAAJ;AAKA,OAAK,QAAL,4CAEM,IAFN,2CAG0B,YAH1B;AAMD,CA9BH;AAiCA,IAAM,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAf;;AAEA,SAAS,SAAT,CAAmB,IAAnB,EAA+B;AAC7B,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,WAAP;AACD,GAFD,MAEO,IAAI,IAAI,IAAI,CAAZ,EAAe;AACpB,WAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,IAAhB,EAAsB,GAAtB,CAA0B,UAAA,CAAC;AAAA,aAAI,eAAe,CAAnB;AAAA,KAA3B,EAAiD,IAAjD,CAAsD,GAAtD,CAAP;AACD,GAFM,MAEA;AACL,UAAM,KAAK,4BAAqB,IAArB,2BAAX;AACD;AACF","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}