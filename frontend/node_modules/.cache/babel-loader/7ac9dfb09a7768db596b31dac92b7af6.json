{"ast":null,"code":"import _classCallCheck from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport var EncodeMatrixProgram = function EncodeMatrixProgram(outputShape) {\n  var inputIsUnsignedByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  _classCallCheck(this, EncodeMatrixProgram);\n\n  this.variableNames = ['A'];\n  this.customUniforms = [{\n    name: 'texShape',\n    type: 'ivec2'\n  }];\n  var glsl = getGlslDifferences();\n  this.outputShape = outputShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var output = \"result\";\n\n  if (inputIsUnsignedByte) {\n    output = \"floor(result * 255. + 0.5)\";\n  }\n\n  this.userCode = \"\\n      \".concat(this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n\\n        int r = flatIndex / texShape[1];\\n        int c = imod(flatIndex, texShape[1]);\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\\n        vec4 values = \").concat(glsl.texture2D, \"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \").concat(glsl.output, \" = vec4(\").concat(output, \", 0., 0., 0.);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/encode_matrix_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,kBAAR,QAAiC,gBAAjC;AACA,SAAsB,gBAAtB,QAA6C,cAA7C;AACA,OAAO,KAAK,WAAZ,MAA6B,wBAA7B;AAEA,WAAa,mBAAb,GAOE,6BACI,WADJ,EACsE;AAAA,MAA3B,mBAA2B,uEAAL,KAAK;;AAAA;;AAPtE,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAIA,OAAA,cAAA,GAAiB,CAAC;AAAC,IAAA,IAAI,EAAE,UAAP;AAAmB,IAAA,IAAI,EAAE;AAAzB,GAAD,CAAjB;AAIE,MAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,OAAK,WAAL,GAAmB,WAAnB;AACA,OAAK,mBAAL,GAA2B,gBAAgB,CAAC,KAAK,WAAL,CAAiB,MAAlB,CAA3C;AAEA,MAAI,MAAM,WAAV;;AACA,MAAI,mBAAJ,EAAyB;AACvB,IAAA,MAAM,+BAAN;AACD;;AAED,OAAK,QAAL,qBAEI,KAAK,mBAAL,GAA2B,WAAW,CAAC,wBAAZ,EAA3B,GAC2B,WAAW,CAAC,kBAAZ,CAA+B,WAA/B,CAH/B,uZAgBoB,IAAI,CAAC,SAhBzB,oTA8BM,IAAI,CAAC,MA9BX,qBA8B4B,MA9B5B;AAiCD,CAnDH","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}