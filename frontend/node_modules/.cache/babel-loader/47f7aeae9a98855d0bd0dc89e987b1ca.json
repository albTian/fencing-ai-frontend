{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { FusableActivation } from './types';\nvar wasmFusedDepthwiseConv2d;\n\nfunction setup(backend) {\n  wasmFusedDepthwiseConv2d = backend.wasm.cwrap(FusedDepthwiseConv2D, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction fusedDepthwiseConv2d(args) {\n  var inputs = args.inputs,\n      attrs = args.attrs,\n      backend = args.backend;\n  var x = inputs.x,\n      filter = inputs.filter,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dilations = attrs.dilations,\n      dataFormat = attrs.dataFormat,\n      dimRoundingMode = attrs.dimRoundingMode,\n      activation = attrs.activation,\n      leakyreluAlpha = attrs.leakyreluAlpha;\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  var fusedActivation = FusableActivation[activation];\n\n  if (fusedActivation == null) {\n    throw new Error(\"\".concat(activation, \" activation not yet supported for FusedDepthwiseConv2D \") + \"in the wasm backend.\");\n  }\n\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var filterId = backend.dataIdMap.get(filter.dataId).id;\n  var outputChannels = convInfo.outChannels;\n  var biasId = 0;\n\n  if (bias != null) {\n    var biasData = backend.dataIdMap.get(bias.dataId);\n\n    if (biasData.shape.length !== 1) {\n      throw new Error(\"FusedDepthwiseConv2D only supports rank-1 bias but got \" + \"rank \".concat(biasData.shape.length, \".\"));\n    }\n\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(\"FusedDepthwiseConv2D bias shape (\".concat(biasData.shape, \") does not \") + \"match the number of output channels (\".concat(outputChannels, \")\"));\n    }\n\n    biasId = biasData.id;\n  }\n\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var padTop = convInfo.padInfo.top;\n  var padRight = convInfo.padInfo.right;\n  var padBottom = convInfo.padInfo.bottom;\n  var padLeft = convInfo.padInfo.left;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var inputChannels = convInfo.inChannels;\n  var isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  var batchSize = convInfo.batchSize;\n  var inHeight = convInfo.inHeight;\n  var inWidth = convInfo.inWidth;\n\n  if (dataFormat !== 'NHWC') {\n    throw new Error(\"wasm backend FusedDepthwiseConv2D does not support dataFormat:'\" + \"\".concat(dataFormat, \"'. Please use 'NHWC'.\"));\n  }\n\n  var out = backend.makeOutput(convInfo.outShape, 'float32');\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  var preluActivationWeightsId = preluActivationWeights == null ? 0 : backend.dataIdMap.get(preluActivationWeights.dataId).id;\n  wasmFusedDepthwiseConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n  return out;\n}\n\nexport var fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedDepthwiseConv2d\n};","map":{"version":3,"sources":["../../src/kernels/FusedDepthwiseConv2D.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, Tensor4D} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {FusableActivation} from './types';\n\nlet wasmFusedDepthwiseConv2d:\n    (xId: number, batchSize: number, inputHeight: number, inputWidth: number,\n     filterId: number, filterHeight: number, filterWidth: number,\n     biasId: number, padTop: number, padRight: number, padBottom: number,\n     padLeft: number, isSamePad: number, dilationHeight: number,\n     dilationWidth: number, strideHeight: number, strideWidth: number,\n     inputChannels: number, outputChannels: number, activation: number,\n     preluActivationWeightsId: number, leakyreluAlpha: number, outId: number) =>\n        void;\n\nfunction setup(backend: BackendWasm) {\n  wasmFusedDepthwiseConv2d =\n      backend.wasm.cwrap(FusedDepthwiseConv2D, null /* void */, [\n        'number',  // xId\n        'number',  // batchSize\n        'number',  // inputHeight\n        'number',  // inputWidth\n        'number',  // filterId\n        'number',  // filterHeight\n        'number',  // filterWidth\n        'number',  // biasId\n        'number',  // padTop\n        'number',  // padRight\n        'number',  // padBottom\n        'number',  // padLeft\n        'number',  // isSamePad\n        'number',  // dilationHeight\n        'number',  // dilationWidth\n        'number',  // strideHeight\n        'number',  // strideWidth\n        'number',  // inputChannels\n        'number',  // outputChannels\n        'number',  // activation\n        'number',  // preluActivationWeightsId\n        'number',  // leakyreluAlpha\n        'number',  // outId\n      ]);\n}\n\nfunction fusedDepthwiseConv2d(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: BackendWasm,\n  attrs: FusedDepthwiseConv2DAttrs\n}) {\n  const {inputs, attrs, backend} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dataFormat,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      (x as Tensor4D).shape, (filter as Tensor4D).shape, strides, dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const fusedActivation =\n      FusableActivation[activation as {} as keyof typeof FusableActivation];\n  if (fusedActivation == null) {\n    throw new Error(\n        `${activation} activation not yet supported for FusedDepthwiseConv2D ` +\n        `in the wasm backend.`);\n  }\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n\n  const outputChannels = convInfo.outChannels;\n\n  let biasId = 0;\n  if (bias != null) {\n    const biasData = backend.dataIdMap.get(bias.dataId);\n    if (biasData.shape.length !== 1) {\n      throw new Error(\n          `FusedDepthwiseConv2D only supports rank-1 bias but got ` +\n          `rank ${biasData.shape.length}.`);\n    }\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(\n          `FusedDepthwiseConv2D bias shape (${biasData.shape}) does not ` +\n          `match the number of output channels (${outputChannels})`);\n    }\n    biasId = biasData.id;\n  }\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  const batchSize = convInfo.batchSize;\n  const inHeight = convInfo.inHeight;\n  const inWidth = convInfo.inWidth;\n\n  if (dataFormat !== 'NHWC') {\n    throw new Error(\n        `wasm backend FusedDepthwiseConv2D does not support dataFormat:'` +\n        `${dataFormat}'. Please use 'NHWC'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const preluActivationWeightsId = preluActivationWeights == null ?\n      0 :\n      backend.dataIdMap.get(preluActivationWeights.dataId).id;\n\n  wasmFusedDepthwiseConv2d(\n      xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth,\n      biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight,\n      dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels,\n      fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n\n  return out;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedDepthwiseConv2d as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}