{"ast":null,"code":"import _toConsumableArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SplitV, util } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n  var inputs = args.inputs,\n      attrs = args.attrs,\n      backend = args.backend;\n  var x = inputs.x;\n  var numOrSizeSplits = attrs.numOrSizeSplits,\n      axis = attrs.axis;\n  var $axis = util.parseAxisParam(axis, x.shape)[0];\n  var splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n  var begin = new Array(x.shape.length).fill(0);\n  var size = x.shape.slice();\n  return splitSizes.map(function (s) {\n    var xSliceSize = _toConsumableArray(size);\n\n    xSliceSize[$axis] = s;\n    var xSlice = slice({\n      inputs: {\n        x: x\n      },\n      attrs: {\n        begin: begin,\n        size: xSliceSize\n      },\n      backend: backend\n    });\n    begin[$axis] += s;\n    return xSlice;\n  });\n}\nexport var splitVConfig = {\n  kernelName: SplitV,\n  backendName: 'wasm',\n  kernelFunc: splitV\n};","map":{"version":3,"sources":["../../src/kernels/SplitV.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,MAAlC,EAAqE,IAArE,QAAgF,uBAAhF;AACA,SAAQ,YAAR,QAA2B,uBAA3B;AAIA,SAAQ,KAAR,QAAoB,SAApB;AAEA,OAAM,SAAU,MAAV,CACF,IADE,EACoE;AAAA,MACjE,MADiE,GACvC,IADuC,CACjE,MADiE;AAAA,MACzD,KADyD,GACvC,IADuC,CACzD,KADyD;AAAA,MAClD,OADkD,GACvC,IADuC,CAClD,OADkD;AAAA,MAEjE,CAFiE,GAE5D,MAF4D,CAEjE,CAFiE;AAAA,MAGjE,eAHiE,GAGxC,KAHwC,CAGjE,eAHiE;AAAA,MAGhD,IAHgD,GAGxC,KAHwC,CAGhD,IAHgD;AAKxE,MAAM,KAAK,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,EAAmC,CAAnC,CAAd;AAEA,MAAM,UAAU,GAAG,YAAY,CAAC,gBAAb,CAA8B,CAA9B,EAAiC,eAAjC,EAAkD,KAAlD,CAAnB;AACA,MAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,CAAC,CAAC,KAAF,CAAQ,MAAlB,EAA0B,IAA1B,CAA+B,CAA/B,CAAd;AACA,MAAM,IAAI,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAb;AACA,SAAO,UAAU,CAAC,GAAX,CAAe,UAAA,CAAC,EAAG;AACxB,QAAM,UAAU,sBAAO,IAAP,CAAhB;;AACA,IAAA,UAAU,CAAC,KAAD,CAAV,GAAoB,CAApB;AACA,QAAM,MAAM,GACR,KAAK,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAD;AAAD,OAAT;AAAc,MAAA,KAAK,EAAE;AAAC,QAAA,KAAK,EAAL,KAAD;AAAQ,QAAA,IAAI,EAAE;AAAd,OAArB;AAAgD,MAAA,OAAO,EAAP;AAAhD,KAAD,CADT;AAEA,IAAA,KAAK,CAAC,KAAD,CAAL,IAAgB,CAAhB;AACA,WAAO,MAAP;AACD,GAPM,CAAP;AAQD;AAED,OAAO,IAAM,YAAY,GAAiB;AACxC,EAAA,UAAU,EAAE,MAD4B;AAExC,EAAA,WAAW,EAAE,MAF2B;AAGxC,EAAA,UAAU,EAAE;AAH4B,CAAnC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, util} from '@tensorflow/tfjs-core';\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, attrs: SplitVAttrs, backend: BackendWasm}) {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const xSliceSize = [...size];\n    xSliceSize[$axis] = s;\n    const xSlice =\n        slice({inputs: {x}, attrs: {begin, size: xSliceSize}, backend});\n    begin[$axis] += s;\n    return xSlice;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'wasm',\n  kernelFunc: splitV as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}