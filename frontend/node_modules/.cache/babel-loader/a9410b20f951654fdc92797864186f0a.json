{"ast":null,"code":"var _jsxFileName = \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/components/Camera.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@tensorflow/tfjs-backend-wasm\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\nimport Webcam from \"react-webcam\";\nimport { drawResults } from \"../utils/drawUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videoDim = {\n  width: 1280,\n  height: 720\n};\nlet rafId;\nlet camera, detector;\nlet ctx;\nexport default function Camera() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function setupCamera() {\n    camera = webcamRef.current; // eslint-disable-next-line\n\n    ctx = canvasRef.current.getContext(\"2d\");\n  }\n\n  async function setupDetector() {\n    const model = poseDetection.SupportedModels.MoveNet;\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n      minPoseScore: 0.2,\n      enableTracking: true\n    };\n    detector = await poseDetection.createDetector(model, detectorConfig);\n  }\n\n  async function detect(detector) {\n    if (typeof camera === \"undefined\" || camera === null) return;\n    if (camera.video.readyState !== 4) return;\n    if (!detector) return;\n    const video = camera.video;\n    const videoWidth = video.videoWidth;\n    const videoHeight = video.videoHeight;\n    camera.video.width = videoWidth;\n    camera.video.height = videoHeight;\n    const poses = await detector.estimatePoses(video);\n    console.log(\"found poses:\");\n    console.log(poses);\n    drawCanvas(poses, videoWidth, videoHeight, canvasRef);\n  }\n\n  function drawCanvas(poses, videoWidth, videoHeight, canvas) {\n    const ctx = canvas.current.getContext(\"2d\");\n    canvas.current.videoWidth = videoWidth;\n    canvas.current.videoHeight = videoHeight;\n    ctx.drawImage(camera.video, 0, 0, videoDim.width, videoDim.height);\n    drawResults(poses, ctx, 0);\n  }\n\n  async function renderResult() {\n    if (!detector) return;\n    await detect(detector);\n  }\n\n  async function renderPrediction() {\n    await renderResult();\n    rafId = requestAnimationFrame(renderPrediction);\n\n    if (rafId) {}\n  }\n\n  async function run() {\n    setupCamera();\n    await setupDetector();\n    renderPrediction();\n  }\n\n  useEffect(() => {\n    console.log(\"LOADING ...\");\n    run();\n    console.log(\"DONE LOADING.\");\n  }); // return (\n  //   <div style={{ position: \"relative\" }}>\n  //     <Webcam\n  //       ref={webcamRef}\n  //       mirrored\n  //       width={videoDim.width}\n  //       height={videoDim.height}\n  //       style={{\n  //         position: \"absolute\",\n  //         width: videoDim.width,\n  //         height: videoDim.height,\n  //         left: 0,\n  //         top: 0,\n  //       }}\n  //     />\n  //     <canvas\n  //       ref={canvasRef}\n  //       width={videoDim.width}\n  //       height={videoDim.height}\n  //       style={{\n  //         position: \"absolute\",\n  //         width: videoDim.width,\n  //         height: videoDim.height,\n  //         left: 0,\n  //         top: 0,\n  //       }}\n  //     />\n  //   </div>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relativeÀù\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"output\",\n      ref: canvasRef,\n      width: videoDim.width,\n      height: videoDim.height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n      id: \"video\",\n      ref: webcamRef,\n      playsInline: true,\n      style: {\n        WebkitTransform: \"scaleX(-1)\",\n        transform: \"scaleX(-1)\",\n        visibility: \"hidden\",\n        width: \"auto\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Camera, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/components/Camera.jsx"],"names":["React","useRef","useEffect","poseDetection","Webcam","drawResults","videoDim","width","height","rafId","camera","detector","ctx","Camera","webcamRef","canvasRef","setupCamera","current","getContext","setupDetector","model","SupportedModels","MoveNet","detectorConfig","modelType","movenet","MULTIPOSE_LIGHTNING","minPoseScore","enableTracking","createDetector","detect","video","readyState","videoWidth","videoHeight","poses","estimatePoses","console","log","drawCanvas","canvas","drawImage","renderResult","renderPrediction","requestAnimationFrame","run","position","WebkitTransform","transform","visibility"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@tensorflow/tfjs-backend-wasm\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\nimport Webcam from \"react-webcam\";\nimport { drawResults } from \"../utils/drawUtils\";\n\nconst videoDim = {\n  width: 1280,\n  height: 720,\n};\n\nlet rafId;\nlet camera, detector;\nlet ctx;\n\nexport default function Camera() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function setupCamera() {\n    camera = webcamRef.current;\n\n    // eslint-disable-next-line\n    ctx = canvasRef.current.getContext(\"2d\");\n  }\n\n  async function setupDetector() {\n    const model = poseDetection.SupportedModels.MoveNet;\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n      minPoseScore: 0.2,\n      enableTracking: true,\n    };\n    detector = await poseDetection.createDetector(model, detectorConfig);\n  }\n\n  async function detect(detector) {\n    if (typeof camera === \"undefined\" || camera === null) return;\n    if (camera.video.readyState !== 4) return;\n    if (!detector) return;\n\n    const video = camera.video;\n    const videoWidth = video.videoWidth;\n    const videoHeight = video.videoHeight;\n\n    camera.video.width = videoWidth;\n    camera.video.height = videoHeight;\n\n    const poses = await detector.estimatePoses(video);\n    console.log(\"found poses:\");\n    console.log(poses);\n    drawCanvas(poses, videoWidth, videoHeight, canvasRef);\n  }\n\n  function drawCanvas(poses, videoWidth, videoHeight, canvas) {\n    const ctx = canvas.current.getContext(\"2d\");\n    canvas.current.videoWidth = videoWidth;\n    canvas.current.videoHeight = videoHeight;\n\n    ctx.drawImage(camera.video, 0, 0, videoDim.width, videoDim.height);\n    drawResults(poses, ctx, 0);\n  }\n\n  async function renderResult() {\n    if (!detector) return;\n    await detect(detector);\n  }\n\n  async function renderPrediction() {\n    await renderResult();\n    rafId = requestAnimationFrame(renderPrediction);\n    if (rafId) {\n    }\n  }\n\n  async function run() {\n    setupCamera();\n    await setupDetector();\n    renderPrediction();\n  }\n\n  useEffect(() => {\n    console.log(\"LOADING ...\");\n    run();\n    console.log(\"DONE LOADING.\");\n  });\n\n  // return (\n  //   <div style={{ position: \"relative\" }}>\n  //     <Webcam\n  //       ref={webcamRef}\n  //       mirrored\n  //       width={videoDim.width}\n  //       height={videoDim.height}\n  //       style={{\n  //         position: \"absolute\",\n  //         width: videoDim.width,\n  //         height: videoDim.height,\n  //         left: 0,\n  //         top: 0,\n  //       }}\n  //     />\n  //     <canvas\n  //       ref={canvasRef}\n  //       width={videoDim.width}\n  //       height={videoDim.height}\n  //       style={{\n  //         position: \"absolute\",\n  //         width: videoDim.width,\n  //         height: videoDim.height,\n  //         left: 0,\n  //         top: 0,\n  //       }}\n  //     />\n  //   </div>\n  // );\n  return (\n    <div style={{ position: \"relativeÀù\" }}>\n      <canvas\n        id=\"output\"\n        ref={canvasRef}\n        width={videoDim.width}\n        height={videoDim.height}\n      />\n      <Webcam\n        id=\"video\"\n        ref={webcamRef}\n        playsInline\n        style={{\n          WebkitTransform: \"scaleX(-1)\",\n          transform: \"scaleX(-1)\",\n          visibility: \"hidden\",\n          width: \"auto\",\n          height: \"auto\",\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}