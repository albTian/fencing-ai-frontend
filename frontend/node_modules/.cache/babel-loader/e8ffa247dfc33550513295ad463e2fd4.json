{"ast":null,"code":"import _slicedToArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_wasm';\nimport { DataStorage, deprecationWarn, engine, env, KernelBackend, util } from '@tensorflow/tfjs-core';\nimport wasmFactoryThreadedSimd from '../wasm-out/tfjs-backend-wasm-threaded-simd.js'; // @ts-ignore\n\nimport { wasmWorkerContents } from '../wasm-out/tfjs-backend-wasm-threaded-simd.worker.js';\nimport wasmFactory from '../wasm-out/tfjs-backend-wasm.js';\nexport var BackendWasm = /*#__PURE__*/function (_KernelBackend) {\n  _inherits(BackendWasm, _KernelBackend);\n\n  var _super = _createSuper(BackendWasm);\n\n  function BackendWasm(wasm) {\n    var _this;\n\n    _classCallCheck(this, BackendWasm);\n\n    _this = _super.call(this);\n    _this.wasm = wasm; // 0 is reserved for null data ids.\n\n    _this.dataIdNextNumber = 1;\n\n    _this.wasm.tfjs.init();\n\n    _this.dataIdMap = new DataStorage(_assertThisInitialized(_this), engine());\n    return _this;\n  }\n\n  _createClass(BackendWasm, [{\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      var dataId = {\n        id: this.dataIdNextNumber++\n      };\n      this.move(dataId, values, shape, dtype, 1);\n      return dataId;\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.dataIdMap.numDataIds();\n    }\n  }, {\n    key: \"time\",\n    value: function () {\n      var _time = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(f) {\n        var start, kernelMs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                start = util.now();\n                f();\n                kernelMs = util.now() - start;\n                return _context.abrupt(\"return\", {\n                  kernelMs: kernelMs\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function time(_x) {\n        return _time.apply(this, arguments);\n      }\n\n      return time;\n    }()\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype, refCount) {\n      var id = this.dataIdNextNumber++;\n\n      if (dtype === 'string') {\n        var stringBytes = values;\n        this.dataIdMap.set(dataId, {\n          id: id,\n          stringBytes: stringBytes,\n          shape: shape,\n          dtype: dtype,\n          memoryOffset: null,\n          refCount: refCount\n        });\n        return;\n      }\n\n      var size = util.sizeFromShape(shape);\n      var numBytes = size * util.bytesPerElement(dtype);\n\n      var memoryOffset = this.wasm._malloc(numBytes);\n\n      this.dataIdMap.set(dataId, {\n        id: id,\n        memoryOffset: memoryOffset,\n        shape: shape,\n        dtype: dtype,\n        refCount: refCount\n      });\n      this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n\n      if (values != null) {\n        this.wasm.HEAPU8.set(new Uint8Array(values.buffer, values.byteOffset, numBytes), memoryOffset);\n      }\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dataId) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.readSync(dataId));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function read(_x2) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      var _this$dataIdMap$get = this.dataIdMap.get(dataId),\n          memoryOffset = _this$dataIdMap$get.memoryOffset,\n          dtype = _this$dataIdMap$get.dtype,\n          shape = _this$dataIdMap$get.shape,\n          stringBytes = _this$dataIdMap$get.stringBytes;\n\n      if (dtype === 'string') {\n        return stringBytes;\n      }\n\n      var bytes = this.wasm.HEAPU8.slice(memoryOffset, memoryOffset + util.sizeFromShape(shape) * util.bytesPerElement(dtype));\n      return typedArrayFromBuffer(bytes.buffer, dtype);\n    }\n    /**\n     * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n     * is released, false otherwise.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.dataIdMap.has(dataId)) {\n        var data = this.dataIdMap.get(dataId);\n        data.refCount--;\n\n        if (!force && data.refCount > 0) {\n          return false;\n        }\n\n        this.wasm._free(data.memoryOffset);\n\n        this.wasm.tfjs.disposeData(data.id);\n        this.dataIdMap.delete(dataId);\n      }\n\n      return true;\n    }\n    /** Return refCount of a `TensorData`. */\n\n  }, {\n    key: \"refCount\",\n    value: function refCount(dataId) {\n      if (this.dataIdMap.has(dataId)) {\n        var tensorData = this.dataIdMap.get(dataId);\n        return tensorData.refCount;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"incRef\",\n    value: function incRef(dataId) {\n      var data = this.dataIdMap.get(dataId);\n\n      if (data != null) {\n        data.refCount++;\n      }\n    }\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      return 32;\n    } // Returns the memory offset of a tensor. Useful for debugging and unit\n    // testing.\n\n  }, {\n    key: \"getMemoryOffset\",\n    value: function getMemoryOffset(dataId) {\n      return this.dataIdMap.get(dataId).memoryOffset;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.wasm.tfjs.dispose();\n\n      if ('PThread' in this.wasm) {\n        this.wasm.PThread.terminateAllThreads();\n      }\n\n      this.wasm = null;\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return {\n        unreliable: false\n      };\n    }\n    /**\n     * Make a tensor info for the output of an op. If `memoryOffset` is not\n     * present, this method allocates memory on the WASM heap. If `memoryOffset`\n     * is present, the memory was allocated elsewhere (in c++) and we just record\n     * the pointer where that memory lives.\n     */\n\n  }, {\n    key: \"makeOutput\",\n    value: function makeOutput(shape, dtype, memoryOffset) {\n      var dataId;\n\n      if (memoryOffset == null) {\n        dataId = this.write(null\n        /* values */\n        , shape, dtype);\n      } else {\n        var id = this.dataIdNextNumber++;\n        dataId = {\n          id: id\n        };\n        this.dataIdMap.set(dataId, {\n          id: id,\n          memoryOffset: memoryOffset,\n          shape: shape,\n          dtype: dtype,\n          refCount: 1\n        });\n        var size = util.sizeFromShape(shape);\n        this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n      }\n\n      return {\n        dataId: dataId,\n        shape: shape,\n        dtype: dtype\n      };\n    }\n  }, {\n    key: \"typedArrayFromHeap\",\n    value: function typedArrayFromHeap(_ref) {\n      var shape = _ref.shape,\n          dtype = _ref.dtype,\n          dataId = _ref.dataId;\n      var buffer = this.wasm.HEAPU8.buffer;\n\n      var _this$dataIdMap$get2 = this.dataIdMap.get(dataId),\n          memoryOffset = _this$dataIdMap$get2.memoryOffset;\n\n      var size = util.sizeFromShape(shape);\n\n      switch (dtype) {\n        case 'float32':\n          return new Float32Array(buffer, memoryOffset, size);\n\n        case 'int32':\n          return new Int32Array(buffer, memoryOffset, size);\n\n        case 'bool':\n          return new Uint8Array(buffer, memoryOffset, size);\n\n        default:\n          throw new Error(\"Unknown dtype \".concat(dtype));\n      }\n    }\n  }]);\n\n  return BackendWasm;\n}(KernelBackend);\n\nfunction createInstantiateWasmFunc(path) {\n  // this will be replace by rollup plugin patchWechatWebAssembly in \n  // minprogram's output.\n  // tslint:disable-next-line:no-any\n  return function (imports, callback) {\n    util.fetch(path, {\n      credentials: 'same-origin'\n    }).then(function (response) {\n      if (!response['ok']) {\n        imports.env.a(\"failed to load wasm binary file at '\".concat(path, \"'\"));\n      }\n\n      response.arrayBuffer().then(function (binary) {\n        WebAssembly.instantiate(binary, imports).then(function (output) {\n          callback(output.instance, output.module);\n        });\n      });\n    });\n    return {};\n  };\n}\n/**\n * Returns the path of the WASM binary.\n * @param simdSupported whether SIMD is supported\n * @param threadsSupported whether multithreading is supported\n * @param wasmModuleFolder the directory containing the WASM binaries.\n */\n\n\nfunction getPathToWasmBinary(simdSupported, threadsSupported, wasmModuleFolder) {\n  if (wasmPath != null) {\n    // If wasmPath is defined, the user has supplied a full path to\n    // the vanilla .wasm binary.\n    return wasmPath;\n  }\n\n  var path = 'tfjs-backend-wasm.wasm';\n\n  if (simdSupported && threadsSupported) {\n    path = 'tfjs-backend-wasm-threaded-simd.wasm';\n  } else if (simdSupported) {\n    path = 'tfjs-backend-wasm-simd.wasm';\n  }\n\n  if (wasmFileMap != null) {\n    if (wasmFileMap[path] != null) {\n      return wasmFileMap[path];\n    }\n  }\n\n  return wasmModuleFolder + path;\n}\n/**\n * Initializes the wasm module and creates the js <--> wasm bridge.\n *\n * NOTE: We wrap the wasm module in a object with property 'wasm' instead of\n * returning Promise<BackendWasmModule> to avoid freezing Chrome (last tested\n * in Chrome 76).\n */\n\n\nexport function init() {\n  return _init.apply(this, arguments);\n}\n\nfunction _init() {\n  _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _yield$Promise$all, _yield$Promise$all2, simdSupported, threadsSupported;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return Promise.all([env().getAsync('WASM_HAS_SIMD_SUPPORT'), env().getAsync('WASM_HAS_MULTITHREAD_SUPPORT')]);\n\n          case 2:\n            _yield$Promise$all = _context3.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            simdSupported = _yield$Promise$all2[0];\n            threadsSupported = _yield$Promise$all2[1];\n            return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var factoryConfig = {};\n              /**\n               * This function overrides the Emscripten module locateFile utility.\n               * @param path The relative path to the file that needs to be loaded.\n               * @param prefix The path to the main JavaScript file's directory.\n               */\n\n              factoryConfig.locateFile = function (path, prefix) {\n                if (path.endsWith('.worker.js')) {\n                  var response = wasmWorkerContents;\n                  var blob = new Blob([response], {\n                    type: 'application/javascript'\n                  });\n                  return URL.createObjectURL(blob);\n                }\n\n                if (path.endsWith('.wasm')) {\n                  return getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : prefix);\n                }\n\n                return prefix + path;\n              }; // Use the instantiateWasm override when system fetch is not available.\n              // Reference:\n              // https://github.com/emscripten-core/emscripten/blob/2bca083cbbd5a4133db61fbd74d04f7feecfa907/tests/manual_wasm_instantiate.html#L170\n\n\n              if (customFetch) {\n                factoryConfig.instantiateWasm = createInstantiateWasmFunc(getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : ''));\n              }\n\n              var initialized = false;\n\n              factoryConfig.onAbort = function () {\n                if (initialized) {\n                  // Emscripten already called console.warn so no need to double log.\n                  return;\n                }\n\n                if (initAborted) {\n                  // Emscripten calls `onAbort` twice, resulting in double error\n                  // messages.\n                  return;\n                }\n\n                initAborted = true;\n                var rejectMsg = 'Make sure the server can serve the `.wasm` file relative to the ' + 'bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers';\n                reject({\n                  message: rejectMsg\n                });\n              };\n\n              var wasm; // If `wasmPath` has been defined we must initialize the vanilla module.\n\n              if (threadsSupported && simdSupported && wasmPath == null) {\n                factoryConfig.mainScriptUrlOrBlob = new Blob([\"var WasmBackendModuleThreadedSimd = \" + wasmFactoryThreadedSimd.toString()], {\n                  type: 'text/javascript'\n                });\n                wasm = wasmFactoryThreadedSimd(factoryConfig);\n              } else {\n                // The wasmFactory works for both vanilla and SIMD binaries.\n                wasm = wasmFactory(factoryConfig);\n              } // The WASM module has been successfully created by the factory.\n              // Any error will be caught by the onAbort callback defined above.\n\n\n              wasm.then(function (module) {\n                initialized = true;\n                initAborted = false;\n                var voidReturnType = null; // Using the tfjs namespace to avoid conflict with emscripten's API.\n\n                module.tfjs = {\n                  init: module.cwrap('init', null, []),\n                  registerTensor: module.cwrap('register_tensor', null, ['number', 'number', 'number']),\n                  disposeData: module.cwrap('dispose_data', voidReturnType, ['number']),\n                  dispose: module.cwrap('dispose', voidReturnType, [])\n                };\n                resolve({\n                  wasm: module\n                });\n              });\n            }));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _init.apply(this, arguments);\n}\n\nfunction typedArrayFromBuffer(buffer, dtype) {\n  switch (dtype) {\n    case 'float32':\n      return new Float32Array(buffer);\n\n    case 'int32':\n      return new Int32Array(buffer);\n\n    case 'bool':\n      return new Uint8Array(buffer);\n\n    default:\n      throw new Error(\"Unknown dtype \".concat(dtype));\n  }\n}\n\nvar wasmBinaryNames = ['tfjs-backend-wasm.wasm', 'tfjs-backend-wasm-simd.wasm', 'tfjs-backend-wasm-threaded-simd.wasm'];\nvar wasmPath = null;\nvar wasmPathPrefix = null;\nvar wasmFileMap = {};\nvar initAborted = false;\nvar customFetch = false;\n/**\n * @deprecated Use `setWasmPaths` instead.\n * Sets the path to the `.wasm` file which will be fetched when the wasm\n * backend is initialized. See\n * https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers\n * for more details.\n * @param path wasm file path or url\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\n\nexport function setWasmPath(path) {\n  var usePlatformFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  deprecationWarn('setWasmPath has been deprecated in favor of setWasmPaths and' + ' will be removed in a future release.');\n\n  if (initAborted) {\n    throw new Error('The WASM backend was already initialized. Make sure you call ' + '`setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`');\n  }\n\n  wasmPath = path;\n  customFetch = usePlatformFetch;\n}\n/**\n * Configures the locations of the WASM binaries.\n *\n * ```js\n * setWasmPaths({\n *  'tfjs-backend-wasm.wasm': 'renamed.wasm',\n *  'tfjs-backend-wasm-simd.wasm': 'renamed-simd.wasm',\n *  'tfjs-backend-wasm-threaded-simd.wasm': 'renamed-threaded-simd.wasm'\n * });\n * tf.setBackend('wasm');\n * ```\n *\n * @param prefixOrFileMap This can be either a string or object:\n *  - (string) The path to the directory where the WASM binaries are located.\n *     Note that this prefix will be used to load each binary (vanilla,\n *     SIMD-enabled, threading-enabled, etc.).\n *  - (object) Mapping from names of WASM binaries to custom\n *     full paths specifying the locations of those binaries. This is useful if\n *     your WASM binaries are not all located in the same directory, or if your\n *     WASM binaries have been renamed.\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\n\nexport function setWasmPaths(prefixOrFileMap) {\n  var usePlatformFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (initAborted) {\n    throw new Error('The WASM backend was already initialized. Make sure you call ' + '`setWasmPaths()` before you call `tf.setBackend()` or ' + '`tf.ready()`');\n  }\n\n  if (typeof prefixOrFileMap === 'string') {\n    wasmPathPrefix = prefixOrFileMap;\n  } else {\n    wasmFileMap = prefixOrFileMap;\n    var missingPaths = wasmBinaryNames.filter(function (name) {\n      return wasmFileMap[name] == null;\n    });\n\n    if (missingPaths.length > 0) {\n      throw new Error(\"There were no entries found for the following binaries: \" + \"\".concat(missingPaths.join(','), \". Please either call setWasmPaths with a \") + \"map providing a path for each binary, or with a string indicating \" + \"the directory where all the binaries can be found.\");\n    }\n  }\n\n  customFetch = usePlatformFetch;\n}\n/** Used in unit tests. */\n\nexport function resetWasmPath() {\n  wasmPath = null;\n  wasmPathPrefix = null;\n  wasmFileMap = {};\n  customFetch = false;\n  initAborted = false;\n}","map":{"version":3,"sources":["../src/backend_wasm.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_wasm';\n\nimport {backend_util, BackendTimingInfo, DataStorage, DataType, deprecationWarn, engine, env, KernelBackend, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasmModule, WasmFactoryConfig} from '../wasm-out/tfjs-backend-wasm';\nimport {BackendWasmThreadedSimdModule} from '../wasm-out/tfjs-backend-wasm-threaded-simd';\nimport wasmFactoryThreadedSimd from '../wasm-out/tfjs-backend-wasm-threaded-simd.js';\n// @ts-ignore\nimport {wasmWorkerContents} from '../wasm-out/tfjs-backend-wasm-threaded-simd.worker.js';\nimport wasmFactory from '../wasm-out/tfjs-backend-wasm.js';\n\ninterface TensorData {\n  id: number;\n  memoryOffset: number;\n  shape: number[];\n  dtype: DataType;\n  refCount: number;\n  /** Only used for string tensors, storing encoded bytes. */\n  stringBytes?: Uint8Array[];\n}\n\nexport type DataId = object;  // object instead of {} to force non-primitive.\n\nexport class BackendWasm extends KernelBackend {\n  // 0 is reserved for null data ids.\n  private dataIdNextNumber = 1;\n  dataIdMap: DataStorage<TensorData>;\n\n  constructor(public wasm: BackendWasmModule | BackendWasmThreadedSimdModule) {\n    super();\n    this.wasm.tfjs.init();\n    this.dataIdMap = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    const dataId = {id: this.dataIdNextNumber++};\n    this.move(dataId, values, shape, dtype, 1);\n    return dataId;\n  }\n\n  numDataIds(): number {\n    return this.dataIdMap.numDataIds();\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    const id = this.dataIdNextNumber++;\n    if (dtype === 'string') {\n      const stringBytes = values as Uint8Array[];\n      this.dataIdMap.set(\n          dataId,\n          {id, stringBytes, shape, dtype, memoryOffset: null, refCount});\n      return;\n    }\n\n    const size = util.sizeFromShape(shape);\n    const numBytes = size * util.bytesPerElement(dtype);\n    const memoryOffset = this.wasm._malloc(numBytes);\n\n    this.dataIdMap.set(dataId, {id, memoryOffset, shape, dtype, refCount});\n\n    this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n\n    if (values != null) {\n      this.wasm.HEAPU8.set(\n          new Uint8Array(\n              (values as backend_util.TypedArray).buffer,\n              (values as backend_util.TypedArray).byteOffset, numBytes),\n          memoryOffset);\n    }\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {memoryOffset, dtype, shape, stringBytes} =\n        this.dataIdMap.get(dataId);\n    if (dtype === 'string') {\n      return stringBytes;\n    }\n    const bytes = this.wasm.HEAPU8.slice(\n        memoryOffset,\n        memoryOffset + util.sizeFromShape(shape) * util.bytesPerElement(dtype));\n    return typedArrayFromBuffer(bytes.buffer, dtype);\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released, false otherwise.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.dataIdMap.has(dataId)) {\n      const data = this.dataIdMap.get(dataId);\n      data.refCount--;\n      if (!force && data.refCount > 0) {\n        return false;\n      }\n\n      this.wasm._free(data.memoryOffset);\n      this.wasm.tfjs.disposeData(data.id);\n      this.dataIdMap.delete(dataId);\n    }\n    return true;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.dataIdMap.has(dataId)) {\n      const tensorData = this.dataIdMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  incRef(dataId: DataId) {\n    const data = this.dataIdMap.get(dataId);\n    if (data != null) {\n      data.refCount++;\n    }\n  }\n\n  floatPrecision(): 32 {\n    return 32;\n  }\n\n  // Returns the memory offset of a tensor. Useful for debugging and unit\n  // testing.\n  getMemoryOffset(dataId: DataId): number {\n    return this.dataIdMap.get(dataId).memoryOffset;\n  }\n\n  dispose() {\n    this.wasm.tfjs.dispose();\n    if ('PThread' in this.wasm) {\n      this.wasm.PThread.terminateAllThreads();\n    }\n    this.wasm = null;\n  }\n\n  memory() {\n    return {unreliable: false};\n  }\n\n  /**\n   * Make a tensor info for the output of an op. If `memoryOffset` is not\n   * present, this method allocates memory on the WASM heap. If `memoryOffset`\n   * is present, the memory was allocated elsewhere (in c++) and we just record\n   * the pointer where that memory lives.\n   */\n  makeOutput(shape: number[], dtype: DataType, memoryOffset?: number):\n      TensorInfo {\n    let dataId: {};\n    if (memoryOffset == null) {\n      dataId = this.write(null /* values */, shape, dtype);\n    } else {\n      const id = this.dataIdNextNumber++;\n      dataId = {id};\n      this.dataIdMap.set(dataId, {id, memoryOffset, shape, dtype, refCount: 1});\n      const size = util.sizeFromShape(shape);\n      this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n    }\n    return {dataId, shape, dtype};\n  }\n\n  typedArrayFromHeap({shape, dtype, dataId}: TensorInfo):\n      backend_util.TypedArray {\n    const buffer = this.wasm.HEAPU8.buffer;\n    const {memoryOffset} = this.dataIdMap.get(dataId);\n    const size = util.sizeFromShape(shape);\n    switch (dtype) {\n      case 'float32':\n        return new Float32Array(buffer, memoryOffset, size);\n      case 'int32':\n        return new Int32Array(buffer, memoryOffset, size);\n      case 'bool':\n        return new Uint8Array(buffer, memoryOffset, size);\n      default:\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n  }\n}\n\nfunction createInstantiateWasmFunc(path: string) {\n  // this will be replace by rollup plugin patchWechatWebAssembly in \n  // minprogram's output.\n  // tslint:disable-next-line:no-any\n  return (imports: any, callback: any) => {\n    util.fetch(path, {credentials: 'same-origin'}).then((response) => {\n      if (!response['ok']) {\n        imports.env.a(`failed to load wasm binary file at '${path}'`);\n      }\n      response.arrayBuffer().then(binary => {\n        WebAssembly.instantiate(binary, imports).then(output => {\n          callback(output.instance, output.module);\n        });\n      });\n    });\n    return {};\n  };\n}\n\n/**\n * Returns the path of the WASM binary.\n * @param simdSupported whether SIMD is supported\n * @param threadsSupported whether multithreading is supported\n * @param wasmModuleFolder the directory containing the WASM binaries.\n */\nfunction getPathToWasmBinary(\n    simdSupported: boolean, threadsSupported: boolean,\n    wasmModuleFolder: string) {\n  if (wasmPath != null) {\n    // If wasmPath is defined, the user has supplied a full path to\n    // the vanilla .wasm binary.\n    return wasmPath;\n  }\n\n  let path: WasmBinaryName = 'tfjs-backend-wasm.wasm';\n  if (simdSupported && threadsSupported) {\n    path = 'tfjs-backend-wasm-threaded-simd.wasm';\n  } else if (simdSupported) {\n    path = 'tfjs-backend-wasm-simd.wasm';\n  }\n\n  if (wasmFileMap != null) {\n    if (wasmFileMap[path] != null) {\n      return wasmFileMap[path];\n    }\n  }\n\n  return wasmModuleFolder + path;\n}\n\n/**\n * Initializes the wasm module and creates the js <--> wasm bridge.\n *\n * NOTE: We wrap the wasm module in a object with property 'wasm' instead of\n * returning Promise<BackendWasmModule> to avoid freezing Chrome (last tested\n * in Chrome 76).\n */\nexport async function init(): Promise<{wasm: BackendWasmModule}> {\n  const [simdSupported, threadsSupported] = await Promise.all([\n    env().getAsync('WASM_HAS_SIMD_SUPPORT'),\n    env().getAsync('WASM_HAS_MULTITHREAD_SUPPORT')\n  ]);\n\n  return new Promise((resolve, reject) => {\n    const factoryConfig: WasmFactoryConfig = {};\n\n    /**\n     * This function overrides the Emscripten module locateFile utility.\n     * @param path The relative path to the file that needs to be loaded.\n     * @param prefix The path to the main JavaScript file's directory.\n     */\n    factoryConfig.locateFile = (path, prefix) => {\n      if (path.endsWith('.worker.js')) {\n        const response = wasmWorkerContents;\n        const blob = new Blob([response], {type: 'application/javascript'});\n        return URL.createObjectURL(blob);\n      }\n\n      if (path.endsWith('.wasm')) {\n        return getPathToWasmBinary(\n            simdSupported as boolean, threadsSupported as boolean,\n            wasmPathPrefix != null ? wasmPathPrefix : prefix);\n      }\n      return prefix + path;\n    };\n\n    // Use the instantiateWasm override when system fetch is not available.\n    // Reference:\n    // https://github.com/emscripten-core/emscripten/blob/2bca083cbbd5a4133db61fbd74d04f7feecfa907/tests/manual_wasm_instantiate.html#L170\n    if (customFetch) {\n      factoryConfig.instantiateWasm =\n          createInstantiateWasmFunc(getPathToWasmBinary(\n              simdSupported as boolean, threadsSupported as boolean,\n              wasmPathPrefix != null ? wasmPathPrefix : ''));\n    }\n\n    let initialized = false;\n    factoryConfig.onAbort = () => {\n      if (initialized) {\n        // Emscripten already called console.warn so no need to double log.\n        return;\n      }\n      if (initAborted) {\n        // Emscripten calls `onAbort` twice, resulting in double error\n        // messages.\n        return;\n      }\n      initAborted = true;\n      const rejectMsg =\n          'Make sure the server can serve the `.wasm` file relative to the ' +\n          'bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers';\n      reject({message: rejectMsg});\n    };\n\n    let wasm: Promise<BackendWasmModule>;\n    // If `wasmPath` has been defined we must initialize the vanilla module.\n    if (threadsSupported && simdSupported && wasmPath == null) {\n      factoryConfig.mainScriptUrlOrBlob = new Blob(\n          [`var WasmBackendModuleThreadedSimd = ` +\n           wasmFactoryThreadedSimd.toString()],\n          {type: 'text/javascript'});\n      wasm = wasmFactoryThreadedSimd(factoryConfig);\n    } else {\n      // The wasmFactory works for both vanilla and SIMD binaries.\n      wasm = wasmFactory(factoryConfig);\n    }\n\n    // The WASM module has been successfully created by the factory.\n    // Any error will be caught by the onAbort callback defined above.\n    wasm.then((module) => {\n      initialized = true;\n      initAborted = false;\n\n      const voidReturnType: string = null;\n      // Using the tfjs namespace to avoid conflict with emscripten's API.\n      module.tfjs = {\n        init: module.cwrap('init', null, []),\n        registerTensor: module.cwrap(\n            'register_tensor', null,\n            [\n              'number',  // id\n              'number',  // size\n              'number',  // memoryOffset\n            ]),\n        disposeData: module.cwrap('dispose_data', voidReturnType, ['number']),\n        dispose: module.cwrap('dispose', voidReturnType, []),\n      };\n\n      resolve({wasm: module});\n    });\n  });\n}\n\nfunction typedArrayFromBuffer(\n    buffer: ArrayBuffer, dtype: DataType): backend_util.TypedArray {\n  switch (dtype) {\n    case 'float32':\n      return new Float32Array(buffer);\n    case 'int32':\n      return new Int32Array(buffer);\n    case 'bool':\n      return new Uint8Array(buffer);\n    default:\n      throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nconst wasmBinaryNames = [\n  'tfjs-backend-wasm.wasm', 'tfjs-backend-wasm-simd.wasm',\n  'tfjs-backend-wasm-threaded-simd.wasm'\n] as const ;\ntype WasmBinaryName = typeof wasmBinaryNames[number];\n\nlet wasmPath: string = null;\nlet wasmPathPrefix: string = null;\nlet wasmFileMap: {[key in WasmBinaryName]?: string} = {};\nlet initAborted = false;\nlet customFetch = false;\n\n/**\n * @deprecated Use `setWasmPaths` instead.\n * Sets the path to the `.wasm` file which will be fetched when the wasm\n * backend is initialized. See\n * https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers\n * for more details.\n * @param path wasm file path or url\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPath(path: string, usePlatformFetch = false): void {\n  deprecationWarn(\n      'setWasmPath has been deprecated in favor of setWasmPaths and' +\n      ' will be removed in a future release.');\n  if (initAborted) {\n    throw new Error(\n        'The WASM backend was already initialized. Make sure you call ' +\n        '`setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`');\n  }\n  wasmPath = path;\n  customFetch = usePlatformFetch;\n}\n\n/**\n * Configures the locations of the WASM binaries.\n *\n * ```js\n * setWasmPaths({\n *  'tfjs-backend-wasm.wasm': 'renamed.wasm',\n *  'tfjs-backend-wasm-simd.wasm': 'renamed-simd.wasm',\n *  'tfjs-backend-wasm-threaded-simd.wasm': 'renamed-threaded-simd.wasm'\n * });\n * tf.setBackend('wasm');\n * ```\n *\n * @param prefixOrFileMap This can be either a string or object:\n *  - (string) The path to the directory where the WASM binaries are located.\n *     Note that this prefix will be used to load each binary (vanilla,\n *     SIMD-enabled, threading-enabled, etc.).\n *  - (object) Mapping from names of WASM binaries to custom\n *     full paths specifying the locations of those binaries. This is useful if\n *     your WASM binaries are not all located in the same directory, or if your\n *     WASM binaries have been renamed.\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPaths(\n    prefixOrFileMap: string|{[key in WasmBinaryName]?: string},\n    usePlatformFetch = false): void {\n  if (initAborted) {\n    throw new Error(\n        'The WASM backend was already initialized. Make sure you call ' +\n        '`setWasmPaths()` before you call `tf.setBackend()` or ' +\n        '`tf.ready()`');\n  }\n\n  if (typeof prefixOrFileMap === 'string') {\n    wasmPathPrefix = prefixOrFileMap;\n  } else {\n    wasmFileMap = prefixOrFileMap;\n    const missingPaths =\n        wasmBinaryNames.filter(name => wasmFileMap[name] == null);\n    if (missingPaths.length > 0) {\n      throw new Error(\n          `There were no entries found for the following binaries: ` +\n          `${missingPaths.join(',')}. Please either call setWasmPaths with a ` +\n          `map providing a path for each binary, or with a string indicating ` +\n          `the directory where all the binaries can be found.`);\n    }\n  }\n\n  customFetch = usePlatformFetch;\n}\n\n/** Used in unit tests. */\nexport function resetWasmPath(): void {\n  wasmPath = null;\n  wasmPathPrefix = null;\n  wasmFileMap = {};\n  customFetch = false;\n  initAborted = false;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}