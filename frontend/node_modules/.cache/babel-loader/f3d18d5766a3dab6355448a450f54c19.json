{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { padV2Config } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\n\nfunction spaceToBatchND(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    paddings\n  } = attrs;\n  const prod = util.sizeFromShape(blockShape);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  const reshapeInputs = {\n    x: paddedX\n  };\n  const reshapeAttrs = {\n    shape: reshapedPaddedShape\n  };\n  const paddedXReshaped = reshape({\n    inputs: reshapeInputs,\n    backend,\n    attrs: reshapeAttrs\n  });\n  const transposeInputs = {\n    x: paddedXReshaped\n  };\n  const transposeAttrs = {\n    perm: permutedReshapedPaddedPermutation\n  };\n  const paddedXT = transpose({\n    inputs: transposeInputs,\n    backend,\n    attrs: transposeAttrs\n  });\n  const resultReshapeInputs = {\n    x: paddedXT\n  };\n  const resultReshapeAttrs = {\n    shape: flattenShape\n  };\n  const result = reshape({\n    inputs: resultReshapeInputs,\n    backend,\n    attrs: resultReshapeAttrs\n  });\n  backend.disposeData(paddedX.dataId);\n  backend.disposeData(paddedXReshaped.dataId);\n  backend.disposeData(paddedXT.dataId);\n  return result;\n}\n\nexport const spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'wasm',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"sources":["../../src/kernels/SpaceToBatchND.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nfunction spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: BackendWasm,\n  attrs: SpaceToBatchNDAttrs\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeData(paddedX.dataId);\n  backend.disposeData(paddedXReshaped.dataId);\n  backend.disposeData(paddedXT.dataId);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'wasm',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}