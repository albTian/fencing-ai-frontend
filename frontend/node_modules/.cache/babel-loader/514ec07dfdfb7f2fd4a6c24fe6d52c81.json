{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nvar wasmDepthToSpace;\n\nfunction setup(backend) {\n  wasmDepthToSpace = backend.wasm.cwrap(DepthToSpace, null\n  /*void*/\n  , ['number', 'number', 'number', 'array', 'number', 'array', 'array', 'number', 'number']);\n}\n\nexport function depthToSpace(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockSize = attrs.blockSize,\n      dataFormat = attrs.dataFormat;\n  util.assert(blockSize > 1, function () {\n    return \"blockSize should be > 1 for depthToSpace, but was: \".concat(blockSize);\n  });\n  var batchSize = x.shape[0];\n  var inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n  var inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n  var inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n  var outputHeight = inputHeight * blockSize;\n  var outputWidth = inputWidth * blockSize;\n  var outputDepth = inputDepth / (blockSize * blockSize);\n  var outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  var out = backend.makeOutput(outputShape, 'float32');\n  var xData = backend.dataIdMap.get(x.dataId);\n  var xId = xData.id;\n  var xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(x.shape)).buffer);\n  var outputShapeBytes = new Uint8Array(new Int32Array(outputShape).buffer);\n  var outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(outputShape)).buffer);\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  var channelsLast = dataFormat === 'NHWC' ? 1 : 0;\n  wasmDepthToSpace(xId, blockSize, channelsLast, xStridesBytes, x.shape.length - 1, outputShapeBytes, outStridesBytes, outputShape.length, outId);\n  return out;\n}\nexport var depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthToSpace\n};","map":{"version":3,"sources":["../../src/kernels/DepthToSpace.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmDepthToSpace: (\n    xId: number, blockSize: number, channelsLast: number, xStrides: Uint8Array,\n    xStridesLength: number, outputShape: Uint8Array, outputStrides: Uint8Array,\n    outSize: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmDepthToSpace = backend.wasm.cwrap(DepthToSpace, null /*void*/, [\n    'number',  // xId\n    'number',  // blockSize\n    'number',  // channelsLast\n    'array',   // xStrides\n    'number',  // xStridesLength\n    'array',   // outputShape\n    'array',   // outputStrides\n    'number',  // outSize\n    'number',  // outId\n  ]);\n}\n\nexport function depthToSpace(args: {\n  backend: BackendWasm,\n  inputs: DepthToSpaceInputs,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const out = backend.makeOutput(outputShape, 'float32');\n\n  const xData = backend.dataIdMap.get(x.dataId);\n  const xId = xData.id;\n  const xStridesBytes =\n      new Uint8Array(new Int32Array(util.computeStrides(x.shape)).buffer);\n\n  const outputShapeBytes = new Uint8Array(new Int32Array(outputShape).buffer);\n  const outStridesBytes =\n      new Uint8Array(new Int32Array(util.computeStrides(outputShape)).buffer);\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const channelsLast = dataFormat === 'NHWC' ? 1 : 0;\n  wasmDepthToSpace(\n      xId, blockSize, channelsLast, xStridesBytes, x.shape.length - 1,\n      outputShapeBytes, outStridesBytes, outputShape.length, outId);\n\n  return out;\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}