{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nlet wasmRotate;\n\nfunction setup(backend) {\n  wasmRotate = backend.wasm.cwrap(RotateWithOffset, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'array', 'number', 'number']);\n}\n\nexport function rotateWithOffset(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image\n  } = inputs;\n  const {\n    radians,\n    fillValue,\n    center\n  } = attrs;\n  const out = backend.makeOutput(image.shape, image.dtype);\n  const imageId = backend.dataIdMap.get(image.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n  const fillIsBlack = fillValue === 0;\n  const fullOpacityValue = 255;\n  const fillValues = typeof fillValue === 'number' ? [fillValue, fillValue, fillValue, fillIsBlack ? 0 : fullOpacityValue] : [...fillValue, fullOpacityValue];\n  const fillBytes = new Uint8Array(new Int32Array(fillValues).buffer);\n  wasmRotate(imageId, batch, imageHeight, imageWidth, numChannels, radians, centerX, centerY, fillBytes, fillValues.length, outId);\n  return out;\n}\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'wasm',\n  kernelFunc: rotateWithOffset,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/RotateWithOffset.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,gBAAlC,QAAoH,uBAApH;AACA,SAAQ,YAAR,QAA2B,uBAA3B;AAIA,IAAI,UAAJ;;AAKA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,gBAAnB,EAAqC;AAAK;AAA1C,IAAsD,CACjE,QADiE,EAEjE,QAFiE,EAGjE,QAHiE,EAIjE,QAJiE,EAKjE,QALiE,EAMjE,QANiE,EAOjE,QAPiE,EAQjE,QARiE,EASjE,OATiE,EAUjE,QAViE,EAWjE,QAXiE,CAAtD,CAAb;AAaD;;AAED,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA;AAAD,MAAU,MAAhB;AACA,QAAM;AAAC,IAAA,OAAD;AAAU,IAAA,SAAV;AAAqB,IAAA;AAArB,MAA+B,KAArC;AAEA,QAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,KAAK,CAAC,KAAzB,EAAgC,KAAK,CAAC,KAAtC,CAAZ;AACA,QAAM,OAAO,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,KAAK,CAAC,MAA5B,EAAoC,EAApD;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AAEA,QAAM,CAAC,KAAD,EAAQ,WAAR,EAAqB,UAArB,EAAiC,WAAjC,IAAgD,KAAK,CAAC,KAA5D;AAEA,QAAM,CAAC,OAAD,EAAU,OAAV,IACF,YAAY,CAAC,cAAb,CAA4B,MAA5B,EAAoC,WAApC,EAAiD,UAAjD,CADJ;AAGA,QAAM,WAAW,GAAG,SAAS,KAAK,CAAlC;AACA,QAAM,gBAAgB,GAAG,GAAzB;AAEA,QAAM,UAAU,GAAG,OAAO,SAAP,KAAqB,QAArB,GACf,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAW,GAAG,CAAH,GAAO,gBAApD,CADe,GAEf,CAAC,GAAG,SAAJ,EAAe,gBAAf,CAFJ;AAGA,QAAM,SAAS,GAAG,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,UAAf,EAA2B,MAA1C,CAAlB;AAEA,EAAA,UAAU,CACN,OADM,EACG,KADH,EACU,WADV,EACuB,UADvB,EACmC,WADnC,EACgD,OADhD,EACyD,OADzD,EAEN,OAFM,EAEG,SAFH,EAEc,UAAU,CAAC,MAFzB,EAEiC,KAFjC,CAAV;AAGA,SAAO,GAAP;AACD;AAED,OAAO,MAAM,sBAAsB,GAAiB;AAClD,EAAA,UAAU,EAAE,gBADsC;AAElD,EAAA,WAAW,EAAE,MAFqC;AAGlD,EAAA,UAAU,EAAE,gBAHsC;AAIlD,EAAA,SAAS,EAAE;AAJuC,CAA7C","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmRotate: (\n    xId: number, batch: number, imageHeight: number, imageWidth: number,\n    numChannels: number, radians: number, centerX: number, centerY: number,\n    fillBytes: Uint8Array, fillLength: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmRotate = backend.wasm.cwrap(RotateWithOffset, null /* void */, [\n    'number',  // xId\n    'number',  // batch\n    'number',  // imageHeight\n    'number',  // imageWidth\n    'number',  // numChannels\n    'number',  // radians\n    'number',  // centerX\n    'number',  // centerY\n    'array',   // fillBytes\n    'number',  // fillLength\n    'number',  // outId\n  ]);\n}\n\nexport function rotateWithOffset(args: {\n  inputs: RotateWithOffsetInputs,\n  backend: BackendWasm,\n  attrs: RotateWithOffsetAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {radians, fillValue, center} = attrs;\n\n  const out = backend.makeOutput(image.shape, image.dtype);\n  const imageId = backend.dataIdMap.get(image.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n  const [centerX, centerY] =\n      backend_util.getImageCenter(center, imageHeight, imageWidth);\n\n  const fillIsBlack = fillValue === 0;\n  const fullOpacityValue = 255;\n\n  const fillValues = typeof fillValue === 'number' ?\n      [fillValue, fillValue, fillValue, fillIsBlack ? 0 : fullOpacityValue] :\n      [...fillValue, fullOpacityValue];\n  const fillBytes = new Uint8Array(new Int32Array(fillValues).buffer);\n\n  wasmRotate(\n      imageId, batch, imageHeight, imageWidth, numChannels, radians, centerX,\n      centerY, fillBytes, fillValues.length, outId);\n  return out;\n}\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'wasm',\n  kernelFunc: rotateWithOffset as {} as KernelFunc,\n  setupFunc: setup\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}