{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n  var denseSize = util.sizeFromShape(inputShape);\n  var nnz = inputIndicesShape[0];\n  var outputRank = targetShape.length; // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n\n  var outputShape = [];\n  var product = 1;\n  var unknownIndex = -1;\n\n  for (var d = 0; d < outputRank; ++d) {\n    var size = targetShape[d];\n\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\"only one output dimension may be -1, not both \".concat(unknownIndex, \" and \").concat(d));\n      }\n\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\"size \".concat(d, \" must be non-negative, not \").concat(size));\n      }\n\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error('reshape cannot infer the missing ' + 'input size for an empty tensor unless all ' + 'specified input sizes are non-zero');\n    }\n\n    var missing = Math.trunc(denseSize / product);\n\n    if (product * missing !== denseSize) {\n      throw new Error(\"Input to reshape is a SparseTensor with \".concat(denseSize, \"\\n          dense values, but the requested shape requires a multiple of \").concat(product, \". inputShape=\").concat(inputShape, \" outputShape= \").concat(outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n\n  var outputSize = util.sizeFromShape(outputShape);\n\n  if (outputSize !== denseSize) {\n    throw new Error(\"Input to reshape is a tensor with \".concat(denseSize, \" dense values, but the requested shape has \").concat(outputSize, \". inputShape=\").concat(inputShape, \" outputShape=\").concat(outputShape));\n  }\n\n  var inputRank = inputShape.length;\n  var inputStrides = [];\n\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n\n    for (var _d = inputRank - 2; _d >= 0; --_d) {\n      inputStrides[_d] = inputStrides[_d + 1] * inputShape[_d + 1];\n    }\n  }\n\n  var outputStrides = [];\n\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n\n    for (var _d2 = outputRank - 2; _d2 >= 0; --_d2) {\n      outputStrides[_d2] = outputStrides[_d2 + 1] * outputShape[_d2 + 1];\n    }\n  }\n\n  var newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n\n  for (var i = 0; i < nnz; ++i) {\n    var id = 0;\n\n    for (var j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n\n    for (var _j = 0; _j < outputRank; ++_j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + _j] = Math.trunc(id / outputStrides[_j]);\n      id %= outputStrides[_j];\n    }\n  }\n\n  return [newIndices, [nnz, outputRank], outputShape];\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8B,IAA9B,QAAyC,uBAAzC;AAEA,OAAM,SAAU,iBAAV,CACF,YADE,EACwB,iBADxB,EACqD,UADrD,EAEF,UAFE,EAGF,WAHE,EAGmB;AACvB,MAAM,SAAS,GAAG,IAAI,CAAC,aAAL,CAAmB,UAAnB,CAAlB;AACA,MAAM,GAAG,GAAG,iBAAiB,CAAC,CAAD,CAA7B;AACA,MAAM,UAAU,GAAG,WAAW,CAAC,MAA/B,CAHuB,CAKvB;AACA;;AACA,MAAM,WAAW,GAAa,EAA9B;AACA,MAAI,OAAO,GAAG,CAAd;AACA,MAAI,YAAY,GAAG,CAAC,CAApB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAApB,EAAgC,EAAE,CAAlC,EAAqC;AACnC,QAAM,IAAI,GAAG,WAAW,CAAC,CAAD,CAAxB;;AACA,QAAI,IAAI,KAAK,CAAC,CAAd,EAAiB;AACf,UAAI,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB,cAAM,IAAI,KAAJ,yDACF,YADE,kBACkB,CADlB,EAAN;AAED;;AACD,MAAA,YAAY,GAAG,CAAf;AACA,MAAA,WAAW,CAAC,IAAZ,CAAiB,CAAjB;AACD,KAPD,MAOO;AACL,UAAI,IAAI,GAAG,CAAX,EAAc;AACZ,cAAM,IAAI,KAAJ,gBAAkB,CAAlB,wCAAiD,IAAjD,EAAN;AACD;;AACD,MAAA,OAAO,IAAI,IAAX;AACA,MAAA,WAAW,CAAC,IAAZ,CAAiB,IAAjB;AACD;AACF;;AACD,MAAI,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB,QAAI,OAAO,IAAI,CAAf,EAAkB;AAChB,YAAM,IAAI,KAAJ,CACF,sCACA,4CADA,GAEA,oCAHE,CAAN;AAID;;AACD,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,SAAS,GAAG,OAAvB,CAAhB;;AACA,QAAI,OAAO,GAAG,OAAV,KAAsB,SAA1B,EAAqC;AACnC,YAAM,IAAI,KAAJ,mDAAqD,SAArD,sFAEF,OAFE,0BAEqB,UAFrB,2BAEgD,WAFhD,EAAN;AAGD;;AAED,IAAA,WAAW,CAAC,YAAD,CAAX,GAA4B,OAA5B;AACD;;AACD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAnB;;AACA,MAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,UAAM,IAAI,KAAJ,6CACF,SADE,wDAEF,UAFE,0BAEwB,UAFxB,0BAEkD,WAFlD,EAAN;AAGD;;AAED,MAAM,SAAS,GAAG,UAAU,CAAC,MAA7B;AACA,MAAM,YAAY,GAAa,EAA/B;;AACA,MAAI,SAAS,GAAG,CAAhB,EAAmB;AACjB,IAAA,YAAY,CAAC,SAAS,GAAG,CAAb,CAAZ,GAA8B,CAA9B;;AACA,SAAK,IAAI,EAAC,GAAG,SAAS,GAAG,CAAzB,EAA4B,EAAC,IAAI,CAAjC,EAAoC,EAAE,EAAtC,EAAyC;AACvC,MAAA,YAAY,CAAC,EAAD,CAAZ,GAAkB,YAAY,CAAC,EAAC,GAAG,CAAL,CAAZ,GAAsB,UAAU,CAAC,EAAC,GAAG,CAAL,CAAlD;AACD;AACF;;AAED,MAAM,aAAa,GAAa,EAAhC;;AACA,MAAI,UAAU,GAAG,CAAjB,EAAoB;AAClB,IAAA,aAAa,CAAC,UAAU,GAAG,CAAd,CAAb,GAAgC,CAAhC;;AACA,SAAK,IAAI,GAAC,GAAG,UAAU,GAAG,CAA1B,EAA6B,GAAC,IAAI,CAAlC,EAAqC,EAAE,GAAvC,EAA0C;AACxC,MAAA,aAAa,CAAC,GAAD,CAAb,GAAmB,aAAa,CAAC,GAAC,GAAG,CAAL,CAAb,GAAuB,WAAW,CAAC,GAAC,GAAG,CAAL,CAArD;AACD;AACF;;AAED,MAAM,UAAU,GACZ,IAAI,CAAC,iBAAL,CAAuB,UAAvB,EAAmC,GAAG,GAAG,UAAzC,CADJ;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,EAAE,CAA3B,EAA8B;AAC5B,QAAI,EAAE,GAAG,CAAT;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,EAAE,CAAjC,EAAoC;AAClC;AACA,MAAA,EAAE,IAAI,YAAY,CAAC,CAAC,GAAG,SAAJ,GAAgB,CAAjB,CAAZ,GAAkC,YAAY,CAAC,CAAD,CAApD;AACD;;AACD,SAAK,IAAI,EAAC,GAAG,CAAb,EAAgB,EAAC,GAAG,UAApB,EAAgC,EAAE,EAAlC,EAAqC;AACnC;AACA,MAAA,UAAU,CAAC,CAAC,GAAG,UAAJ,GAAiB,EAAlB,CAAV,GAAiC,IAAI,CAAC,KAAL,CAAW,EAAE,GAAG,aAAa,CAAC,EAAD,CAA7B,CAAjC;AACA,MAAA,EAAE,IAAI,aAAa,CAAC,EAAD,CAAnB;AACD;AACF;;AACD,SAAO,CAAC,UAAD,EAAa,CAAC,GAAD,EAAM,UAAN,CAAb,EAAgC,WAAhC,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${\n            unknownIndex} and ${d}`);\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          'reshape cannot infer the missing ' +\n          'input size for an empty tensor unless all ' +\n          'specified input sizes are non-zero');\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${\n          product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${\n        denseSize} dense values, but the requested shape has ${\n        outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}