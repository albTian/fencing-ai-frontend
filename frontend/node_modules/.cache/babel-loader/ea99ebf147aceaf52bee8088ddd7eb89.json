{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\n\nfunction setupFunc(backend) {\n  wasmFunc = backend.wasm.cwrap(AddN, null\n  /* void */\n  , ['array', 'number', 'number', 'number']);\n}\n\nfunction addn(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype); // Short-circuit zero-sized tensors.\n\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n\n  const inputIds = inputs.map(x => backend.dataIdMap.get(x.dataId).id);\n  const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n  return out;\n}\n\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: addn\n};","map":{"version":3,"sources":["../../src/kernels/AddN.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAR,EAAoD,IAApD,QAA+D,uBAA/D;AAIA,SAAQ,QAAR,QAAuB,SAAvB;AAEA,IAAI,QAAJ;;AAIA,SAAS,SAAT,CAAmB,OAAnB,EAAuC;AACrC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,IAAnB,EAAyB;AAAK;AAA9B,IAA0C,CACnD,OADmD,EAEnD,QAFmD,EAGnD,QAHmD,EAInD,QAJmD,CAA1C,CAAX;AAMD;;AAED,SAAS,IAAT,CAAc,IAAd,EAAgE;AAC9D,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAoB,IAA1B;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,MAAM,CAAC,CAAD,CAAN,CAAU,KAA7B,EAAoC,MAAM,CAAC,CAAD,CAAN,CAAU,KAA9C,CAAZ,CAF8D,CAI9D;;AACA,MAAI,IAAI,CAAC,aAAL,CAAmB,GAAG,CAAC,KAAvB,MAAkC,CAAtC,EAAyC;AACvC,WAAO,GAAP;AACD;;AAED,QAAM,QAAQ,GAAG,MAAM,CAAC,GAAP,CAAW,CAAC,IAAI,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAAhD,CAAjB;AACA,QAAM,aAAa,GAAG,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,QAAf,EAAyB,MAAxC,CAAtB;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,EAAA,QAAQ,CAAC,aAAD,EAAgB,QAAQ,CAAC,MAAzB,EAAiC,QAAQ,CAAC,GAAG,CAAC,KAAL,CAAzC,EAAsD,KAAtD,CAAR;AAEA,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,MAFyB;AAGtC,EAAA,SAHsC;AAItC,EAAA,UAAU,EAAE;AAJ0B,CAAjC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmFunc:\n    (inputIds: Uint8Array, inputIdsLen: number, dtype: number, outId: number) =>\n        void;\n\nfunction setupFunc(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(AddN, null /* void */, [\n    'array',   // input_ids\n    'number',  // input_ids.length\n    'number',  // dtype\n    'number',  // out_id\n  ]);\n}\n\nfunction addn(args: {inputs: TensorInfo[], backend: BackendWasm}) {\n  const {inputs, backend} = args;\n  const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype);\n\n  // Short-circuit zero-sized tensors.\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n\n  const inputIds = inputs.map(x => backend.dataIdMap.get(x.dataId).id);\n  const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n\n  return out;\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: addn as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}