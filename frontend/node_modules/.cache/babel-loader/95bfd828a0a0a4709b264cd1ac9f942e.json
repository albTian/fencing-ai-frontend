{"ast":null,"code":"var _jsxFileName = \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/components/Camera.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@tensorflow/tfjs-backend-wasm\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\nimport Webcam from \"react-webcam\";\nimport { drawResults } from \"../utils/drawUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videoDim = {\n  width: 1280,\n  height: 720\n};\nlet rafId;\nlet camera, detector;\nexport default function Camera() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function setupCamera() {\n    camera = webcamRef.current;\n  }\n\n  async function setupDetector() {\n    const model = poseDetection.SupportedModels.MoveNet;\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n      minPoseScore: 0.2,\n      enableTracking: true\n    };\n    detector = await poseDetection.createDetector(model, detectorConfig);\n  }\n\n  async function detect(detector) {\n    if (typeof camera === \"undefined\" || camera === null) return;\n    if (camera.video.readyState !== 4) return;\n    if (!detector) return;\n    const video = camera.video;\n    const videoWidth = video.videoWidth;\n    const videoHeight = video.videoHeight;\n    camera.video.width = videoWidth;\n    camera.video.height = videoHeight;\n    const poses = await detector.estimatePoses(video);\n    drawCanvas(poses, videoWidth, videoHeight, canvasRef);\n  }\n\n  function drawCanvas(poses, videoWidth, videoHeight, canvas) {\n    const ctx = canvas.current.getContext('2d');\n    canvas.current.videoWidth = videoWidth;\n    canvas.current.videoHeight = videoHeight;\n    drawResults(poses, ctx, 0);\n  }\n\n  async function renderResult() {\n    if (!detector) return;\n    await detect(detector);\n  }\n\n  async function renderPrediction() {\n    await renderResult();\n    rafId = requestAnimationFrame(renderPrediction);\n\n    if (rafId) {}\n  }\n\n  async function run() {\n    setupCamera();\n    await setupDetector();\n    renderPrediction();\n  }\n\n  useEffect(() => {\n    run();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      mirrored: true,\n      style: {\n        position: 'absolute',\n        width: videoDim.width,\n        height: videoDim.height,\n        left: 0,\n        top: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        width: videoDim.width,\n        height: videoDim.height,\n        left: 0,\n        top: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Camera, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/components/Camera.jsx"],"names":["React","useRef","useEffect","poseDetection","Webcam","drawResults","videoDim","width","height","rafId","camera","detector","Camera","webcamRef","canvasRef","setupCamera","current","setupDetector","model","SupportedModels","MoveNet","detectorConfig","modelType","movenet","MULTIPOSE_LIGHTNING","minPoseScore","enableTracking","createDetector","detect","video","readyState","videoWidth","videoHeight","poses","estimatePoses","drawCanvas","canvas","ctx","getContext","renderResult","renderPrediction","requestAnimationFrame","run","position","left","top"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,uBAAP;AACA,OAAO,gCAAP;AACA,OAAO,+BAAP;AACA,OAAO,KAAKC,aAAZ,MAA+B,mCAA/B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE,IADM;AAEbC,EAAAA,MAAM,EAAE;AAFK,CAAjB;AAKA,IAAIC,KAAJ;AACA,IAAIC,MAAJ,EAAYC,QAAZ;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B,QAAMC,SAAS,GAAGZ,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMa,SAAS,GAAGb,MAAM,CAAC,IAAD,CAAxB;;AAEA,WAASc,WAAT,GAAuB;AACnBL,IAAAA,MAAM,GAAGG,SAAS,CAACG,OAAnB;AACH;;AAED,iBAAeC,aAAf,GAA+B;AAC3B,UAAMC,KAAK,GAAGf,aAAa,CAACgB,eAAd,CAA8BC,OAA5C;AACA,UAAMC,cAAc,GAAG;AACnBC,MAAAA,SAAS,EAAEnB,aAAa,CAACoB,OAAd,CAAsBD,SAAtB,CAAgCE,mBADxB;AAEnBC,MAAAA,YAAY,EAAE,GAFK;AAGnBC,MAAAA,cAAc,EAAE;AAHG,KAAvB;AAKAf,IAAAA,QAAQ,GAAG,MAAMR,aAAa,CAACwB,cAAd,CAA6BT,KAA7B,EAAoCG,cAApC,CAAjB;AACH;;AAGD,iBAAeO,MAAf,CAAsBjB,QAAtB,EAAgC;AAC5B,QAAI,OAAOD,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,KAAK,IAAhD,EAAsD;AACtD,QAAIA,MAAM,CAACmB,KAAP,CAAaC,UAAb,KAA4B,CAAhC,EAAmC;AACnC,QAAI,CAACnB,QAAL,EAAe;AAEf,UAAMkB,KAAK,GAAGnB,MAAM,CAACmB,KAArB;AACA,UAAME,UAAU,GAAGF,KAAK,CAACE,UAAzB;AACA,UAAMC,WAAW,GAAGH,KAAK,CAACG,WAA1B;AAEAtB,IAAAA,MAAM,CAACmB,KAAP,CAAatB,KAAb,GAAqBwB,UAArB;AACArB,IAAAA,MAAM,CAACmB,KAAP,CAAarB,MAAb,GAAsBwB,WAAtB;AAEA,UAAMC,KAAK,GAAG,MAAMtB,QAAQ,CAACuB,aAAT,CAAuBL,KAAvB,CAApB;AACAM,IAAAA,UAAU,CAACF,KAAD,EAAQF,UAAR,EAAoBC,WAApB,EAAiClB,SAAjC,CAAV;AACH;;AAED,WAASqB,UAAT,CAAoBF,KAApB,EAA2BF,UAA3B,EAAuCC,WAAvC,EAAoDI,MAApD,EAA4D;AACxD,UAAMC,GAAG,GAAGD,MAAM,CAACpB,OAAP,CAAesB,UAAf,CAA0B,IAA1B,CAAZ;AACAF,IAAAA,MAAM,CAACpB,OAAP,CAAee,UAAf,GAA4BA,UAA5B;AACAK,IAAAA,MAAM,CAACpB,OAAP,CAAegB,WAAf,GAA6BA,WAA7B;AAEA3B,IAAAA,WAAW,CAAC4B,KAAD,EAAQI,GAAR,EAAa,CAAb,CAAX;AACH;;AAED,iBAAeE,YAAf,GAA8B;AAC1B,QAAI,CAAC5B,QAAL,EAAe;AACf,UAAMiB,MAAM,CAACjB,QAAD,CAAZ;AAEH;;AAED,iBAAe6B,gBAAf,GAAkC;AAC9B,UAAMD,YAAY,EAAlB;AACA9B,IAAAA,KAAK,GAAGgC,qBAAqB,CAACD,gBAAD,CAA7B;;AACA,QAAI/B,KAAJ,EAAW,CACV;AACJ;;AAED,iBAAeiC,GAAf,GAAqB;AACjB3B,IAAAA,WAAW;AACX,UAAME,aAAa,EAAnB;AACAuB,IAAAA,gBAAgB;AACnB;;AAEDtC,EAAAA,SAAS,CAAC,MAAM;AACZwC,IAAAA,GAAG;AACN,GAFQ,CAAT;AAMA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAZ;AAAA,4BACI,QAAC,MAAD;AACI,MAAA,GAAG,EAAE9B,SADT;AAEI,MAAA,QAAQ,MAFZ;AAGI,MAAA,KAAK,EAAE;AACH8B,QAAAA,QAAQ,EAAE,UADP;AAEHpC,QAAAA,KAAK,EAAED,QAAQ,CAACC,KAFb;AAGHC,QAAAA,MAAM,EAAEF,QAAQ,CAACE,MAHd;AAIHoC,QAAAA,IAAI,EAAE,CAJH;AAKHC,QAAAA,GAAG,EAAE;AALF;AAHX;AAAA;AAAA;AAAA;AAAA,YADJ,eAYI;AACI,MAAA,GAAG,EAAE/B,SADT;AAEI,MAAA,KAAK,EAAE;AACH6B,QAAAA,QAAQ,EAAE,UADP;AAEHpC,QAAAA,KAAK,EAAED,QAAQ,CAACC,KAFb;AAGHC,QAAAA,MAAM,EAAEF,QAAQ,CAACE,MAHd;AAIHoC,QAAAA,IAAI,EAAE,CAJH;AAKHC,QAAAA,GAAG,EAAE;AALF;AAFX;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GA5FuBjC,M;;KAAAA,M","sourcesContent":["import React, { useRef, useEffect } from \"react\"\nimport \"@tensorflow/tfjs-core\"\nimport \"@tensorflow/tfjs-backend-webgl\"\nimport \"@tensorflow/tfjs-backend-wasm\"\nimport * as poseDetection from \"@tensorflow-models/pose-detection\"\nimport Webcam from \"react-webcam\"\nimport { drawResults } from \"../utils/drawUtils\"\n\nconst videoDim = {\n    width: 1280,\n    height: 720\n}\n\nlet rafId\nlet camera, detector\n\nexport default function Camera() {\n    const webcamRef = useRef(null)\n    const canvasRef = useRef(null)\n\n    function setupCamera() {\n        camera = webcamRef.current\n    }\n\n    async function setupDetector() {\n        const model = poseDetection.SupportedModels.MoveNet\n        const detectorConfig = {\n            modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n            minPoseScore: 0.2,\n            enableTracking: true\n        }\n        detector = await poseDetection.createDetector(model, detectorConfig)\n    }\n\n\n    async function detect(detector) {\n        if (typeof camera === \"undefined\" || camera === null) return\n        if (camera.video.readyState !== 4) return\n        if (!detector) return\n\n        const video = camera.video\n        const videoWidth = video.videoWidth\n        const videoHeight = video.videoHeight\n\n        camera.video.width = videoWidth\n        camera.video.height = videoHeight\n\n        const poses = await detector.estimatePoses(video)\n        drawCanvas(poses, videoWidth, videoHeight, canvasRef)\n    }\n    \n    function drawCanvas(poses, videoWidth, videoHeight, canvas) {\n        const ctx = canvas.current.getContext('2d')\n        canvas.current.videoWidth = videoWidth\n        canvas.current.videoHeight = videoHeight\n        \n        drawResults(poses, ctx, 0)\n    }\n\n    async function renderResult() {\n        if (!detector) return\n        await detect(detector)\n\n    }\n\n    async function renderPrediction() {\n        await renderResult()\n        rafId = requestAnimationFrame(renderPrediction)\n        if (rafId) {\n        }\n    }\n\n    async function run() {\n        setupCamera()\n        await setupDetector()\n        renderPrediction()\n    }\n\n    useEffect(() => {\n        run()\n    })\n\n    \n\n    return (\n        <div style={{ position: 'relative' }}>\n            <Webcam\n                ref={webcamRef}\n                mirrored\n                style={{\n                    position: 'absolute',\n                    width: videoDim.width,\n                    height: videoDim.height,\n                    left: 0,\n                    top: 0,\n                }}\n            />\n            <canvas\n                ref={canvasRef}\n                style={{\n                    position: 'absolute',\n                    width: videoDim.width,\n                    height: videoDim.height,\n                    left: 0,\n                    top: 0,\n                }} />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}