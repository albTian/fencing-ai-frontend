{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TopK } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmTopK;\n\nfunction setup(backend) {\n  wasmTopK = backend.wasm.cwrap(TopK, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'number', 'bool', 'number', 'number']);\n}\n\nexport const topk = ({\n  inputs,\n  backend,\n  attrs\n}) => {\n  const {\n    x\n  } = inputs;\n  const {\n    k,\n    sorted\n  } = attrs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const outputShape = x.shape.slice();\n  outputShape[outputShape.length - 1] = k;\n  const outValues = backend.makeOutput(outputShape, x.dtype);\n  const outValuesId = backend.dataIdMap.get(outValues.dataId).id;\n  const outIndices = backend.makeOutput(outputShape, 'int32');\n  const outIndicesId = backend.dataIdMap.get(outIndices.dataId).id;\n  wasmTopK(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], k, sorted, outValuesId, outIndicesId);\n  return [outValues, outIndices];\n};\nexport const topKConfig = {\n  kernelName: TopK,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: topk\n};","map":{"version":3,"sources":["../../src/kernels/TopK.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8C,IAA9C,QAAgF,uBAAhF;AAGA,SAAQ,QAAR,QAAuB,SAAvB;AAEA,IAAI,QAAJ;;AAKA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,IAAnB,EAAyB;AAAK;AAA9B,IAA0C,CACnD,QADmD,EAEnD,OAFmD,EAGnD,QAHmD,EAInD,QAJmD,EAKnD,QALmD,EAMnD,MANmD,EAOnD,QAPmD,EAQnD,QARmD,CAA1C,CAAX;AAUD;;AAED,OAAO,MAAM,IAAI,GAEmB,CAAC;AAAC,EAAA,MAAD;AAAS,EAAA,OAAT;AAAkB,EAAA;AAAlB,CAAD,KAA6B;AACvD,QAAM;AAAC,IAAA;AAAD,MAAM,MAAZ;AACA,QAAM;AAAC,IAAA,CAAD;AAAI,IAAA;AAAJ,MAAc,KAApB;AAEA,QAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,QAAM,WAAW,GAAG,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,CAAC,CAAC,KAAjB,EAAwB,MAAvC,CAApB;AACA,QAAM,WAAW,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAR,EAApB;AACA,EAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAX,GAAsC,CAAtC;AACA,QAAM,SAAS,GAAG,OAAO,CAAC,UAAR,CAAmB,WAAnB,EAAgC,CAAC,CAAC,KAAlC,CAAlB;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,SAAS,CAAC,MAAhC,EAAwC,EAA5D;AACA,QAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmB,WAAnB,EAAgC,OAAhC,CAAnB;AACA,QAAM,YAAY,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,UAAU,CAAC,MAAjC,EAAyC,EAA9D;AAEA,EAAA,QAAQ,CACJ,GADI,EACC,WADD,EACc,CAAC,CAAC,KAAF,CAAQ,MADtB,EAC8B,QAAQ,CAAC,CAAC,CAAC,KAAH,CADtC,EACiD,CADjD,EACoD,MADpD,EAEJ,WAFI,EAES,YAFT,CAAR;AAIA,SAAO,CAAC,SAAD,EAAY,UAAZ,CAAP;AACD,CApBF;AAsBP,OAAO,MAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,MAFyB;AAGtC,EAAA,SAAS,EAAE,KAH2B;AAItC,EAAA,UAAU,EAAE;AAJ0B,CAAjC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, TopK, TopKAttrs, TopKInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {CppDType} from './types';\n\nlet wasmTopK: (\n    xId: number, xShapeBytes: Uint8Array, xShapeLength: number,\n    xDtype: CppDType, k: number, sorted: boolean, outValuesId: number,\n    outIndicesId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmTopK = backend.wasm.cwrap(TopK, null /* void */, [\n    'number',  // xId\n    'array',   // x.shape\n    'number',  // x.shape.length\n    'number',  // x.dtype\n    'number',  // k\n    'bool',    // sorted\n    'number',  // outValuesId\n    'number',  // outIndicesId\n  ]);\n}\n\nexport const topk:\n    (args: {inputs: TopKInputs, backend: BackendWasm, attrs: TopKAttrs}) =>\n        TensorInfo[] | TensorInfo = ({inputs, backend, attrs}) => {\n          const {x} = inputs;\n          const {k, sorted} = attrs;\n\n          const xId = backend.dataIdMap.get(x.dataId).id;\n          const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n          const outputShape = x.shape.slice();\n          outputShape[outputShape.length - 1] = k;\n          const outValues = backend.makeOutput(outputShape, x.dtype);\n          const outValuesId = backend.dataIdMap.get(outValues.dataId).id;\n          const outIndices = backend.makeOutput(outputShape, 'int32');\n          const outIndicesId = backend.dataIdMap.get(outIndices.dataId).id;\n\n          wasmTopK(\n              xId, xShapeBytes, x.shape.length, CppDType[x.dtype], k, sorted,\n              outValuesId, outIndicesId);\n\n          return [outValues, outIndices];\n        };\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: topk as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}