{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\n\nfunction unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const numOutputs = value.shape[axis];\n  const rank = value.shape.length;\n  const outShape = new Array(rank - 1);\n  let outIndex = 0;\n\n  for (let i = 0; i < rank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const outs = new Array(numOutputs);\n  const begin = new Array(rank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n\n  for (let i = 0; i < outs.length; i++) {\n    begin[axis] = i;\n    outs[i] = slice({\n      inputs: {\n        x: value\n      },\n      attrs: {\n        begin,\n        size\n      },\n      backend\n    });\n  }\n\n  return outs.map(({\n    dataId,\n    dtype\n  }) => ({\n    dataId,\n    dtype,\n    shape: outShape\n  }));\n}\n\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'wasm',\n  kernelFunc: unpack\n};","map":{"version":3,"sources":["../../src/kernels/Unpack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8C,MAA9C,QAAsF,uBAAtF;AAIA,SAAQ,KAAR,QAAoB,SAApB;;AAEA,SAAS,MAAT,CACI,IADJ,EAC0E;AAExE,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA;AAAD,MAAU,MAAhB;AACA,MAAI;AAAC,IAAA;AAAD,MAAS,KAAb;;AAEA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,IAAA,IAAI,IAAI,KAAK,CAAC,KAAN,CAAY,MAApB;AACD;;AAED,QAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,IAAZ,CAAnB;AACA,QAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,MAAzB;AACA,QAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,IAAI,GAAG,CAAjB,CAA3B;AACA,MAAI,QAAQ,GAAG,CAAf;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B;AAC7B,QAAI,CAAC,KAAK,IAAV,EAAgB;AACd,MAAA,QAAQ,CAAC,QAAQ,EAAT,CAAR,GAAuB,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAvB;AACD;AACF;;AACD,QAAM,IAAI,GAAiB,IAAI,KAAJ,CAAU,UAAV,CAA3B;AACA,QAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,IAAV,EAAgB,IAAhB,CAAqB,CAArB,CAAd;AACA,QAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAb;AACA,EAAA,IAAI,CAAC,IAAD,CAAJ,GAAa,CAAb;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,IAAA,KAAK,CAAC,IAAD,CAAL,GAAc,CAAd;AACA,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAK,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAE;AAAJ,OAAT;AAAqB,MAAA,KAAK,EAAE;AAAC,QAAA,KAAD;AAAQ,QAAA;AAAR,OAA5B;AAA2C,MAAA;AAA3C,KAAD,CAAf;AACD;;AACD,SAAO,IAAI,CAAC,GAAL,CAAS,CAAC;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,GAAD,MAAsB;AAAC,IAAA,MAAD;AAAS,IAAA,KAAT;AAAgB,IAAA,KAAK,EAAE;AAAvB,GAAtB,CAAT,CAAP;AACD;;AAED,OAAO,MAAM,YAAY,GAAiB;AACxC,EAAA,UAAU,EAAE,MAD4B;AAExC,EAAA,WAAW,EAAE,MAF2B;AAGxC,EAAA,UAAU,EAAE;AAH4B,CAAnC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {slice} from './Slice';\n\nfunction unpack(\n    args: {inputs: UnpackInputs, backend: BackendWasm, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const numOutputs = value.shape[axis];\n  const rank = value.shape.length;\n  const outShape: number[] = new Array(rank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < rank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n  const outs: TensorInfo[] = new Array(numOutputs);\n  const begin = new Array(rank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  for (let i = 0; i < outs.length; i++) {\n    begin[axis] = i;\n    outs[i] = slice({inputs: {x: value}, attrs: {begin, size}, backend});\n  }\n  return outs.map(({dataId, dtype}) => ({dataId, dtype, shape: outShape}));\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'wasm',\n  kernelFunc: unpack as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}