{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nvar wasmPrelu;\n\nfunction setup(backend) {\n  wasmPrelu = backend.wasm.cwrap(Prelu, null\n  /* void */\n  , ['number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction prelu(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var x = inputs.x,\n      alpha = inputs.alpha;\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var weightsId = backend.dataIdMap.get(alpha.dataId).id;\n  var out = backend.makeOutput(x.shape, 'float32');\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  wasmPrelu(xId, weightsId, outId);\n  return out;\n}\n\nexport var preluConfig = {\n  kernelName: Prelu,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prelu\n};","map":{"version":3,"sources":["../../src/kernels/Prelu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,KAAlC,QAA2D,uBAA3D;AAIA,IAAI,SAAJ;;AAEA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,SAAS,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,KAAnB,EAA0B;AAAK;AAA/B,IAA2C,CACrD,QADqD,EAErD,QAFqD,EAGrD,QAHqD,CAG1C;AAH0C,GAA3C,CAAZ;AAKD;;AAED,SAAS,KAAT,CAAe,IAAf,EAAgE;AAAA,MACvD,MADuD,GACpC,IADoC,CACvD,MADuD;AAAA,MAC/C,OAD+C,GACpC,IADoC,CAC/C,OAD+C;AAAA,MAEvD,CAFuD,GAE3C,MAF2C,CAEvD,CAFuD;AAAA,MAEpD,KAFoD,GAE3C,MAF2C,CAEpD,KAFoD;AAG9D,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,MAAM,SAAS,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,KAAK,CAAC,MAA5B,EAAoC,EAAtD;AAEA,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAC,CAAC,KAArB,EAA4B,SAA5B,CAAZ;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,EAAA,SAAS,CAAC,GAAD,EAAM,SAAN,EAAiB,KAAjB,CAAT;AACA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,WAAW,GAAiB;AACvC,EAAA,UAAU,EAAE,KAD2B;AAEvC,EAAA,WAAW,EAAE,MAF0B;AAGvC,EAAA,SAAS,EAAE,KAH4B;AAIvC,EAAA,UAAU,EAAE;AAJ2B,CAAlC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prelu, PreluInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmPrelu: (xId: number, weightsId: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmPrelu = backend.wasm.cwrap(Prelu, null /* void */, [\n    'number',  // x_id\n    'number',  // weights_id\n    'number'   // out_id\n  ]);\n}\n\nfunction prelu(args: {inputs: PreluInputs, backend: BackendWasm}) {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const weightsId = backend.dataIdMap.get(alpha.dataId).id;\n\n  const out = backend.makeOutput(x.shape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmPrelu(xId, weightsId, outId);\n  return out;\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prelu as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}