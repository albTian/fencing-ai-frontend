{"ast":null,"code":"import _classCallCheck from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport var Im2ColPackedProgram = function Im2ColPackedProgram(outputShape, convInfo) {\n  _classCallCheck(this, Im2ColPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.customUniforms = [{\n    name: 'inputShape',\n    type: 'ivec3'\n  }, {\n    name: 'pad',\n    type: 'ivec2'\n  }, {\n    name: 'stride',\n    type: 'ivec2'\n  }, {\n    name: 'dilation',\n    type: 'ivec2'\n  }, {\n    name: 'inChannels',\n    type: 'int'\n  }, {\n    name: 'itemsPerBlockRow',\n    type: 'int'\n  }, {\n    name: 'outWidth',\n    type: 'int'\n  }];\n  this.outputShape = outputShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var dataFormat = convInfo.dataFormat;\n  var glsl = getGlslDifferences();\n  var isChannelsLast = dataFormat === 'channelsLast';\n  var rowDim = isChannelsLast ? 0 : 1;\n  var colDim = isChannelsLast ? 1 : 2;\n  var boundsCheckingSnippet = this.enableShapeUniforms ? 'if(blockIndex < outShape[1] && pos < outShape[0]) {' : \"if(blockIndex < \".concat(outputShape[1], \" && pos < \").concat(outputShape[0], \") {\");\n  var unrolled = \"\";\n\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      unrolled += \"\\n          blockIndex = rc.y + \".concat(col, \";\\n          pos = rc.x + \").concat(row, \";\\n\\n          \").concat(boundsCheckingSnippet, \"\\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\\n\\n            if(d0 < inputShape[\").concat(rowDim, \"] && d0 >= 0) {\\n              // Use custom imod instead mod. On Intel GPU, mod may generate\\n              // unexpected value.\\n              // https://github.com/tensorflow/tfjs/issues/5447\\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\\n                  inChannels);\\n\\n              if(d1 < inputShape[\").concat(colDim, \"] && d1 >= 0) {\\n\\n                ch = imod(pos, inChannels);\\n\\n                if (\").concat(isChannelsLast, \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \");\n    }\n  }\n\n  this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \".concat(unrolled, \"\\n\\n        \").concat(glsl.output, \" = result;\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/im2col_packed_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,kBAAR,QAAiC,gBAAjC;AACA,SAAsB,gBAAtB,QAA6C,cAA7C;AAEA,WAAa,mBAAb,GAiBE,6BAAY,WAAZ,EAAmC,QAAnC,EAAoE;AAAA;;AAhBpE,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,OAAA,YAAA,GAAe,IAAf;AACA,OAAA,YAAA,GAAe,IAAf;AAIA,OAAA,cAAA,GAAiB,CACf;AAAC,IAAA,IAAI,EAAE,YAAP;AAAqB,IAAA,IAAI,EAAE;AAA3B,GADe,EAEf;AAAC,IAAA,IAAI,EAAE,KAAP;AAAc,IAAA,IAAI,EAAE;AAApB,GAFe,EAGf;AAAC,IAAA,IAAI,EAAE,QAAP;AAAiB,IAAA,IAAI,EAAE;AAAvB,GAHe,EAIf;AAAC,IAAA,IAAI,EAAE,UAAP;AAAmB,IAAA,IAAI,EAAE;AAAzB,GAJe,EAKf;AAAC,IAAA,IAAI,EAAE,YAAP;AAAqB,IAAA,IAAI,EAAE;AAA3B,GALe,EAMf;AAAC,IAAA,IAAI,EAAE,kBAAP;AAA2B,IAAA,IAAI,EAAE;AAAjC,GANe,EAOf;AAAC,IAAA,IAAI,EAAE,UAAP;AAAmB,IAAA,IAAI,EAAE;AAAzB,GAPe,CAAjB;AAWE,OAAK,WAAL,GAAmB,WAAnB;AACA,OAAK,mBAAL,GAA2B,gBAAgB,CAAC,KAAK,WAAL,CAAiB,MAAlB,CAA3C;AAFkE,MAG3D,UAH2D,GAG7C,QAH6C,CAG3D,UAH2D;AAIlE,MAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,MAAM,cAAc,GAAG,UAAU,KAAK,cAAtC;AACA,MAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;AACA,MAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;AAEA,MAAM,qBAAqB,GAAG,KAAK,mBAAL,GAC1B,qDAD0B,6BAEP,WAAW,CAAC,CAAD,CAFJ,uBAEoB,WAAW,CAAC,CAAD,CAF/B,QAA9B;AAGA,MAAI,QAAQ,KAAZ;;AAEA,OAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,SAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,MAAA,QAAQ,8CACgB,GADhB,uCAES,GAFT,4BAIJ,qBAJI,4LAQiB,MARjB,yaAgBmB,MAhBnB,mGAoBM,cApBN,wFAsBW,GAAG,GAAG,CAAN,GAAU,GAtBrB,kOA2BW,GAAG,GAAG,CAAN,GAAU,GA3BrB,kMAAR;AAmCD;AACF;;AAED,OAAK,QAAL,8MASM,QATN,yBAWM,IAAI,CAAC,MAXX;AAcD,CArFH","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec3' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[1] && pos < outShape[0]) {' :\n        `if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}