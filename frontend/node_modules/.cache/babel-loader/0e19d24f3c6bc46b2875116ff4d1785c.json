{"ast":null,"code":"import _toConsumableArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nvar wasmRotate;\n\nfunction setup(backend) {\n  wasmRotate = backend.wasm.cwrap(RotateWithOffset, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'array', 'number', 'number']);\n}\n\nexport function rotateWithOffset(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var image = inputs.image;\n  var radians = attrs.radians,\n      fillValue = attrs.fillValue,\n      center = attrs.center;\n  var out = backend.makeOutput(image.shape, image.dtype);\n  var imageId = backend.dataIdMap.get(image.dataId).id;\n  var outId = backend.dataIdMap.get(out.dataId).id;\n\n  var _image$shape = _slicedToArray(image.shape, 4),\n      batch = _image$shape[0],\n      imageHeight = _image$shape[1],\n      imageWidth = _image$shape[2],\n      numChannels = _image$shape[3];\n\n  var _backend_util$getImag = backend_util.getImageCenter(center, imageHeight, imageWidth),\n      _backend_util$getImag2 = _slicedToArray(_backend_util$getImag, 2),\n      centerX = _backend_util$getImag2[0],\n      centerY = _backend_util$getImag2[1];\n\n  var fillIsBlack = fillValue === 0;\n  var fullOpacityValue = 255;\n  var fillValues = typeof fillValue === 'number' ? [fillValue, fillValue, fillValue, fillIsBlack ? 0 : fullOpacityValue] : [].concat(_toConsumableArray(fillValue), [fullOpacityValue]);\n  var fillBytes = new Uint8Array(new Int32Array(fillValues).buffer);\n  wasmRotate(imageId, batch, imageHeight, imageWidth, numChannels, radians, centerX, centerY, fillBytes, fillValues.length, outId);\n  return out;\n}\nexport var rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'wasm',\n  kernelFunc: rotateWithOffset,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/RotateWithOffset.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,gBAAlC,QAAoH,uBAApH;AACA,SAAQ,YAAR,QAA2B,uBAA3B;AAIA,IAAI,UAAJ;;AAKA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,gBAAnB,EAAqC;AAAK;AAA1C,IAAsD,CACjE,QADiE,EAEjE,QAFiE,EAGjE,QAHiE,EAIjE,QAJiE,EAKjE,QALiE,EAMjE,QANiE,EAOjE,QAPiE,EAQjE,QARiE,EASjE,OATiE,EAUjE,QAViE,EAWjE,QAXiE,CAAtD,CAAb;AAaD;;AAED,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAIL;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,KAFR,GAEiB,MAFjB,CAEQ,KAFR;AAAA,MAGQ,OAHR,GAGsC,KAHtC,CAGQ,OAHR;AAAA,MAGiB,SAHjB,GAGsC,KAHtC,CAGiB,SAHjB;AAAA,MAG4B,MAH5B,GAGsC,KAHtC,CAG4B,MAH5B;AAKC,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,KAAK,CAAC,KAAzB,EAAgC,KAAK,CAAC,KAAtC,CAAZ;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,KAAK,CAAC,MAA5B,EAAoC,EAApD;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;;AAPD,oCASuD,KAAK,CAAC,KAT7D;AAAA,MASQ,KATR;AAAA,MASe,WATf;AAAA,MAS4B,UAT5B;AAAA,MASwC,WATxC;;AAAA,8BAYK,YAAY,CAAC,cAAb,CAA4B,MAA5B,EAAoC,WAApC,EAAiD,UAAjD,CAZL;AAAA;AAAA,MAWQ,OAXR;AAAA,MAWiB,OAXjB;;AAcC,MAAM,WAAW,GAAG,SAAS,KAAK,CAAlC;AACA,MAAM,gBAAgB,GAAG,GAAzB;AAEA,MAAM,UAAU,GAAG,OAAO,SAAP,KAAqB,QAArB,GACf,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAW,GAAG,CAAH,GAAO,gBAApD,CADe,gCAEX,SAFW,IAEA,gBAFA,EAAnB;AAGA,MAAM,SAAS,GAAG,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,UAAf,EAA2B,MAA1C,CAAlB;AAEA,EAAA,UAAU,CACN,OADM,EACG,KADH,EACU,WADV,EACuB,UADvB,EACmC,WADnC,EACgD,OADhD,EACyD,OADzD,EAEN,OAFM,EAEG,SAFH,EAEc,UAAU,CAAC,MAFzB,EAEiC,KAFjC,CAAV;AAGA,SAAO,GAAP;AACD;AAED,OAAO,IAAM,sBAAsB,GAAiB;AAClD,EAAA,UAAU,EAAE,gBADsC;AAElD,EAAA,WAAW,EAAE,MAFqC;AAGlD,EAAA,UAAU,EAAE,gBAHsC;AAIlD,EAAA,SAAS,EAAE;AAJuC,CAA7C","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmRotate: (\n    xId: number, batch: number, imageHeight: number, imageWidth: number,\n    numChannels: number, radians: number, centerX: number, centerY: number,\n    fillBytes: Uint8Array, fillLength: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmRotate = backend.wasm.cwrap(RotateWithOffset, null /* void */, [\n    'number',  // xId\n    'number',  // batch\n    'number',  // imageHeight\n    'number',  // imageWidth\n    'number',  // numChannels\n    'number',  // radians\n    'number',  // centerX\n    'number',  // centerY\n    'array',   // fillBytes\n    'number',  // fillLength\n    'number',  // outId\n  ]);\n}\n\nexport function rotateWithOffset(args: {\n  inputs: RotateWithOffsetInputs,\n  backend: BackendWasm,\n  attrs: RotateWithOffsetAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {radians, fillValue, center} = attrs;\n\n  const out = backend.makeOutput(image.shape, image.dtype);\n  const imageId = backend.dataIdMap.get(image.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n  const [centerX, centerY] =\n      backend_util.getImageCenter(center, imageHeight, imageWidth);\n\n  const fillIsBlack = fillValue === 0;\n  const fullOpacityValue = 255;\n\n  const fillValues = typeof fillValue === 'number' ?\n      [fillValue, fillValue, fillValue, fillIsBlack ? 0 : fullOpacityValue] :\n      [...fillValue, fullOpacityValue];\n  const fillBytes = new Uint8Array(new Int32Array(fillValues).buffer);\n\n  wasmRotate(\n      imageId, batch, imageHeight, imageWidth, numChannels, radians, centerX,\n      centerY, fillBytes, fillValues.length, outId);\n  return out;\n}\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'wasm',\n  kernelFunc: rotateWithOffset as {} as KernelFunc,\n  setupFunc: setup\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}