{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types'; // Must match enum in MirrorPad.cc\n\nvar MirrorPaddingMode;\n\n(function (MirrorPaddingMode) {\n  MirrorPaddingMode[MirrorPaddingMode[\"reflect\"] = 0] = \"reflect\";\n  MirrorPaddingMode[MirrorPaddingMode[\"symmetric\"] = 1] = \"symmetric\";\n})(MirrorPaddingMode || (MirrorPaddingMode = {}));\n\nlet wasmMirrorPad;\n\nfunction setup(backend) {\n  wasmMirrorPad = backend.wasm.cwrap(MirrorPad, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'array', 'array', 'number', 'number']);\n}\n\nfunction mirrorPad(args) {\n  const {\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings,\n      mode\n    }\n  } = args;\n  const outShape = paddings.map((p, i) => p[0]\n  /* beforePad */\n  + x.shape[i] + p[1]\n  /* afterPad */\n  );\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(outShape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const prePaddingsFlat = paddings.map(padTuple => padTuple[0]);\n  const postPaddingsFlat = paddings.map(padTuple => padTuple[1]);\n  const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n  const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n  wasmMirrorPad(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes, postPaddingsBytes, MirrorPaddingMode[mode], outId);\n  return out;\n}\n\nexport const mirrorPadConfig = {\n  kernelName: MirrorPad,\n  backendName: 'wasm',\n  kernelFunc: mirrorPad,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/MirrorPad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,SAAlC,QAAmF,uBAAnF;AAIA,SAAQ,QAAR,QAAuB,SAAvB,C,CAEA;;AACA,IAAK,iBAAL;;AAAA,CAAA,UAAK,iBAAL,EAAsB;AACpB,EAAA,iBAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,iBAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACD,CAHD,EAAK,iBAAiB,KAAjB,iBAAiB,GAAA,EAAA,CAAtB;;AAKA,IAAI,aAAJ;;AAKA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,aAAa,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,SAAnB,EAA8B;AAAK;AAAnC,IAA+C,CAC7D,QAD6D,EAE7D,OAF6D,EAG7D,QAH6D,EAI7D,QAJ6D,EAK7D,OAL6D,EAM7D,OAN6D,EAO7D,QAP6D,EAQ7D,QAR6D,CAA/C,CAAhB;AAUD;;AAED,SAAS,SAAT,CAAmB,IAAnB,EAIC;AACC,QAAM;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA;AAAD,KAAT;AAAc,IAAA,OAAd;AAAuB,IAAA,KAAK,EAAE;AAAC,MAAA,QAAD;AAAW,MAAA;AAAX;AAA9B,MAAkD,IAAxD;AAEA,QAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CACb,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,CAAD;AAAI;AAAL,IAAuB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAvB,GAAoC,CAAC,CAAC,CAAD;AAAI;AADtC,GAAjB;AAEA,QAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,QAAnB,EAA6B,CAAC,CAAC,KAA/B,CAAZ;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,QAAM,WAAW,GAAG,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,CAAC,CAAC,KAAjB,EAAwB,MAAvC,CAApB;AAEA,QAAM,eAAe,GAAG,QAAQ,CAAC,GAAT,CAAa,QAAQ,IAAI,QAAQ,CAAC,CAAD,CAAjC,CAAxB;AACA,QAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAT,CAAa,QAAQ,IAAI,QAAQ,CAAC,CAAD,CAAjC,CAAzB;AACA,QAAM,gBAAgB,GAClB,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,eAAf,EAAgC,MAA/C,CADJ;AAEA,QAAM,iBAAiB,GACnB,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,gBAAf,EAAiC,MAAhD,CADJ;AAGA,EAAA,aAAa,CACT,GADS,EACJ,WADI,EACS,CAAC,CAAC,KAAF,CAAQ,MADjB,EACyB,QAAQ,CAAC,CAAC,CAAC,KAAH,CADjC,EAC4C,gBAD5C,EAET,iBAFS,EAEU,iBAAiB,CAAC,IAAD,CAF3B,EAEmC,KAFnC,CAAb;AAGA,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,MAF8B;AAG3C,EAAA,UAAU,EAAE,SAH+B;AAI3C,EAAA,SAAS,EAAE;AAJgC,CAAtC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\n// Must match enum in MirrorPad.cc\nenum MirrorPaddingMode {\n  reflect = 0,\n  symmetric = 1\n}\n\nlet wasmMirrorPad: (\n    xId: number, xShapeBytes: Uint8Array, xShapeLength: number, xDtype: number,\n    prePaddingsBytes: Uint8Array, postPaddingsBytes: Uint8Array, mode: number,\n    outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmMirrorPad = backend.wasm.cwrap(MirrorPad, null /* void */, [\n    'number',  // xId\n    'array',   // x.shape\n    'number',  // x.shape.length\n    'number',  // x.dtype\n    'array',   // pre-paddings\n    'array',   // post-paddings\n    'number',  // mode\n    'number',  // outId\n  ]);\n}\n\nfunction mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: BackendWasm,\n  attrs: MirrorPadAttrs\n}) {\n  const {inputs: {x}, backend, attrs: {paddings, mode}} = args;\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(outShape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n\n  const prePaddingsFlat = paddings.map(padTuple => padTuple[0]);\n  const postPaddingsFlat = paddings.map(padTuple => padTuple[1]);\n  const prePaddingsBytes =\n      new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n  const postPaddingsBytes =\n      new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n\n  wasmMirrorPad(\n      xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes,\n      postPaddingsBytes, MirrorPaddingMode[mode], outId);\n  return out;\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'wasm',\n  kernelFunc: mirrorPad as {} as KernelFunc,\n  setupFunc: setup\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}