{"ast":null,"code":"var _jsxFileName = \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/components/Camera.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@tensorflow/tfjs-backend-wasm\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\nimport Webcam from \"react-webcam\";\nimport DrawUtil from \"../utils/drawUtilClass\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videoConstraints = {\n  width: 1280,\n  height: 720,\n  facingMode: \"environment\"\n};\nconst MIN_SCORE = 0.25;\nlet rafId;\nlet webcam, detector;\nlet canvas, ctx;\nlet drawer;\nexport default function Camera() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    run(); // eslint-disable-next-line\n  }, []);\n\n  async function run() {\n    console.log(\"loading...\");\n    setupCamera();\n    await setupDetector();\n    await renderPrediction();\n    console.log(\"done loading\");\n  }\n\n  function setupCamera() {\n    webcam = webcamRef.current;\n    canvas = canvasRef.current;\n    ctx = canvas.getContext(\"2d\");\n    ctx.translate(videoConstraints.width, 0);\n    ctx.scale(-1, 1);\n    drawer = new DrawUtil(ctx, MIN_SCORE);\n  }\n\n  async function setupDetector() {\n    const model = poseDetection.SupportedModels.MoveNet;\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n      minPoseScore: MIN_SCORE,\n      enableTracking: true\n    };\n    detector = await poseDetection.createDetector(model, detectorConfig);\n  } // Loop to render new skeleton pose and video every frame\n\n\n  async function renderPrediction() {\n    await renderResult();\n    rafId = requestAnimationFrame(renderPrediction);\n\n    if (rafId) {}\n  }\n\n  async function renderResult() {\n    if (!detector) return;\n    const poses = await detect(detector);\n    drawCanvas(poses);\n  }\n\n  async function detect(detector) {\n    if (typeof webcam === \"undefined\" || webcam === null) return;\n    if (webcam.video.readyState !== 4) return;\n    if (!detector) return;\n    return await detector.estimatePoses(webcam.video);\n  }\n\n  function drawCanvas(poses) {\n    ctx.drawImage(webcam.video, 0, 0, videoConstraints.width, videoConstraints.height); // drawResults(poses, ctx, MIN_SCORE);\n\n    drawer.drawResults(poses, ctx, MIN_SCORE);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      maxHeight: \"100vh\",\n      overflow: \"hidden\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: videoConstraints.width,\n      height: videoConstraints.height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      playsInline: true,\n      width: videoConstraints.width,\n      height: videoConstraints.height,\n      videoConstraints: videoConstraints,\n      style: {\n        visibility: \"hidden\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Camera, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/components/Camera.jsx"],"names":["React","useRef","useEffect","poseDetection","Webcam","DrawUtil","videoConstraints","width","height","facingMode","MIN_SCORE","rafId","webcam","detector","canvas","ctx","drawer","Camera","webcamRef","canvasRef","run","console","log","setupCamera","setupDetector","renderPrediction","current","getContext","translate","scale","model","SupportedModels","MoveNet","detectorConfig","modelType","movenet","MULTIPOSE_LIGHTNING","minPoseScore","enableTracking","createDetector","renderResult","requestAnimationFrame","poses","detect","drawCanvas","video","readyState","estimatePoses","drawImage","drawResults","position","maxHeight","overflow","visibility"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,uBAAP;AACA,OAAO,gCAAP;AACA,OAAO,+BAAP;AACA,OAAO,KAAKC,aAAZ,MAA+B,mCAA/B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,IADgB;AAEvBC,EAAAA,MAAM,EAAE,GAFe;AAGvBC,EAAAA,UAAU,EAAE;AAHW,CAAzB;AAMA,MAAMC,SAAS,GAAG,IAAlB;AAEA,IAAIC,KAAJ;AACA,IAAIC,MAAJ,EAAYC,QAAZ;AACA,IAAIC,MAAJ,EAAYC,GAAZ;AACA,IAAIC,MAAJ;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAMC,SAAS,GAAGjB,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMkB,SAAS,GAAGlB,MAAM,CAAC,IAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,GAAG,GADW,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,iBAAeA,GAAf,GAAqB;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAC,IAAAA,WAAW;AACX,UAAMC,aAAa,EAAnB;AACA,UAAMC,gBAAgB,EAAtB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AAED,WAASC,WAAT,GAAuB;AACrBX,IAAAA,MAAM,GAAGM,SAAS,CAACQ,OAAnB;AAEAZ,IAAAA,MAAM,GAAGK,SAAS,CAACO,OAAnB;AACAX,IAAAA,GAAG,GAAGD,MAAM,CAACa,UAAP,CAAkB,IAAlB,CAAN;AACAZ,IAAAA,GAAG,CAACa,SAAJ,CAActB,gBAAgB,CAACC,KAA/B,EAAsC,CAAtC;AACAQ,IAAAA,GAAG,CAACc,KAAJ,CAAU,CAAC,CAAX,EAAc,CAAd;AAEAb,IAAAA,MAAM,GAAG,IAAIX,QAAJ,CAAaU,GAAb,EAAkBL,SAAlB,CAAT;AACD;;AAED,iBAAec,aAAf,GAA+B;AAC7B,UAAMM,KAAK,GAAG3B,aAAa,CAAC4B,eAAd,CAA8BC,OAA5C;AACA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,SAAS,EAAE/B,aAAa,CAACgC,OAAd,CAAsBD,SAAtB,CAAgCE,mBADtB;AAErBC,MAAAA,YAAY,EAAE3B,SAFO;AAGrB4B,MAAAA,cAAc,EAAE;AAHK,KAAvB;AAKAzB,IAAAA,QAAQ,GAAG,MAAMV,aAAa,CAACoC,cAAd,CAA6BT,KAA7B,EAAoCG,cAApC,CAAjB;AACD,GApC8B,CAsC/B;;;AACA,iBAAeR,gBAAf,GAAkC;AAChC,UAAMe,YAAY,EAAlB;AACA7B,IAAAA,KAAK,GAAG8B,qBAAqB,CAAChB,gBAAD,CAA7B;;AACA,QAAId,KAAJ,EAAW,CACV;AACF;;AAED,iBAAe6B,YAAf,GAA8B;AAC5B,QAAI,CAAC3B,QAAL,EAAe;AACf,UAAM6B,KAAK,GAAG,MAAMC,MAAM,CAAC9B,QAAD,CAA1B;AACA+B,IAAAA,UAAU,CAACF,KAAD,CAAV;AACD;;AAED,iBAAeC,MAAf,CAAsB9B,QAAtB,EAAgC;AAC9B,QAAI,OAAOD,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,KAAK,IAAhD,EAAsD;AACtD,QAAIA,MAAM,CAACiC,KAAP,CAAaC,UAAb,KAA4B,CAAhC,EAAmC;AACnC,QAAI,CAACjC,QAAL,EAAe;AAEf,WAAO,MAAMA,QAAQ,CAACkC,aAAT,CAAuBnC,MAAM,CAACiC,KAA9B,CAAb;AACD;;AAED,WAASD,UAAT,CAAoBF,KAApB,EAA2B;AACzB3B,IAAAA,GAAG,CAACiC,SAAJ,CACEpC,MAAM,CAACiC,KADT,EAEE,CAFF,EAGE,CAHF,EAIEvC,gBAAgB,CAACC,KAJnB,EAKED,gBAAgB,CAACE,MALnB,EADyB,CAQzB;;AACAQ,IAAAA,MAAM,CAACiC,WAAP,CAAmBP,KAAnB,EAA0B3B,GAA1B,EAA+BL,SAA/B;AACD;;AAED,sBACE;AACE,IAAA,KAAK,EAAE;AAAEwC,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,SAAS,EAAE,OAAnC;AAA4CC,MAAAA,QAAQ,EAAE;AAAtD,KADT;AAAA,4BAGE;AACE,MAAA,GAAG,EAAEjC,SADP;AAEE,MAAA,KAAK,EAAEb,gBAAgB,CAACC,KAF1B;AAGE,MAAA,MAAM,EAAED,gBAAgB,CAACE;AAH3B;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE,QAAC,MAAD;AACE,MAAA,GAAG,EAAEU,SADP;AAEE,MAAA,WAAW,MAFb;AAGE,MAAA,KAAK,EAAEZ,gBAAgB,CAACC,KAH1B;AAIE,MAAA,MAAM,EAAED,gBAAgB,CAACE,MAJ3B;AAKE,MAAA,gBAAgB,EAAEF,gBALpB;AAME,MAAA,KAAK,EAAE;AACL+C,QAAAA,UAAU,EAAE;AADP;AANT;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA7FuBpC,M;;KAAAA,M","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@tensorflow/tfjs-backend-wasm\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\nimport Webcam from \"react-webcam\";\nimport DrawUtil from \"../utils/drawUtilClass\";\n\nconst videoConstraints = {\n  width: 1280,\n  height: 720,\n  facingMode: \"environment\",\n};\n\nconst MIN_SCORE = 0.25;\n\nlet rafId;\nlet webcam, detector;\nlet canvas, ctx;\nlet drawer;\n\nexport default function Camera() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    run();\n    // eslint-disable-next-line\n  }, []);\n\n  async function run() {\n    console.log(\"loading...\");\n    setupCamera();\n    await setupDetector();\n    await renderPrediction();\n    console.log(\"done loading\");\n  }\n\n  function setupCamera() {\n    webcam = webcamRef.current;\n\n    canvas = canvasRef.current;\n    ctx = canvas.getContext(\"2d\");\n    ctx.translate(videoConstraints.width, 0);\n    ctx.scale(-1, 1);\n\n    drawer = new DrawUtil(ctx, MIN_SCORE);\n  }\n\n  async function setupDetector() {\n    const model = poseDetection.SupportedModels.MoveNet;\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n      minPoseScore: MIN_SCORE,\n      enableTracking: true,\n    };\n    detector = await poseDetection.createDetector(model, detectorConfig);\n  }\n\n  // Loop to render new skeleton pose and video every frame\n  async function renderPrediction() {\n    await renderResult();\n    rafId = requestAnimationFrame(renderPrediction);\n    if (rafId) {\n    }\n  }\n\n  async function renderResult() {\n    if (!detector) return;\n    const poses = await detect(detector);\n    drawCanvas(poses);\n  }\n\n  async function detect(detector) {\n    if (typeof webcam === \"undefined\" || webcam === null) return;\n    if (webcam.video.readyState !== 4) return;\n    if (!detector) return;\n\n    return await detector.estimatePoses(webcam.video);\n  }\n\n  function drawCanvas(poses) {\n    ctx.drawImage(\n      webcam.video,\n      0,\n      0,\n      videoConstraints.width,\n      videoConstraints.height\n    );\n    // drawResults(poses, ctx, MIN_SCORE);\n    drawer.drawResults(poses, ctx, MIN_SCORE);\n  }\n\n  return (\n    <div\n      style={{ position: \"relative\", maxHeight: \"100vh\", overflow: \"hidden\" }}\n    >\n      <canvas\n        ref={canvasRef}\n        width={videoConstraints.width}\n        height={videoConstraints.height}\n      />\n      <Webcam\n        ref={webcamRef}\n        playsInline\n        width={videoConstraints.width}\n        height={videoConstraints.height}\n        videoConstraints={videoConstraints}\n        style={{\n          visibility: \"hidden\",\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}