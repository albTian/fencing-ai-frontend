{"ast":null,"code":"import * as poseDetection from '@tensorflow-models/pose-detection';\nconst COLOR_PALETTE = ['#ffffff', '#800000', '#469990', '#e6194b', '#42d4f4', '#fabed4', '#aaffc3', '#9a6324', '#000075', '#f58231', '#4363d8', '#ffd8b1', '#dcbeff', '#808000', '#ffe119', '#911eb4', '#bfef45', '#f032e6', '#3cb44b', '#a9a9a9'];\nconst LINE_WIDTH = 2;\nconst CIRCLE_RADIUS = 4; // What are we prop drilling?\n// ctx, scoreThreshold\n\nclass DrawUtil {\n  constructor(ctx, scoreThreshold) {\n    this.ctx = ctx;\n    this.scoreThreshold = scoreThreshold;\n  }\n  /**\n   * Draw the keypoints and skeleton on the video.\n   * @param poses A list of poses to render.\n   */\n\n\n  drawResults(poses) {\n    if (!poses || !this.ctx) return;\n\n    for (const pose of poses) {\n      this.drawResult(pose);\n    }\n  }\n  /**\n    * Draw the keypoints and skeleton on the video.\n    * @param pose A pose with keypoints to render.\n    */\n\n\n  drawResult(pose) {\n    if (pose.keypoints != null) {\n      this.drawKeypoints(pose.keypoints, pose.id);\n      this.drawSkeleton(pose.keypoints, pose.id);\n    }\n  }\n  /**\n   * Draw the keypoints on the video.\n   * @param keypoints A list of keypoints.\n   */\n\n\n  drawKeypoints(keypoints, poseId) {\n    // Hardcoding MoveNet in\n    const keypointInd = poseDetection.util.getKeypointIndexBySide(poseDetection.SupportedModels.MoveNet);\n    this.ctx.fillStyle = 'Red';\n    this.ctx.strokeStyle = poseId != null ? COLOR_PALETTE[poseId % 20] : 'White';\n    ;\n    this.ctx.lineWidth = LINE_WIDTH;\n\n    for (const i of keypointInd.middle) {\n      this.drawKeypoint(keypoints[i]);\n    }\n\n    this.ctx.fillStyle = 'Green';\n\n    for (const i of keypointInd.left) {\n      this.drawKeypoint(keypoints[i]);\n    }\n\n    this.ctx.fillStyle = 'Orange';\n\n    for (const i of keypointInd.right) {\n      this.drawKeypoint(keypoints[i]);\n    }\n  }\n\n  drawKeypoint(keypoint) {\n    // If score is null, just show the keypoint.\n    const score = keypoint.score != null ? keypoint.score : 1;\n\n    if (score >= this.scoreThreshold) {\n      const circle = new Path2D();\n      circle.arc(keypoint.x, keypoint.y, CIRCLE_RADIUS, 0, 2 * Math.PI);\n      this.ctx.fill(circle);\n      this.ctx.stroke(circle);\n    }\n  }\n  /**\n     * Draw the skeleton of a body on the video.\n     * @param keypoints A list of keypoints.\n     * @param poseId The ID of the pose\n     */\n\n\n  drawSkeleton(keypoints, poseId) {\n    // Each poseId is mapped to a color in the color palette.\n    const color = poseId != null ? COLOR_PALETTE[poseId % 20] : 'White';\n    this.ctx.fillStyle = color;\n    this.ctx.strokeStyle = color;\n    this.ctx.lineWidth = LINE_WIDTH;\n    poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet).forEach(([i, j]) => {\n      const kp1 = keypoints[i];\n      const kp2 = keypoints[j]; // If score is null, just show the keypoint.\n\n      const score1 = kp1.score != null ? kp1.score : 1;\n      const score2 = kp2.score != null ? kp2.score : 1;\n\n      if (score1 >= this.scoreThreshold && score2 >= this.scoreThreshold) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(kp1.x, kp1.y);\n        this.ctx.lineTo(kp2.x, kp2.y);\n        this.ctx.stroke();\n      }\n    });\n  }\n\n}\n\nexport default DrawUtil;","map":{"version":3,"sources":["/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/utils/drawUtils.js"],"names":["poseDetection","COLOR_PALETTE","LINE_WIDTH","CIRCLE_RADIUS","DrawUtil","constructor","ctx","scoreThreshold","drawResults","poses","pose","drawResult","keypoints","drawKeypoints","id","drawSkeleton","poseId","keypointInd","util","getKeypointIndexBySide","SupportedModels","MoveNet","fillStyle","strokeStyle","lineWidth","i","middle","drawKeypoint","left","right","keypoint","score","circle","Path2D","arc","x","y","Math","PI","fill","stroke","color","getAdjacentPairs","forEach","j","kp1","kp2","score1","score2","beginPath","moveTo","lineTo"],"mappings":"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","sourcesContent":["import * as poseDetection from '@tensorflow-models/pose-detection'\n\nconst COLOR_PALETTE = [\n    '#ffffff', '#800000', '#469990', '#e6194b', '#42d4f4', '#fabed4', '#aaffc3',\n    '#9a6324', '#000075', '#f58231', '#4363d8', '#ffd8b1', '#dcbeff', '#808000',\n    '#ffe119', '#911eb4', '#bfef45', '#f032e6', '#3cb44b', '#a9a9a9'\n];\n\nconst LINE_WIDTH = 2\nconst CIRCLE_RADIUS = 4\n\n// What are we prop drilling?\n// ctx, scoreThreshold\n\nclass DrawUtil {\n    constructor(ctx, scoreThreshold) {\n        this.ctx = ctx\n        this.scoreThreshold = scoreThreshold\n    }\n\n\n\n    /**\n     * Draw the keypoints and skeleton on the video.\n     * @param poses A list of poses to render.\n     */\n    drawResults(poses) {\n        if (!poses || !this.ctx) return\n        for (const pose of poses) {\n            this.drawResult(pose);\n        }\n    }\n\n    /**\n      * Draw the keypoints and skeleton on the video.\n      * @param pose A pose with keypoints to render.\n      */\n    drawResult(pose) {\n        if (pose.keypoints != null) {\n            this.drawKeypoints(pose.keypoints, pose.id);\n            this.drawSkeleton(pose.keypoints, pose.id);\n        }\n    }\n\n    /**\n     * Draw the keypoints on the video.\n     * @param keypoints A list of keypoints.\n     */\n    drawKeypoints(keypoints, poseId) {\n        // Hardcoding MoveNet in\n        const keypointInd = poseDetection.util.getKeypointIndexBySide(poseDetection.SupportedModels.MoveNet)\n        this.ctx.fillStyle = 'Red';\n        this.ctx.strokeStyle = poseId != null ?\n            COLOR_PALETTE[poseId % 20] :\n            'White';;\n        this.ctx.lineWidth = LINE_WIDTH;\n\n        for (const i of keypointInd.middle) {\n            this.drawKeypoint(keypoints[i]);\n        }\n\n        this.ctx.fillStyle = 'Green';\n        for (const i of keypointInd.left) {\n            this.drawKeypoint(keypoints[i]);\n        }\n\n        this.ctx.fillStyle = 'Orange';\n        for (const i of keypointInd.right) {\n            this.drawKeypoint(keypoints[i]);\n        }\n    }\n\n    drawKeypoint(keypoint) {\n        // If score is null, just show the keypoint.\n        const score = keypoint.score != null ? keypoint.score : 1;\n\n        if (score >= this.scoreThreshold) {\n            const circle = new Path2D();\n            circle.arc(keypoint.x, keypoint.y, CIRCLE_RADIUS, 0, 2 * Math.PI);\n            this.ctx.fill(circle);\n            this.ctx.stroke(circle);\n        }\n    }\n\n    /**\n       * Draw the skeleton of a body on the video.\n       * @param keypoints A list of keypoints.\n       * @param poseId The ID of the pose\n       */\n    drawSkeleton(keypoints, poseId) {\n        // Each poseId is mapped to a color in the color palette.\n        const color = poseId != null ?\n            COLOR_PALETTE[poseId % 20] :\n            'White';\n        this.ctx.fillStyle = color;\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = LINE_WIDTH;\n\n        poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet).forEach(([\n            i, j\n        ]) => {\n            const kp1 = keypoints[i];\n            const kp2 = keypoints[j];\n\n            // If score is null, just show the keypoint.\n            const score1 = kp1.score != null ? kp1.score : 1;\n            const score2 = kp2.score != null ? kp2.score : 1;\n\n            if (score1 >= this.scoreThreshold && score2 >= this.scoreThreshold) {\n                this.ctx.beginPath();\n                this.ctx.moveTo(kp1.x, kp1.y);\n                this.ctx.lineTo(kp2.x, kp2.y);\n                this.ctx.stroke();\n            }\n        });\n    }\n}\n\nexport default DrawUtil"]},"metadata":{},"sourceType":"module"}