{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nvar wasmBatchNorm;\n\nfunction setup(backend) {\n  wasmBatchNorm = backend.wasm.cwrap(FusedBatchNorm, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction fusedBatchNorm(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var varianceEpsilon = attrs.varianceEpsilon;\n  var x = inputs.x,\n      mean = inputs.mean,\n      variance = inputs.variance,\n      offset = inputs.offset,\n      scale = inputs.scale;\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var meanId = backend.dataIdMap.get(mean.dataId).id;\n  var varianceId = backend.dataIdMap.get(variance.dataId).id;\n  var offsetId = offset != null ? backend.dataIdMap.get(offset.dataId).id : 0;\n  var scaleId = scale != null ? backend.dataIdMap.get(scale.dataId).id : 0;\n  var out = backend.makeOutput(x.shape, x.dtype); // Short-circuit zero-sized tensors.\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    return out;\n  }\n\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  wasmBatchNorm(xId, meanId, varianceId, offsetId, scaleId, varianceEpsilon, outId);\n  return out;\n}\n\nexport var fusedBatchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedBatchNorm\n};","map":{"version":3,"sources":["../../src/kernels/FusedBatchNorm.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,cAAR,EAAyG,IAAzG,QAAoH,uBAApH;AAIA,IAAI,aAAJ;;AAIA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,aAAa,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CACZ,cADY,EACI;AAAK;AADT,IAEZ,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,QAAnD,EAA6D,QAA7D,CAFY,CAAhB;AAGD;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAIC;AAAA,MACQ,OADR,GACkC,IADlC,CACQ,OADR;AAAA,MACiB,MADjB,GACkC,IADlC,CACiB,MADjB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,eAFR,GAE2B,KAF3B,CAEQ,eAFR;AAAA,MAGQ,CAHR,GAG4C,MAH5C,CAGQ,CAHR;AAAA,MAGW,IAHX,GAG4C,MAH5C,CAGW,IAHX;AAAA,MAGiB,QAHjB,GAG4C,MAH5C,CAGiB,QAHjB;AAAA,MAG2B,MAH3B,GAG4C,MAH5C,CAG2B,MAH3B;AAAA,MAGmC,KAHnC,GAG4C,MAH5C,CAGmC,KAHnC;AAIC,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,MAAM,MAAM,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,IAAI,CAAC,MAA3B,EAAmC,EAAlD;AACA,MAAM,UAAU,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,QAAQ,CAAC,MAA/B,EAAuC,EAA1D;AACA,MAAM,QAAQ,GAAG,MAAM,IAAI,IAAV,GAAiB,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,MAAM,CAAC,MAA7B,EAAqC,EAAtD,GAA2D,CAA5E;AACA,MAAM,OAAO,GAAG,KAAK,IAAI,IAAT,GAAgB,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,KAAK,CAAC,MAA5B,EAAoC,EAApD,GAAyD,CAAzE;AAEA,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAC,CAAC,KAArB,EAA4B,CAAC,CAAC,KAA9B,CAAZ,CAVD,CAWC;;AACA,MAAI,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,MAAgC,CAApC,EAAuC;AACrC,WAAO,GAAP;AACD;;AAED,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AAEA,EAAA,aAAa,CACT,GADS,EACJ,MADI,EACI,UADJ,EACgB,QADhB,EAC0B,OAD1B,EACmC,eADnC,EACoD,KADpD,CAAb;AAEA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,oBAAoB,GAAiB;AAChD,EAAA,UAAU,EAAE,cADoC;AAEhD,EAAA,WAAW,EAAE,MAFmC;AAGhD,EAAA,SAAS,EAAE,KAHqC;AAIhD,EAAA,UAAU,EAAE;AAJoC,CAA3C","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmBatchNorm: (\n    xId: number, meanId: number, varianceId: number, offsetId: number,\n    scaleId: number, varianceEpsilon: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmBatchNorm = backend.wasm.cwrap(\n      FusedBatchNorm, null /* void */,\n      ['number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction fusedBatchNorm(args: {\n  backend: BackendWasm,\n  inputs: FusedBatchNormInputs,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {varianceEpsilon} = attrs;\n  const {x, mean, variance, offset, scale} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const meanId = backend.dataIdMap.get(mean.dataId).id;\n  const varianceId = backend.dataIdMap.get(variance.dataId).id;\n  const offsetId = offset != null ? backend.dataIdMap.get(offset.dataId).id : 0;\n  const scaleId = scale != null ? backend.dataIdMap.get(scale.dataId).id : 0;\n\n  const out = backend.makeOutput(x.shape, x.dtype);\n  // Short-circuit zero-sized tensors.\n  if (util.sizeFromShape(x.shape) === 0) {\n    return out;\n  }\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  wasmBatchNorm(\n      xId, meanId, varianceId, offsetId, scaleId, varianceEpsilon, outId);\n  return out;\n}\n\nexport const fusedBatchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedBatchNorm as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}