{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Step } from '@tensorflow/tfjs-core';\nvar wasmStep;\n\nfunction setup(backend) {\n  wasmStep = backend.wasm.cwrap(Step, null\n  /*void*/\n  , ['number', 'number', 'number']);\n}\n\nfunction step(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var alpha = attrs.alpha;\n  var x = inputs.x;\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var out = backend.makeOutput(x.shape, x.dtype);\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  wasmStep(xId, alpha, outId);\n  return out;\n}\n\nexport var stepConfig = {\n  kernelName: Step,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: step\n};","map":{"version":3,"sources":["../../src/kernels/Step.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,IAAlC,QAAgF,uBAAhF;AAIA,IAAI,QAAJ;;AAEA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,IAAnB,EAAyB;AAAK;AAA9B,IAAwC,CACjD,QADiD,EAEjD,QAFiD,EAGjD,QAHiD,CAAxC,CAAX;AAKD;;AAED,SAAS,IAAT,CACI,IADJ,EACsE;AAAA,MAE7D,OAF6D,GAEnC,IAFmC,CAE7D,OAF6D;AAAA,MAEpD,MAFoD,GAEnC,IAFmC,CAEpD,MAFoD;AAAA,MAE5C,KAF4C,GAEnC,IAFmC,CAE5C,KAF4C;AAAA,MAG7D,KAH6D,GAGpD,KAHoD,CAG7D,KAH6D;AAAA,MAI7D,CAJ6D,GAIxD,MAJwD,CAI7D,CAJ6D;AAKpE,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AAEA,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAC,CAAC,KAArB,EAA4B,CAAC,CAAC,KAA9B,CAAZ;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,EAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,KAAb,CAAR;AACA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,MAFyB;AAGtC,EAAA,SAAS,EAAE,KAH2B;AAItC,EAAA,UAAU,EAAE;AAJ0B,CAAjC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, StepInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmStep: (xId: number, alpha: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmStep = backend.wasm.cwrap(Step, null /*void*/, [\n    'number',  // x_id\n    'number',  // alpha\n    'number',  // out_id\n  ]);\n}\n\nfunction step(\n    args: {backend: BackendWasm, inputs: StepInputs, attrs: StepAttrs}):\n    TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {alpha} = attrs;\n  const {x} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmStep(xId, alpha, outId);\n  return out;\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: step as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}