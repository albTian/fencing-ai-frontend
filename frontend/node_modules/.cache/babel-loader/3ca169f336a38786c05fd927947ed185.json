{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scatter_util, ScatterNd, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmScatterNd;\n\nfunction setup(backend) {\n  wasmScatterNd = backend.wasm.cwrap(ScatterNd, null\n  /*void*/\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'array', 'number', 'number' // outId\n  ]);\n}\n\nfunction scatterNd(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const out = backend.makeOutput(shape, updates.dtype);\n\n  if (util.sizeFromShape(shape) === 0) {\n    return out;\n  }\n\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = scatter_util.calculateShapes(updates, indices, shape);\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n  const updatesData = backend.dataIdMap.get(updates.dataId);\n  const updatesId = updatesData.id;\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmScatterNd(indicesId, updatesId, CppDType[updates.dtype], sliceRank, numUpdates, sliceSize, stridesBytes, outputSize, outId);\n  return out;\n}\n\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: scatterNd\n};","map":{"version":3,"sources":["../../src/kernels/ScatterNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,YAAlC,EAAgD,SAAhD,EAAwG,IAAxG,QAAmH,uBAAnH;AAIA,SAAQ,QAAR,QAAuB,SAAvB;AAEA,IAAI,aAAJ;;AAKA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,aAAa,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,SAAnB,EAA8B;AAAK;AAAnC,IAA6C,CAC3D,QAD2D,EAE3D,QAF2D,EAG3D,QAH2D,EAI3D,QAJ2D,EAK3D,QAL2D,EAM3D,QAN2D,EAO3D,OAP2D,EAQ3D,QAR2D,EAS3D,QAT2D,CAShD;AATgD,GAA7C,CAAhB;AAWD;;AAED,SAAS,SAAT,CACI,IADJ,EAE8E;AAE5E,QAAM;AAAC,IAAA,OAAD;AAAU,IAAA,MAAV;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA,OAAD;AAAU,IAAA;AAAV,MAAqB,MAA3B;AACA,QAAM;AAAC,IAAA;AAAD,MAAU,KAAhB;AAEA,QAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,KAAnB,EAA0B,OAAO,CAAC,KAAlC,CAAZ;;AACA,MAAI,IAAI,CAAC,aAAL,CAAmB,KAAnB,MAA8B,CAAlC,EAAqC;AACnC,WAAO,GAAP;AACD;;AAED,QAAM;AAAC,IAAA,SAAD;AAAY,IAAA,UAAZ;AAAwB,IAAA,SAAxB;AAAmC,IAAA,OAAnC;AAA4C,IAAA;AAA5C,MACF,YAAY,CAAC,eAAb,CAA6B,OAA7B,EAAsC,OAAtC,EAA+C,KAA/C,CADJ;AAGA,QAAM,WAAW,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,OAAO,CAAC,MAA9B,CAApB;AACA,QAAM,SAAS,GAAG,WAAW,CAAC,EAA9B;AAEA,QAAM,WAAW,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,OAAO,CAAC,MAA9B,CAApB;AACA,QAAM,SAAS,GAAG,WAAW,CAAC,EAA9B;AAEA,QAAM,YAAY,GAAG,IAAI,UAAJ,CAAe,IAAI,UAAJ,CAAe,OAAf,EAAwB,MAAvC,CAArB;AAEA,QAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,EAAA,aAAa,CACT,SADS,EACE,SADF,EACa,QAAQ,CAAC,OAAO,CAAC,KAAT,CADrB,EACsC,SADtC,EACiD,UADjD,EAET,SAFS,EAEE,YAFF,EAEgB,UAFhB,EAE4B,KAF5B,CAAb;AAIA,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,MAF8B;AAG3C,EAAA,SAAS,EAAE,KAHgC;AAI3C,EAAA,UAAU,EAAE;AAJ+B,CAAtC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, scatter_util, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmScatterNd: (\n    indicesId: number, updatesId: number, dtype: CppDType, sliceRank: number,\n    numUpdates: number, sliceSize: number, strides: Uint8Array,\n    outputSize: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmScatterNd = backend.wasm.cwrap(ScatterNd, null /*void*/, [\n    'number',  // indicesId\n    'number',  // updatesId\n    'number',  // dtype\n    'number',  // sliceRank\n    'number',  // numUpdates\n    'number',  // sliceSize\n    'array',   // strides\n    'number',  // outputSize\n    'number'   // outId\n  ]);\n}\n\nfunction scatterNd(\n    args:\n        {backend: BackendWasm, inputs: ScatterNdInputs, attrs: ScatterNdAttrs}):\n    TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const out = backend.makeOutput(shape, updates.dtype);\n  if (util.sizeFromShape(shape) === 0) {\n    return out;\n  }\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      scatter_util.calculateShapes(updates, indices, shape);\n\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n\n  const updatesData = backend.dataIdMap.get(updates.dataId);\n  const updatesId = updatesData.id;\n\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmScatterNd(\n      indicesId, updatesId, CppDType[updates.dtype], sliceRank, numUpdates,\n      sliceSize, stridesBytes, outputSize, outId);\n\n  return out;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}