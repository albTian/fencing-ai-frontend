{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softmax, util } from '@tensorflow/tfjs-core';\nvar wasmFunc;\n\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(Softmax, null\n  /* void */\n  , ['number', 'number', 'number', 'number' // batch\n  ]);\n}\n\nfunction softmax(args) {\n  var backend = args.backend,\n      logits = args.inputs.logits,\n      dim = args.attrs.dim;\n  var xId = backend.dataIdMap.get(logits.dataId).id;\n  var out = backend.makeOutput(logits.shape, logits.dtype);\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  var channels = logits.shape[dim];\n  var batch = util.sizeFromShape(logits.shape) / channels; // Short-circuit zero-sized tensors.\n\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n\n  wasmFunc(xId, outId, channels, batch);\n  return out;\n}\n\nexport var softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: softmax\n};","map":{"version":3,"sources":["../../src/kernels/Softmax.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,OAAlC,EAAoF,IAApF,QAA+F,uBAA/F;AAIA,IAAI,QAAJ;;AAGA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,OAAnB,EAA4B;AAAK;AAAjC,IAA6C,CACtD,QADsD,EAEtD,QAFsD,EAGtD,QAHsD,EAItD,QAJsD,CAI3C;AAJ2C,GAA7C,CAAX;AAMD;;AAED,SAAS,OAAT,CACI,IADJ,EAC4E;AAAA,MAEnE,OAFmE,GAExB,IAFwB,CAEnE,OAFmE;AAAA,MAEjD,MAFiD,GAExB,IAFwB,CAE1D,MAF0D,CAEjD,MAFiD;AAAA,MAEhC,GAFgC,GAExB,IAFwB,CAExC,KAFwC,CAEhC,GAFgC;AAG1E,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,MAAM,CAAC,MAA7B,EAAqC,EAAjD;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,MAAM,CAAC,KAA1B,EAAiC,MAAM,CAAC,KAAxC,CAAZ;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AAEA,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAP,CAAa,GAAb,CAAjB;AACA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,KAA1B,IAAmC,QAAjD,CAR0E,CAU1E;;AACA,MAAI,IAAI,CAAC,aAAL,CAAmB,GAAG,CAAC,KAAvB,MAAkC,CAAtC,EAAyC;AACvC,WAAO,GAAP;AACD;;AAED,EAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,QAAb,EAAuB,KAAvB,CAAR;AACA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,MAF4B;AAGzC,EAAA,SAAS,EAAE,KAH8B;AAIzC,EAAA,UAAU,EAAE;AAJ6B,CAApC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmFunc: (xId: number, outId: number, channels: number, batch: number) =>\n    void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(Softmax, null /* void */, [\n    'number',  // xId\n    'number',  // outId\n    'number',  // channels\n    'number'   // batch\n  ]);\n}\n\nfunction softmax(\n    args: {backend: BackendWasm, inputs: SoftmaxInputs, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {backend, inputs: {logits}, attrs: {dim}} = args;\n  const xId = backend.dataIdMap.get(logits.dataId).id;\n  const out = backend.makeOutput(logits.shape, logits.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const channels = logits.shape[dim];\n  const batch = util.sizeFromShape(logits.shape) / channels;\n\n  // Short-circuit zero-sized tensors.\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n\n  wasmFunc(xId, outId, channels, batch);\n  return out;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: softmax as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}