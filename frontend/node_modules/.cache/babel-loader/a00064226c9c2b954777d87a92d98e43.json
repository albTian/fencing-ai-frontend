{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nlet wasmMean;\n\nfunction setup(backend) {\n  wasmMean = backend.wasm.cwrap(Mean, null\n  /*void*/\n  , ['number, number, number']);\n}\n\nexport function mean(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n  const {\n    transposed,\n    axes,\n    originalAxes,\n    inputWasTransposed\n  } = permuteAxesAndTranspose(x, axis, backend);\n  let reductionAxes = axes;\n\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, input.shape.length);\n    }\n  }\n\n  backend_util.assertAxesAreInnerMostDims('mean', reductionAxes, input.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(input.shape, reductionAxes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  let castedInput = input;\n\n  if (input.dtype !== 'float32') {\n    castedInput = cast({\n      backend,\n      inputs: {\n        x: input\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    inputId = backend.dataIdMap.get(castedInput.dataId).id;\n  }\n\n  const out = backend.makeOutput(outShape, 'float32');\n\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmMean(inputId, reduceSize, outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  if (input.dtype !== 'float32') {\n    backend.disposeData(castedInput.dataId);\n  }\n\n  return out;\n}\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: mean\n};","map":{"version":3,"sources":["../../src/kernels/Mean.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {cast} from './Cast';\n\nimport {permuteAxesAndTranspose} from './kernel_utils';\n\nlet wasmMean: (xId: number, reduceSize: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmMean =\n      backend.wasm.cwrap(Mean, null /*void*/, ['number, number, number']);\n}\n\nexport function mean(\n    args: {backend: BackendWasm, inputs: MeanInputs, attrs: MeanAttrs}):\n    TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {axis, keepDims} = attrs;\n  const {x} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n\n  const {transposed, axes, originalAxes, inputWasTransposed} =\n      permuteAxesAndTranspose(x, axis, backend);\n\n  let reductionAxes = axes;\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util.getInnerMostAxes(\n          reductionAxes.length, input.shape.length);\n    }\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'mean', reductionAxes, input.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, reductionAxes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  let castedInput = input;\n  if (input.dtype !== 'float32') {\n    castedInput =\n        cast({backend, inputs: {x: input}, attrs: {dtype: 'float32'}});\n    inputId = backend.dataIdMap.get(castedInput.dataId).id;\n  }\n\n  const out = backend.makeOutput(outShape, 'float32');\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmMean(inputId, reduceSize, outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  if (input.dtype !== 'float32') {\n    backend.disposeData(castedInput.dataId);\n  }\n\n  return out;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: mean as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}