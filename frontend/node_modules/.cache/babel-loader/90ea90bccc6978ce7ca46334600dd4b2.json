{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LeakyRelu, util } from '@tensorflow/tfjs-core';\nvar wasmFunc;\n\nfunction setupFunc(backend) {\n  wasmFunc = backend.wasm.cwrap(LeakyRelu, null\n  /* void */\n  , ['number', 'number', 'number' // out_id\n  ]);\n}\n\nexport function leakyRelu(args) {\n  var x = args.inputs.x,\n      alpha = args.attrs.alpha,\n      backend = args.backend;\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var out = backend.makeOutput(x.shape, x.dtype);\n\n  if (util.sizeFromShape(x.shape) !== 0) {\n    var outId = backend.dataIdMap.get(out.dataId).id;\n    wasmFunc(xId, alpha, outId);\n  }\n\n  return out;\n}\nexport var leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'wasm',\n  setupFunc: setupFunc,\n  kernelFunc: leakyRelu\n};","map":{"version":3,"sources":["../../src/kernels/LeakyRelu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,SAAlC,EAA8E,IAA9E,QAAyF,uBAAzF;AAKA,IAAI,QAAJ;;AAEA,SAAS,SAAT,CAAmB,OAAnB,EAAuC;AACrC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,SAAnB,EAA8B;AAAK;AAAnC,IAA+C,CACxD,QADwD,EAExD,QAFwD,EAGxD,QAHwD,CAG7C;AAH6C,GAA/C,CAAX;AAKD;;AAED,OAAM,SAAU,SAAV,CACF,IADE,EAEwE;AAAA,MAE5D,CAF4D,GAE7B,IAF6B,CAErE,MAFqE,CAE5D,CAF4D;AAAA,MAEhD,KAFgD,GAE7B,IAF6B,CAExD,KAFwD,CAEhD,KAFgD;AAAA,MAExC,OAFwC,GAE7B,IAF6B,CAExC,OAFwC;AAI5E,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAC,CAAC,KAArB,EAA4B,CAAC,CAAC,KAA9B,CAAZ;;AAEA,MAAI,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,MAAgC,CAApC,EAAuC;AACrC,QAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,IAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,KAAb,CAAR;AACD;;AAED,SAAO,GAAP;AACD;AAED,OAAO,IAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,MAF8B;AAG3C,EAAA,SAAS,EAAT,SAH2C;AAI3C,EAAA,UAAU,EAAE;AAJ+B,CAAtC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, util} from '@tensorflow/tfjs-core';\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmFunc: (xId: number, leakyreluAlpha: number, outId: number) => void;\n\nfunction setupFunc(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(LeakyRelu, null /* void */, [\n    'number',  // x_id,\n    'number',  // leakyrelu_alpha\n    'number'   // out_id\n  ]);\n}\n\nexport function leakyRelu(\n    args:\n        {inputs: LeakyReluInputs, attrs: LeakyReluAttrs, backend: BackendWasm}):\n    TensorInfo {\n  const {inputs: {x}, attrs: {alpha}, backend} = args;\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(x.shape, x.dtype);\n\n  if (util.sizeFromShape(x.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmFunc(xId, alpha, outId);\n  }\n\n  return out;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: leakyRelu as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}