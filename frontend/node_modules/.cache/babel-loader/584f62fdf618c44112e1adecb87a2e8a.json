{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n  var inputs = args.inputs,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var shape = attrs.shape;\n  var xSize = util.sizeFromShape(x.shape);\n  var $shape = util.inferFromImplicitShape(shape, xSize);\n  util.assert(xSize === util.sizeFromShape($shape), function () {\n    return \"new shape: \".concat($shape, \", old shape: \").concat(x.shape, \". New shape and old \") + \"shape must have the same number of elements.\";\n  }); // Backend needs to track refCount for the dataId for reshape op\n\n  args.backend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport var reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'wasm',\n  kernelFunc: reshape\n};","map":{"version":3,"sources":["../../src/kernels/Reshape.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,OAAlC,EAAwE,IAAxE,QAAmF,uBAAnF;AAIA,OAAM,SAAU,OAAV,CACF,IADE,EACsE;AAAA,MACnE,MADmE,GAClD,IADkD,CACnE,MADmE;AAAA,MAC3D,KAD2D,GAClD,IADkD,CAC3D,KAD2D;AAAA,MAEnE,CAFmE,GAE9D,MAF8D,CAEnE,CAFmE;AAAA,MAGnE,KAHmE,GAG1D,KAH0D,CAGnE,KAHmE;AAK1E,MAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAd;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,sBAAL,CAA4B,KAA5B,EAAmC,KAAnC,CAAf;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,KAAK,IAAI,CAAC,aAAL,CAAmB,MAAnB,CADd,EAEI;AAAA,WAAM,qBAAc,MAAd,0BAAoC,CAAC,CAAC,KAAtC,0EAAN;AAAA,GAFJ,EAR0E,CAa1E;;AACA,EAAA,IAAI,CAAC,OAAL,CAAa,MAAb,CAAoB,CAAC,CAAC,MAAtB;AACA,SAAO;AAAC,IAAA,MAAM,EAAE,CAAC,CAAC,MAAX;AAAmB,IAAA,KAAK,EAAE,MAA1B;AAAkC,IAAA,KAAK,EAAE,CAAC,CAAC;AAA3C,GAAP;AACD;AAED,OAAO,IAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,MAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nexport function reshape(\n    args: {inputs: ReshapeInputs, attrs: ReshapeAttrs, backend: BackendWasm}) {\n  const {inputs, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n\n  util.assert(\n      xSize === util.sizeFromShape($shape),\n      () => `new shape: ${$shape}, old shape: ${x.shape}. New shape and old ` +\n          `shape must have the same number of elements.`);\n\n  // Backend needs to track refCount for the dataId for reshape op\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'wasm',\n  kernelFunc: reshape as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}