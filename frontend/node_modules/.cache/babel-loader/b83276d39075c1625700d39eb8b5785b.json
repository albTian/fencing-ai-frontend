{"ast":null,"code":"import _slicedToArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform, util } from '@tensorflow/tfjs-core';\nvar wasmTransform;\n\nfunction setup(backend) {\n  wasmTransform = backend.wasm.cwrap(Transform, null\n  /*void*/\n  , ['number', 'number', 'bool', 'number', 'number', 'number', 'number', 'number', 'number', 'array', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\n\nfunction transform(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var image = inputs.image,\n      transforms = inputs.transforms;\n  var interpolation = attrs.interpolation,\n      fillMode = attrs.fillMode,\n      fillValue = attrs.fillValue,\n      outputShape = attrs.outputShape;\n\n  var _image$shape = _slicedToArray(image.shape, 4),\n      batch = _image$shape[0],\n      imageHeight = _image$shape[1],\n      imageWidth = _image$shape[2],\n      numChannels = _image$shape[3];\n\n  var _ref = outputShape != null ? outputShape : [imageHeight, imageWidth],\n      _ref2 = _slicedToArray(_ref, 2),\n      outHeight = _ref2[0],\n      outWidth = _ref2[1];\n\n  var outShape = [batch, outHeight, outWidth, numChannels];\n  var strides = new Uint8Array(new Int32Array(util.computeStrides(image.shape)).buffer);\n  var out = backend.makeOutput(outShape, image.dtype);\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  var imageData = backend.dataIdMap.get(image.dataId);\n  var imageId = imageData.id;\n  var transformsData = backend.dataIdMap.get(transforms.dataId);\n  var transformsId = transformsData.id;\n  var interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  var fillModeId;\n\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n\n    case 'reflect':\n      fillModeId = 2;\n      break;\n\n    case 'wrap':\n      fillModeId = 3;\n      break;\n\n    case 'nearest':\n      fillModeId = 4;\n      break;\n\n    default:\n      fillModeId = 1;\n      break;\n  }\n\n  wasmTransform(imageId, transformsId, transforms.shape[0] > 1, batch, outHeight, outWidth, numChannels, imageWidth, imageHeight, strides, image.shape.length - 1, interpolationModeId, fillModeId, fillValue, outId);\n  return out;\n}\n\nexport var transformConfig = {\n  kernelName: Transform,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: transform\n};","map":{"version":3,"sources":["../../src/kernels/Transform.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmTransform: (\n    imageId: number, transformsId: number, isBatchTransform: boolean,\n    batch: number, outHeight: number, outWidth: number, numChannels: number,\n    imageWidth: number, imageHeight: number, strides: Uint8Array,\n    stridesLength: number, interpolationModeId: number, fillModeId: number,\n    fillValue: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmTransform = backend.wasm.cwrap(Transform, null /*void*/, [\n    'number',  // imageId\n    'number',  // transformsId\n    'bool',    // isBatchTransform\n    'number',  // batch\n    'number',  // outHeight\n    'number',  // outWidth\n    'number',  // numChannels\n    'number',  // imageWidth\n    'number',  // imageHeight\n    'array',   // strides\n    'number',  // stridesLength\n    'number',  // interpolationModeId\n    'number',  // fillModeId\n    'number',  // fillValue\n    'number'   // outId\n  ]);\n}\n\nfunction transform(\n    args:\n        {backend: BackendWasm, inputs: TransformInputs, attrs: TransformAttrs}):\n    TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n  const strides =\n      new Uint8Array(new Int32Array(util.computeStrides(image.shape)).buffer);\n\n  const out = backend.makeOutput(outShape, image.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const imageData = backend.dataIdMap.get(image.dataId);\n  const imageId = imageData.id;\n\n  const transformsData = backend.dataIdMap.get(transforms.dataId);\n  const transformsId = transformsData.id;\n\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n\n  wasmTransform(\n      imageId, transformsId, (transforms.shape[0] > 1), batch, outHeight,\n      outWidth, numChannels, imageWidth, imageHeight, strides,\n      image.shape.length - 1, interpolationModeId, fillModeId, fillValue,\n      outId);\n\n  return out;\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: transform as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}