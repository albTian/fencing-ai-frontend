{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nexport function createBinaryKernelConfig(kernelName, supportsFullBroadcast, dtype) {\n  let wasmFunc;\n\n  function setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(kernelName, null\n    /* void */\n    , ['number', 'array', 'number', 'number', 'array', 'number', 'number', 'number' // out_id\n    ]);\n  }\n\n  function kernelFunc(args) {\n    const {\n      backend,\n      inputs\n    } = args;\n    const {\n      a,\n      b\n    } = inputs;\n    const aId = backend.dataIdMap.get(a.dataId).id;\n    const bId = backend.dataIdMap.get(b.dataId).id;\n    const outputType = dtype != null ? dtype : a.dtype;\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const out = backend.makeOutput(newShape, outputType); // Short-circuit zero-sized tensors.\n\n    if (util.sizeFromShape(newShape) === 0) {\n      return out;\n    }\n\n    const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n    const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n\n    const kernelFunc = () => wasmFunc(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, CppDType[a.dtype], outId); // Currently only some float operations support full broadcast.\n\n\n    if (supportsFullBroadcast && a.dtype === 'float32') {\n      kernelFunc();\n      return out;\n    }\n\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n    const loopsOverAllOfA = aBroadcastDims.every((v, i) => v === i);\n    const loopsOverAllOfB = bBroadcastDims.every((v, i) => v === i);\n\n    if (loopsOverAllOfA && loopsOverAllOfB) {\n      kernelFunc();\n      return out;\n    } else {\n      throw new Error(`Broadcasting along outer dims is not yet ` + `supported for ${a.dtype} ${kernelName}.`);\n    }\n  }\n\n  return {\n    kernelName,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc\n  };\n}","map":{"version":3,"sources":["../../src/kernels/binary_kernel.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelConfig, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nexport function createBinaryKernelConfig(\n    kernelName: string, supportsFullBroadcast: boolean,\n    dtype?: DataType): KernelConfig {\n  let wasmFunc:\n      (aId: number, aShape: Uint8Array, aShapeLen: number, bId: number,\n       bShape: Uint8Array, bShapeLen: number, dtype: number, outId: number) =>\n          void;\n\n  function setupFunc(backend: BackendWasm): void {\n    wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, [\n      'number',  // a_id,\n      'array',   // a_shape\n      'number',  // a_shape.length\n      'number',  // b_id\n      'array',   // b_shape\n      'number',  // b_shape.length\n      'number',  // dtype\n      'number'   // out_id\n    ]);\n  }\n\n  function kernelFunc(args: {backend: BackendWasm, inputs: BinaryInputs}):\n      TensorInfo {\n    const {backend, inputs} = args;\n    const {a, b} = inputs;\n    const aId = backend.dataIdMap.get(a.dataId).id;\n    const bId = backend.dataIdMap.get(b.dataId).id;\n\n    const outputType = dtype != null ? dtype : a.dtype;\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const out = backend.makeOutput(newShape, outputType);\n\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(newShape) === 0) {\n      return out;\n    }\n\n    const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n    const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const kernelFunc = () => wasmFunc(\n        aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length,\n        CppDType[a.dtype], outId);\n\n    // Currently only some float operations support full broadcast.\n    if (supportsFullBroadcast && a.dtype === 'float32') {\n      kernelFunc();\n      return out;\n    }\n\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n    const loopsOverAllOfA = aBroadcastDims.every((v, i) => v === i);\n    const loopsOverAllOfB = bBroadcastDims.every((v, i) => v === i);\n    if (loopsOverAllOfA && loopsOverAllOfB) {\n      kernelFunc();\n      return out;\n    } else {\n      throw new Error(\n          `Broadcasting along outer dims is not yet ` +\n          `supported for ${a.dtype} ${kernelName}.`);\n    }\n  }\n\n  return {kernelName, backendName: 'wasm', setupFunc, kernelFunc};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}