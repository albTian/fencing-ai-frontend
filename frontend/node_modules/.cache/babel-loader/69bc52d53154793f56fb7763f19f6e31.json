{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\n\nexport function getLogicalCoordinatesFromFlatIndex(coords, shape) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  var strides = util.computeStrides(shape);\n  return strides.map(function (stride, i) {\n    var line1 = \"int \".concat(coords[i], \" = \").concat(index, \" / \").concat(stride);\n    var line2 = i === strides.length - 1 ? \"int \".concat(coords[i + 1], \" = \").concat(index, \" - \").concat(coords[i], \" * \").concat(stride) : \"index -= \".concat(coords[i], \" * \").concat(stride);\n    return \"\".concat(line1, \"; \").concat(line2, \";\");\n  }).join('');\n}\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(coords, shape) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  var strides = util.computeStrides(shape);\n  return strides.map(function (_, i) {\n    var line1 = \"int \".concat(coords[i], \" = \").concat(index, \" / outShapeStrides[\").concat(i, \"]\");\n    var line2 = i === strides.length - 1 ? \"int \".concat(coords[i + 1], \" = \").concat(index, \" - \").concat(coords[i], \" * outShapeStrides[\").concat(i, \"]\") : \"index -= \".concat(coords[i], \" * outShapeStrides[\").concat(i, \"]\");\n    return \"\".concat(line1, \"; \").concat(line2, \";\");\n  }).join('');\n} // Produces GLSL code that computes strides.\n\nfunction symbolicallyComputeStrides(indicesArr, variableName) {\n  var numCoords = indicesArr.length;\n  var shape = indicesArr.map(function (d) {\n    return \"\".concat(variableName, \"[\").concat(d, \"]\");\n  });\n  var strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n\n  for (var i = numCoords - 3; i >= 0; --i) {\n    strides[i] = \"(\".concat(strides[i + 1], \" * \").concat(shape[i + 1], \")\");\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(coords, variableName) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  var indicesArray = coords.map(function (_, i) {\n    return i;\n  });\n  var strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides.map(function (_, i) {\n    var line1 = \"int \".concat(coords[i], \" = \").concat(index, \" / \").concat(strides[i]);\n    var line2 = i === strides.length - 1 ? \"int \".concat(coords[i + 1], \" = \").concat(index, \" - \").concat(coords[i], \" * \").concat(strides[i]) : \"index -= \".concat(coords[i], \" * \").concat(strides[i]);\n    return \"\".concat(line1, \"; \").concat(line2, \";\");\n  }).join('');\n}\n\nfunction buildVec(x) {\n  if (x.length === 1) {\n    return \"\".concat(x[0]);\n  }\n\n  return \"vec\".concat(x.length, \"(\").concat(x.join(','), \")\");\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\n\n\nexport function dotify(x, y) {\n  if (x.length !== y.length) {\n    throw new Error(\"Vectors to be dotted must be of the same length -\" + \"got \".concat(x.length, \" and \").concat(y.length));\n  }\n\n  var slices = [];\n  var nearestVec4 = Math.floor(x.length / 4);\n  var nearestVec4Remainder = x.length % 4;\n\n  for (var i = 0; i < nearestVec4; i++) {\n    var xSlice = x.slice(i * 4, i * 4 + 4);\n    var ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(\"\".concat(buildVec(xSlice), \", \").concat(buildVec(ySlice)));\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    var _xSlice = x.slice(nearestVec4 * 4);\n\n    var _ySlice = y.slice(nearestVec4 * 4);\n\n    if (_xSlice.length === 1) {\n      _xSlice = _xSlice.map(function (d) {\n        return \"float(\".concat(d, \")\");\n      });\n      _ySlice = _ySlice.map(function (d) {\n        return \"float(\".concat(d, \")\");\n      });\n    }\n\n    slices.push(\"\".concat(buildVec(_xSlice), \", \").concat(buildVec(_ySlice)));\n  }\n\n  return slices.map(function (d, i) {\n    return \"dot(\".concat(d, \")\");\n  }).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\n\nexport function getFlatIndexFrom3D(shape) {\n  var strides = util.computeStrides(shape).map(function (d) {\n    return d.toString();\n  });\n  return \"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * \".concat(strides[0], \" + coords.y * \").concat(strides[1], \" + coords.z;\\n  }\\n\");\n}\nexport function getFlatIndexFrom3DOutput() {\n  return \"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\\n  }\\n\";\n}\nexport var ENCODE_FLOAT_SNIPPET = \"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\";","map":{"version":3,"sources":["../src/shader_compiler_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}