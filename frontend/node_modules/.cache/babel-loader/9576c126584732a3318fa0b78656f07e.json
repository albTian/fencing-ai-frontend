{"ast":null,"code":"import _classCallCheck from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\n\nvar StringNGramsOp = /*#__PURE__*/function () {\n  function StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    _classCallCheck(this, StringNGramsOp);\n\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  _createClass(StringNGramsOp, [{\n    key: \"getPadWidth\",\n    value: function getPadWidth(nGramWidth) {\n      // Ngrams can be padded with either a fixed pad width or a dynamic pad\n      // width depending on the 'padWidth' arg, but in no case should the padding\n      // ever be wider than 'nGramWidth' - 1.\n      return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n    }\n  }, {\n    key: \"getNumNGrams\",\n    value: function getNumNGrams(length, nGramWidth) {\n      var padWidth = this.getPadWidth(nGramWidth);\n      return Math.max(0, length + 2 * padWidth - nGramWidth + 1);\n    }\n  }, {\n    key: \"createNGrams\",\n    value: function createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n      var _this = this;\n\n      var _loop = function _loop(nGramIndex) {\n        var padWidth = _this.getPadWidth(nGramWidth);\n\n        var leftPadding = Math.max(0, padWidth - nGramIndex);\n        var rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n        var numTokens = nGramWidth - (leftPadding + rightPadding);\n        var dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth); // Calculate the total expected size of the nGram so we can reserve the\n        // correct amount of space in the string.\n\n        var nGramSize = 0; // Size of the left padding.\n\n        nGramSize += leftPadding * _this.leftPad.length; // Size of the tokens.\n\n        for (var n = 0; n < numTokens; ++n) {\n          nGramSize += data[dataStartIndex + n].length;\n        } // Size of the right padding.\n\n\n        nGramSize += rightPadding * _this.rightPad.length; // Size of the separators.\n\n        var numSeparators = leftPadding + rightPadding + numTokens - 1;\n        nGramSize += numSeparators * _this.separator.length; // Build the nGram.\n\n        output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n        var nGram = output[outputStartIndex + nGramIndex];\n        var nextNGramIndex = 0;\n\n        var appendToNGram = function appendToNGram(str) {\n          return str.forEach(function (value) {\n            return nGram[nextNGramIndex++] = value;\n          });\n        };\n\n        for (var _n = 0; _n < leftPadding; ++_n) {\n          appendToNGram(_this.leftPad);\n          appendToNGram(_this.separator);\n        } // Only output first numTokens - 1 pairs of data and separator\n\n\n        for (var _n2 = 0; _n2 < numTokens - 1; ++_n2) {\n          appendToNGram(data[dataStartIndex + _n2]);\n          appendToNGram(_this.separator);\n        } // Handle case when there are no tokens or no right padding as these\n        // can result in consecutive separators.\n\n\n        if (numTokens > 0) {\n          // If we have tokens, then output last and then pair each separator\n          // with the right padding that follows, to ensure nGram ends either with\n          // the token or with the right pad.\n          appendToNGram(data[dataStartIndex + numTokens - 1]);\n\n          for (var _n3 = 0; _n3 < rightPadding; ++_n3) {\n            appendToNGram(_this.separator);\n            appendToNGram(_this.rightPad);\n          }\n        } else {\n          // If we don't have tokens, then the last item inserted into the nGram\n          // has been the separator from the left padding loop above. Hence,\n          // output right pad and separator and make sure to finish with a\n          // padding, not a separator.\n          for (var _n4 = 0; _n4 < rightPadding - 1; ++_n4) {\n            appendToNGram(_this.rightPad);\n            appendToNGram(_this.separator);\n          }\n\n          appendToNGram(_this.rightPad);\n        }\n      };\n\n      for (var nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n        _loop(nGramIndex);\n      }\n    } // Data and splits together form the definition of the ragged tensor,\n    // where data is 1 dimensional and contains the values of the tensor\n    // and splits denotes the indices at which each row starts.\n\n  }, {\n    key: \"compute\",\n    value: function compute(data, splits) {\n      var _this2 = this;\n\n      // Validate that the splits are valid indices into data, only if there are\n      // splits specified.\n      var inputDataSize = data.length;\n      var splitsSize = splits.length;\n\n      if (splitsSize > 0) {\n        var prevSplit = splits[0];\n\n        if (prevSplit !== 0) {\n          throw new Error(\"First split value must be 0, got \".concat(prevSplit));\n        }\n\n        for (var i = 1; i < splitsSize; ++i) {\n          var validSplits = splits[i] >= prevSplit;\n          validSplits = validSplits && splits[i] <= inputDataSize;\n\n          if (!validSplits) {\n            throw new Error(\"Invalid split value \".concat(splits[i], \", must be in [\").concat(prevSplit, \", \").concat(inputDataSize, \"]\"));\n          }\n\n          prevSplit = splits[i];\n        }\n\n        if (prevSplit !== inputDataSize) {\n          throw new Error(\"Last split value must be data size. Expected \".concat(inputDataSize, \", got \").concat(prevSplit));\n        }\n      }\n\n      var numBatchItems = splitsSize - 1;\n      var nGramsSplits = util.getArrayFromDType('int32', splitsSize); // If there is no data or size, return an empty ragged tensor.\n\n      if (inputDataSize === 0 || splitsSize === 0) {\n        var empty = new Array(inputDataSize);\n\n        for (var _i = 0; _i <= numBatchItems; ++_i) {\n          nGramsSplits[_i] = 0;\n        }\n\n        return [empty, nGramsSplits];\n      }\n\n      nGramsSplits[0] = 0;\n\n      var _loop2 = function _loop2(_i2) {\n        var length = splits[_i2] - splits[_i2 - 1];\n        var numNGrams = 0;\n\n        _this2.nGramWidths.forEach(function (nGramWidth) {\n          numNGrams += _this2.getNumNGrams(length, nGramWidth);\n        });\n\n        if (_this2.preserveShort && length > 0 && numNGrams === 0) {\n          numNGrams = 1;\n        }\n\n        nGramsSplits[_i2] = nGramsSplits[_i2 - 1] + numNGrams;\n      };\n\n      for (var _i2 = 1; _i2 <= numBatchItems; ++_i2) {\n        _loop2(_i2);\n      }\n\n      var nGrams = new Array(nGramsSplits[numBatchItems]);\n\n      var _loop3 = function _loop3(_i3) {\n        var splitIndex = splits[_i3];\n        var outputStartIdx = nGramsSplits[_i3];\n\n        _this2.nGramWidths.forEach(function (nGramWidth) {\n          var length = splits[_i3 + 1] - splits[_i3];\n\n          var numNGrams = _this2.getNumNGrams(length, nGramWidth);\n\n          _this2.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n\n          outputStartIdx += numNGrams;\n        }); // If we're preserving short sequences, check to see if no sequence was\n        // generated by comparing the current output start idx to the original\n        // one (nGramSplitsdata). If no ngrams were generated, then they will\n        // be equal (since we increment outputStartIdx by numNGrams every\n        // time we create a set of ngrams.)\n\n\n        if (_this2.preserveShort && outputStartIdx === nGramsSplits[_i3]) {\n          var dataLength = splits[_i3 + 1] - splits[_i3]; // One legitimate reason to not have any ngrams when this.preserveShort\n          // is true is if the sequence itself is empty. In that case, move on.\n\n          if (dataLength === 0) {\n            return \"continue\";\n          } // We don't have to worry about dynamic padding sizes here: if padding\n          // was dynamic, every sequence would have had sufficient padding to\n          // generate at least one nGram.\n\n\n          var nGramWidth = dataLength + 2 * _this2.padWidth;\n          var numNGrams = 1;\n\n          _this2.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        }\n      };\n\n      for (var _i3 = 0; _i3 < numBatchItems; ++_i3) {\n        var _ret = _loop3(_i3);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      return [nGrams, nGramsSplits];\n    }\n  }]);\n\n  return StringNGramsOp;\n}();\n\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}