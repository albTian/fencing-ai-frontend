{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nimport { parseResultStruct } from './NonMaxSuppression_util';\nvar wasmFunc;\n\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(NonMaxSuppressionV5, 'number', // Result*\n  ['number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction kernelFunc(args) {\n  var backend = args.backend,\n      inputs = args.inputs,\n      attrs = args.attrs;\n  var iouThreshold = attrs.iouThreshold,\n      maxOutputSize = attrs.maxOutputSize,\n      scoreThreshold = attrs.scoreThreshold,\n      softNmsSigma = attrs.softNmsSigma;\n  var boxes = inputs.boxes,\n      scores = inputs.scores;\n  var boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  var scoresId = backend.dataIdMap.get(scores.dataId).id;\n  var resOffset = wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n\n  var _parseResultStruct = parseResultStruct(backend, resOffset),\n      pSelectedIndices = _parseResultStruct.pSelectedIndices,\n      selectedSize = _parseResultStruct.selectedSize,\n      pSelectedScores = _parseResultStruct.pSelectedScores,\n      pValidOutputs = _parseResultStruct.pValidOutputs; // Since we are not using validOutputs for V5, we have to delete it from the\n  // heap.\n\n\n  backend.wasm._free(pValidOutputs);\n\n  var selectedIndicesTensor = backend.makeOutput([selectedSize], 'int32', pSelectedIndices);\n  var selectedScoresTensor = backend.makeOutput([selectedSize], 'float32', pSelectedScores);\n  return [selectedIndicesTensor, selectedScoresTensor];\n}\n\nexport var nonMaxSuppressionV5Config = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: kernelFunc\n};","map":{"version":3,"sources":["../../src/kernels/NonMaxSuppressionV5.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,mBAAlC,QAA6H,uBAA7H;AAIA,SAAQ,iBAAR,QAAgC,0BAAhC;AAEA,IAAI,QAAJ;;AAKA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CACP,mBADO,EAEP,QAFO,EAEI;AACX,GACE,QADF,EAEE,QAFF,EAGE,QAHF,EAIE,QAJF,EAKE,QALF,EAME,QANF,CAHO,CAAX;AAWD;;AAED,SAAS,UAAT,CAAoB,IAApB,EAIC;AAAA,MACQ,OADR,GACkC,IADlC,CACQ,OADR;AAAA,MACiB,MADjB,GACkC,IADlC,CACiB,MADjB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,YAFR,GAEqE,KAFrE,CAEQ,YAFR;AAAA,MAEsB,aAFtB,GAEqE,KAFrE,CAEsB,aAFtB;AAAA,MAEqC,cAFrC,GAEqE,KAFrE,CAEqC,cAFrC;AAAA,MAEqD,YAFrD,GAEqE,KAFrE,CAEqD,YAFrD;AAAA,MAGQ,KAHR,GAGyB,MAHzB,CAGQ,KAHR;AAAA,MAGe,MAHf,GAGyB,MAHzB,CAGe,MAHf;AAKC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,KAAK,CAAC,MAA5B,EAAoC,EAApD;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,MAAM,CAAC,MAA7B,EAAqC,EAAtD;AAEA,MAAM,SAAS,GAAG,QAAQ,CACtB,OADsB,EACb,QADa,EACH,aADG,EACY,YADZ,EAC0B,cAD1B,EAEtB,YAFsB,CAA1B;;AARD,2BAaK,iBAAiB,CAAC,OAAD,EAAU,SAAV,CAbtB;AAAA,MAYQ,gBAZR,sBAYQ,gBAZR;AAAA,MAY0B,YAZ1B,sBAY0B,YAZ1B;AAAA,MAYwC,eAZxC,sBAYwC,eAZxC;AAAA,MAYyD,aAZzD,sBAYyD,aAZzD,EAeC;AACA;;;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,aAAnB;;AAEA,MAAM,qBAAqB,GACvB,OAAO,CAAC,UAAR,CAAmB,CAAC,YAAD,CAAnB,EAAmC,OAAnC,EAA4C,gBAA5C,CADJ;AAEA,MAAM,oBAAoB,GACtB,OAAO,CAAC,UAAR,CAAmB,CAAC,YAAD,CAAnB,EAAmC,SAAnC,EAA8C,eAA9C,CADJ;AAGA,SAAO,CAAC,qBAAD,EAAwB,oBAAxB,CAAP;AACD;;AAED,OAAO,IAAM,yBAAyB,GAAiB;AACrD,EAAA,UAAU,EAAE,mBADyC;AAErD,EAAA,WAAW,EAAE,MAFwC;AAGrD,EAAA,SAAS,EAAE,KAH0C;AAIrD,EAAA,UAAU,EAAE;AAJyC,CAAhD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {parseResultStruct} from './NonMaxSuppression_util';\n\nlet wasmFunc:\n    (boxesId: number, scoresId: number, maxOutputSize: number,\n     iouThreshold: number, scoreThreshold: number, softNmsSigma: number) =>\n        number;\n\nfunction setup(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(\n      NonMaxSuppressionV5,\n      'number',  // Result*\n      [\n        'number',  // boxesId\n        'number',  // scoresId\n        'number',  // maxOutputSize\n        'number',  // iouThreshold\n        'number',  // scoreThreshold\n        'number',  // softNmsSigma\n      ]);\n}\n\nfunction kernelFunc(args: {\n  backend: BackendWasm,\n  inputs: NonMaxSuppressionV5Inputs,\n  attrs: NonMaxSuppressionV5Attrs\n}): TensorInfo[] {\n  const {backend, inputs, attrs} = args;\n  const {iouThreshold, maxOutputSize, scoreThreshold, softNmsSigma} = attrs;\n  const {boxes, scores} = inputs;\n\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend.dataIdMap.get(scores.dataId).id;\n\n  const resOffset = wasmFunc(\n      boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n\n  const {pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs} =\n      parseResultStruct(backend, resOffset);\n\n  // Since we are not using validOutputs for V5, we have to delete it from the\n  // heap.\n  backend.wasm._free(pValidOutputs);\n\n  const selectedIndicesTensor =\n      backend.makeOutput([selectedSize], 'int32', pSelectedIndices);\n  const selectedScoresTensor =\n      backend.makeOutput([selectedSize], 'float32', pSelectedScores);\n\n  return [selectedIndicesTensor, selectedScoresTensor];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: kernelFunc as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}