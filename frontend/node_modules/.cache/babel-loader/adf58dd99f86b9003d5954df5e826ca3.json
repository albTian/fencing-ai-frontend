{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative } from '@tensorflow/tfjs-core';\nlet wasmDepthwiseConv2d;\n\nfunction setup(backend) {\n  wasmDepthwiseConv2d = backend.wasm.cwrap(DepthwiseConv2dNative, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction depthwiseConv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const $dilations = dilations == null ? [1, 1] : dilations;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmDepthwiseConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\n\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthwiseConv2d\n};","map":{"version":3,"sources":["../../src/kernels/DepthwiseConv2dNative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, Tensor4D} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmDepthwiseConv2d: (\n    xId: number, batchSize: number, inputHeight: number, inputWidth: number,\n    filterId: number, filterHeight: number, filterWidth: number, padTop: number,\n    padRight: number, padBottom: number, padLeft: number, isSamePad: number,\n    dilationHeight: number, dilationWidth: number, strideHeight: number,\n    strideWidth: number, inputChannels: number, outputChannels: number,\n    outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmDepthwiseConv2d =\n      backend.wasm.cwrap(DepthwiseConv2dNative, null /* void */, [\n        'number',  // xId\n        'number',  // batchSize\n        'number',  // inputHeight\n        'number',  // inputWidth\n        'number',  // filterId\n        'number',  // filterHeight\n        'number',  // filterWidth\n        'number',  // padTop\n        'number',  // padRight\n        'number',  // padBottom\n        'number',  // padLeft\n        'number',  // isSamePad\n        'number',  // dilationHeight\n        'number',  // dilationWidth\n        'number',  // strideHeight\n        'number',  // strideWidth\n        'number',  // inputChannels\n        'number',  // outputChannels\n        'number',  // outId\n      ]);\n}\n\nfunction depthwiseConv2d(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: BackendWasm,\n  attrs: DepthwiseConv2dNativeAttrs\n}) {\n  const {inputs, attrs, backend} = args;\n\n  const {x, filter} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n\n  const {strides, dilations, pad, dimRoundingMode} = attrs;\n\n  const $dilations = dilations == null ? [1, 1] : dilations;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      (x as Tensor4D).shape, (filter as Tensor4D).shape, strides,\n      ($dilations as number | [number, number]), pad, dimRoundingMode,\n      true /* depthwise */);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(\n        `wasm backend DepthwiseConv2dNative does not support dataFormat:'` +\n        `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmDepthwiseConv2d(\n      xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight,\n      filterWidth, padTop, padRight, padBottom, padLeft, isSamePad,\n      dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels,\n      outputChannels, outId);\n  return out;\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthwiseConv2d as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}