{"ast":null,"code":"import * as poseDetection from '@tensorflow-models/pose-detection';\nconst COLOR_PALETTE = ['#ffffff', '#800000', '#469990', '#e6194b', '#42d4f4', '#fabed4', '#aaffc3', '#9a6324', '#000075', '#f58231', '#4363d8', '#ffd8b1', '#dcbeff', '#808000', '#ffe119', '#911eb4', '#bfef45', '#f032e6', '#3cb44b', '#a9a9a9'];\n/**\n * Draw the keypoints and skeleton on the video.\n * @param poses A list of poses to render.\n * @param ctx The context object to draw on\n * @param scoreThreshold The minimum score needed\n */\n\nfunction drawResults(poses, ctx, scoreThreshold) {\n  if (!poses || !ctx) return;\n\n  for (const pose of poses) {\n    drawResult(pose, ctx, scoreThreshold);\n  }\n}\n/**\n  * Draw the keypoints and skeleton on the video.\n  * @param pose A pose with keypoints to render.\n  */\n\n\nfunction drawResult(pose, ctx, scoreThreshold) {\n  if (pose.keypoints != null) {\n    drawKeypoints(pose.keypoints, ctx, scoreThreshold);\n    drawSkeleton(pose.keypoints, pose.id, ctx, scoreThreshold);\n  }\n}\n/**\n * Draw the keypoints on the video.\n * @param keypoints A list of keypoints.\n */\n\n\nfunction drawKeypoints(keypoints, ctx, scoreThreshold) {\n  // Hardcoding MoveNet in\n  const keypointInd = poseDetection.util.getKeypointIndexBySide(poseDetection.SupportedModels.MoveNet);\n  ctx.fillStyle = 'Red';\n  ctx.strokeStyle = 'White';\n  ctx.lineWidth = 2;\n\n  for (const i of keypointInd.middle) {\n    drawKeypoint(keypoints[i], ctx, scoreThreshold);\n  }\n\n  ctx.fillStyle = 'Green';\n\n  for (const i of keypointInd.left) {\n    drawKeypoint(keypoints[i], ctx, scoreThreshold);\n  }\n\n  ctx.fillStyle = 'Orange';\n\n  for (const i of keypointInd.right) {\n    drawKeypoint(keypoints[i], ctx, scoreThreshold);\n  }\n}\n\nfunction drawKeypoint(keypoint, ctx, scoreThreshold) {\n  // If score is null, just show the keypoint.\n  const score = keypoint.score != null ? keypoint.score : 1;\n  const minScore = scoreThreshold || 0;\n\n  if (score >= minScore) {\n    const circle = new Path2D();\n    circle.arc(keypoint.x, keypoint.y, 3, 0, 2 * Math.PI);\n    ctx.fill(circle);\n    ctx.stroke(circle);\n  }\n}\n/**\n   * Draw the skeleton of a body on the video.\n   * @param keypoints A list of keypoints.\n   * @param poseId The ID of the pose\n   */\n\n\nfunction drawSkeleton(keypoints, poseId, ctx, scoreThreshold) {\n  // Each poseId is mapped to a color in the color palette.\n  const color = poseId != null ? COLOR_PALETTE[poseId % 20] : 'White';\n  ctx.fillStyle = color;\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n  poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet).forEach(([i, j]) => {\n    const kp1 = keypoints[i];\n    const kp2 = keypoints[j]; // If score is null, just show the keypoint.\n\n    const score1 = kp1.score != null ? kp1.score : 1;\n    const score2 = kp2.score != null ? kp2.score : 1;\n\n    if (score1 >= scoreThreshold && score2 >= scoreThreshold) {\n      ctx.beginPath();\n      ctx.moveTo(kp1.x, kp1.y);\n      ctx.lineTo(kp2.x, kp2.y);\n      ctx.stroke();\n    }\n  });\n}\n\nexport { drawResults };","map":{"version":3,"sources":["/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/src/utils/drawUtils.js"],"names":["poseDetection","COLOR_PALETTE","drawResults","poses","ctx","scoreThreshold","pose","drawResult","keypoints","drawKeypoints","drawSkeleton","id","keypointInd","util","getKeypointIndexBySide","SupportedModels","MoveNet","fillStyle","strokeStyle","lineWidth","i","middle","drawKeypoint","left","right","keypoint","score","minScore","circle","Path2D","arc","x","y","Math","PI","fill","stroke","poseId","color","getAdjacentPairs","forEach","j","kp1","kp2","score1","score2","beginPath","moveTo","lineTo"],"mappings":"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","sourcesContent":["import * as poseDetection from '@tensorflow-models/pose-detection'\n\nconst COLOR_PALETTE = [\n    '#ffffff', '#800000', '#469990', '#e6194b', '#42d4f4', '#fabed4', '#aaffc3',\n    '#9a6324', '#000075', '#f58231', '#4363d8', '#ffd8b1', '#dcbeff', '#808000',\n    '#ffe119', '#911eb4', '#bfef45', '#f032e6', '#3cb44b', '#a9a9a9'\n];\n\n/**\n * Draw the keypoints and skeleton on the video.\n * @param poses A list of poses to render.\n * @param ctx The context object to draw on\n * @param scoreThreshold The minimum score needed\n */\nfunction drawResults(poses, ctx, scoreThreshold) {\n    if (!poses || !ctx) return\n    for (const pose of poses) {\n        drawResult(pose, ctx, scoreThreshold);\n    }\n}\n\n/**\n  * Draw the keypoints and skeleton on the video.\n  * @param pose A pose with keypoints to render.\n  */\nfunction drawResult(pose, ctx, scoreThreshold) {\n    if (pose.keypoints != null) {\n        drawKeypoints(pose.keypoints, ctx, scoreThreshold);\n        drawSkeleton(pose.keypoints, pose.id, ctx, scoreThreshold);\n    }\n}\n\n/**\n * Draw the keypoints on the video.\n * @param keypoints A list of keypoints.\n */\nfunction drawKeypoints(keypoints, ctx, scoreThreshold) {\n    // Hardcoding MoveNet in\n    const keypointInd = poseDetection.util.getKeypointIndexBySide(poseDetection.SupportedModels.MoveNet)\n    ctx.fillStyle = 'Red';\n    ctx.strokeStyle = 'White';\n    ctx.lineWidth = 2;\n\n    for (const i of keypointInd.middle) {\n        drawKeypoint(keypoints[i], ctx, scoreThreshold);\n    }\n\n    ctx.fillStyle = 'Green';\n    for (const i of keypointInd.left) {\n        drawKeypoint(keypoints[i], ctx, scoreThreshold);\n    }\n\n    ctx.fillStyle = 'Orange';\n    for (const i of keypointInd.right) {\n        drawKeypoint(keypoints[i], ctx, scoreThreshold);\n    }\n}\n\nfunction drawKeypoint(keypoint, ctx, scoreThreshold) {\n    // If score is null, just show the keypoint.\n    const score = keypoint.score != null ? keypoint.score : 1;\n    const minScore = scoreThreshold || 0;\n\n    if (score >= minScore) {\n        const circle = new Path2D();\n        circle.arc(keypoint.x, keypoint.y, 3, 0, 2 * Math.PI);\n        ctx.fill(circle);\n        ctx.stroke(circle);\n    }\n}\n\n/**\n   * Draw the skeleton of a body on the video.\n   * @param keypoints A list of keypoints.\n   * @param poseId The ID of the pose\n   */\nfunction drawSkeleton(keypoints, poseId, ctx, scoreThreshold) {\n    // Each poseId is mapped to a color in the color palette.\n    const color = poseId != null ?\n        COLOR_PALETTE[poseId % 20] :\n        'White';\n    ctx.fillStyle = color;\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 1;\n\n    poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet).forEach(([\n        i, j\n    ]) => {\n        const kp1 = keypoints[i];\n        const kp2 = keypoints[j];\n\n        // If score is null, just show the keypoint.\n        const score1 = kp1.score != null ? kp1.score : 1;\n        const score2 = kp2.score != null ? kp2.score : 1;\n\n        if (score1 >= scoreThreshold && score2 >= scoreThreshold) {\n            ctx.beginPath();\n            ctx.moveTo(kp1.x, kp1.y);\n            ctx.lineTo(kp2.x, kp2.y);\n            ctx.stroke();\n        }\n    });\n}\n\nexport { drawResults }"]},"metadata":{},"sourceType":"module"}