{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { CppDType } from './types';\nlet wasmTranspose;\n\nfunction setup(backend) {\n  wasmTranspose = backend.wasm.cwrap(Transpose, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'number', 'array', 'number']);\n}\n\nexport function transpose(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args; // Reduce any dimensions with size one. Lower-rank transpose kernel performs\n  // better due to simpler memory access pattern.\n\n  const [reducedShape, perm] = removeOneSizeDims(inputs.x.shape, attrs.perm);\n  let permIsNoOp = true;\n\n  for (let i = 0; i < perm.length; i++) {\n    if (perm[i] !== i) {\n      permIsNoOp = false;\n    }\n  }\n\n  const outShape = computeOutShape(inputs.x.shape, attrs.perm);\n  const x = {\n    dataId: inputs.x.dataId,\n    shape: reducedShape,\n    dtype: inputs.x.dtype\n  };\n\n  if (permIsNoOp) {\n    const cloned = identity({\n      inputs,\n      backend\n    });\n    cloned.shape = outShape;\n    return cloned;\n  }\n\n  const out = backend.makeOutput(outShape, x.dtype);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const permBytes = new Uint8Array(new Int32Array(perm).buffer);\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  wasmTranspose(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], outId, permBytes, perm.length);\n  return out;\n}\n\nfunction computeOutShape(inShape, perm) {\n  const outShape = new Array(inShape.length);\n\n  for (let i = 0; i < outShape.length; i++) {\n    outShape[i] = inShape[perm[i]];\n  }\n\n  return outShape;\n}\n\nfunction removeOneSizeDims(shape, perm) {\n  const newShape = [];\n  const newPerm = [];\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n    }\n\n    if (shape[perm[i]] !== 1) {\n      newPerm.push(perm[i]);\n    }\n  }\n\n  for (let i = 0; i < newPerm.length; ++i) {\n    let minValIdx = -1;\n\n    for (let j = 0; j < newPerm.length; ++j) {\n      if (newPerm[j] >= i && (minValIdx === -1 || newPerm[minValIdx] > newPerm[j])) {\n        minValIdx = j;\n      }\n    }\n\n    newPerm[minValIdx] = i;\n  }\n\n  return [newShape, newPerm];\n}\n\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'wasm',\n  kernelFunc: transpose,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/Transpose.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {identity} from './Identity';\nimport {CppDType} from './types';\n\nlet wasmTranspose: (\n    xId: number, xShape: Uint8Array, xShapeLength: number, dtype: CppDType,\n    outId: number, perm: Uint8Array, permLength: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmTranspose = backend.wasm.cwrap(Transpose, null /* void */, [\n    'number',  // xId\n    'array',   // x.shape\n    'number',  // x.shape.length\n    'number',  // dtype\n    'number',  // outId\n    'array',   // perm\n    'number',  // perm.length\n  ]);\n}\n\nexport function transpose(\n    args:\n        {inputs: TransposeInputs, backend: BackendWasm, attrs: TransposeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  // Reduce any dimensions with size one. Lower-rank transpose kernel performs\n  // better due to simpler memory access pattern.\n  const [reducedShape, perm] = removeOneSizeDims(inputs.x.shape, attrs.perm);\n\n  let permIsNoOp = true;\n  for (let i = 0; i < perm.length; i++) {\n    if (perm[i] !== i) {\n      permIsNoOp = false;\n    }\n  }\n  const outShape = computeOutShape(inputs.x.shape, attrs.perm);\n  const x = {\n    dataId: inputs.x.dataId,\n    shape: reducedShape,\n    dtype: inputs.x.dtype\n  };\n\n  if (permIsNoOp) {\n    const cloned = identity({inputs, backend});\n    cloned.shape = outShape;\n    return cloned;\n  }\n\n  const out = backend.makeOutput(outShape, x.dtype);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const permBytes = new Uint8Array(new Int32Array(perm).buffer);\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n\n  wasmTranspose(\n      xId, xShapeBytes, x.shape.length, CppDType[x.dtype], outId, permBytes,\n      perm.length);\n  return out;\n}\n\nfunction computeOutShape(inShape: number[], perm: number[]): number[] {\n  const outShape = new Array(inShape.length);\n  for (let i = 0; i < outShape.length; i++) {\n    outShape[i] = inShape[perm[i]];\n  }\n  return outShape;\n}\n\nfunction removeOneSizeDims(\n    shape: number[], perm: number[]): [number[], number[]] {\n  const newShape: number[] = [];\n  const newPerm: number[] = [];\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n    }\n    if (shape[perm[i]] !== 1) {\n      newPerm.push(perm[i]);\n    }\n  }\n  for (let i = 0; i < newPerm.length; ++i) {\n    let minValIdx = -1;\n    for (let j = 0; j < newPerm.length; ++j) {\n      if (newPerm[j] >= i &&\n          (minValIdx === -1 || newPerm[minValIdx] > newPerm[j])) {\n        minValIdx = j;\n      }\n    }\n    newPerm[minValIdx] = i;\n  }\n  return [newShape, newPerm];\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'wasm',\n  kernelFunc: transpose as {} as KernelFunc,\n  setupFunc: setup,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}