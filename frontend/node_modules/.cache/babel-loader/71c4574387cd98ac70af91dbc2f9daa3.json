{"ast":null,"code":"import _slicedToArray from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight } from '@tensorflow/tfjs-core';\nvar wasmFlipLeftRight;\n\nfunction setup(backend) {\n  wasmFlipLeftRight = backend.wasm.cwrap(FlipLeftRight, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nexport function flipLeftRight(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var image = inputs.image;\n  var out = backend.makeOutput(image.shape, image.dtype);\n  var imageId = backend.dataIdMap.get(image.dataId).id;\n  var outId = backend.dataIdMap.get(out.dataId).id;\n\n  var _image$shape = _slicedToArray(image.shape, 4),\n      batch = _image$shape[0],\n      imageHeight = _image$shape[1],\n      imageWidth = _image$shape[2],\n      numChannels = _image$shape[3];\n\n  wasmFlipLeftRight(imageId, batch, imageHeight, imageWidth, numChannels, outId);\n  return out;\n}\nexport var flipLeftRightConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'wasm',\n  kernelFunc: flipLeftRight,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/FlipLeftRight.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,aAAR,QAAuF,uBAAvF;AAIA,IAAI,iBAAJ;;AAIA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,iBAAiB,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,aAAnB,EAAkC;AAAK;AAAvC,IAAmD,CACrE,QADqE,EAErE,QAFqE,EAGrE,QAHqE,EAIrE,QAJqE,EAKrE,QALqE,EAMrE,QANqE,CAAnD,CAApB;AAQD;;AAED,OAAM,SAAU,aAAV,CACF,IADE,EACuD;AAAA,MACpD,MADoD,GACjC,IADiC,CACpD,MADoD;AAAA,MAC5C,OAD4C,GACjC,IADiC,CAC5C,OAD4C;AAAA,MAEpD,KAFoD,GAE3C,MAF2C,CAEpD,KAFoD;AAI3D,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,KAAK,CAAC,KAAzB,EAAgC,KAAK,CAAC,KAAtC,CAAZ;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,KAAK,CAAC,MAA5B,EAAoC,EAApD;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;;AAN2D,oCAQL,KAAK,CAAC,KARD;AAAA,MAQpD,KARoD;AAAA,MAQ7C,WAR6C;AAAA,MAQhC,UARgC;AAAA,MAQpB,WARoB;;AAU3D,EAAA,iBAAiB,CACb,OADa,EACJ,KADI,EACG,WADH,EACgB,UADhB,EAC4B,WAD5B,EACyC,KADzC,CAAjB;AAEA,SAAO,GAAP;AACD;AAED,OAAO,IAAM,mBAAmB,GAAiB;AAC/C,EAAA,UAAU,EAAE,aADmC;AAE/C,EAAA,WAAW,EAAE,MAFkC;AAG/C,EAAA,UAAU,EAAE,aAHmC;AAI/C,EAAA,SAAS,EAAE;AAJoC,CAA1C","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FlipLeftRight, FlipLeftRightInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmFlipLeftRight: (\n    xId: number, batch: number, imageHeight: number, imageWidth: number,\n    numChannels: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmFlipLeftRight = backend.wasm.cwrap(FlipLeftRight, null /* void */, [\n    'number',  // xId\n    'number',  // batch\n    'number',  // imageHeight\n    'number',  // imageWidth\n    'number',  // numChannels\n    'number',  // outId\n  ]);\n}\n\nexport function flipLeftRight(\n    args: {inputs: FlipLeftRightInputs, backend: BackendWasm}): TensorInfo {\n  const {inputs, backend} = args;\n  const {image} = inputs;\n\n  const out = backend.makeOutput(image.shape, image.dtype);\n  const imageId = backend.dataIdMap.get(image.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n  wasmFlipLeftRight(\n      imageId, batch, imageHeight, imageWidth, numChannels, outId);\n  return out;\n}\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'wasm',\n  kernelFunc: flipLeftRight as {} as KernelFunc,\n  setupFunc: setup\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}