{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nimport { transpose } from './Transpose';\nvar wasmCumsum;\n\nfunction setup(backend) {\n  wasmCumsum = backend.wasm.cwrap(Cumsum, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number' // dtype\n  ]);\n}\n\nexport function cumsum(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      exclusive = attrs.exclusive,\n      reverse = attrs.reverse;\n  var xRank = x.shape.length;\n  util.assert(x.dtype === 'float32' || x.dtype === 'int32', function () {\n    return \"cumsum does not support \".concat(x.dtype, \" tensors in the WASM backend\");\n  }); // permute required axis to inner most axis\n\n  var permutation = backend_util.getAxesPermutation([axis], xRank);\n  var permutedX = x;\n\n  if (permutation !== null) {\n    permutedX = transpose({\n      inputs: {\n        x: x\n      },\n      attrs: {\n        perm: permutation\n      },\n      backend: backend\n    });\n  }\n\n  var permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n  backend_util.assertAxesAreInnerMostDims('cumsum', [permutedAxis], xRank);\n  var permutedOut = backend.makeOutput(permutedX.shape, permutedX.dtype);\n  var finalDim = permutedX.shape[permutedAxis];\n  var permutedXId = backend.dataIdMap.get(permutedX.dataId).id;\n  var permutedOutId = backend.dataIdMap.get(permutedOut.dataId).id;\n  wasmCumsum(permutedXId, exclusive ? 1 : 0, reverse ? 1 : 0, finalDim, permutedOutId, CppDType[x.dtype]); // transpose data back if permuted\n\n  var out = permutedOut;\n\n  if (permutation !== null) {\n    var undoPermutation = backend_util.getUndoAxesPermutation(permutation);\n    out = transpose({\n      inputs: {\n        x: permutedOut\n      },\n      attrs: {\n        perm: undoPermutation\n      },\n      backend: backend\n    });\n    backend.disposeData(permutedX.dataId);\n    backend.disposeData(permutedOut.dataId);\n  }\n\n  return out;\n}\nexport var cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cumsum\n};","map":{"version":3,"sources":["../../src/kernels/Cumsum.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,MAAhD,EAA+F,IAA/F,QAA0G,uBAA1G;AAIA,SAAQ,QAAR,QAAuB,SAAvB;AAEA,SAAQ,SAAR,QAAwB,aAAxB;AAEA,IAAI,UAAJ;;AAGA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,MAAnB,EAA2B;AAAK;AAAhC,IAA4C,CACvD,QADuD,EAEvD,QAFuD,EAGvD,QAHuD,EAIvD,QAJuD,EAKvD,QALuD,EAMvD,QANuD,CAM7C;AAN6C,GAA5C,CAAb;AAQD;;AAED,OAAM,SAAU,MAAV,CACJ,IADI,EACkE;AAAA,MAE/D,MAF+D,GAErC,IAFqC,CAE/D,MAF+D;AAAA,MAEvD,OAFuD,GAErC,IAFqC,CAEvD,OAFuD;AAAA,MAE9C,KAF8C,GAErC,IAFqC,CAE9C,KAF8C;AAAA,MAG/D,CAH+D,GAG1D,MAH0D,CAG/D,CAH+D;AAAA,MAI/D,IAJ+D,GAInC,KAJmC,CAI/D,IAJ+D;AAAA,MAIzD,SAJyD,GAInC,KAJmC,CAIzD,SAJyD;AAAA,MAI9C,OAJ8C,GAInC,KAJmC,CAI9C,OAJ8C;AAKtE,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AAEA,EAAA,IAAI,CAAC,MAAL,CAAY,CAAC,CAAC,KAAF,KAAY,SAAZ,IAAyB,CAAC,CAAC,KAAF,KAAY,OAAjD,EACE;AAAA,6CAAiC,CAAC,CAAC,KAAnC;AAAA,GADF,EAPsE,CAStE;;AACA,MAAM,WAAW,GAAG,YAAY,CAAC,kBAAb,CAAgC,CAAC,IAAD,CAAhC,EAAwC,KAAxC,CAApB;AACA,MAAI,SAAS,GAAG,CAAhB;;AACA,MAAI,WAAW,KAAK,IAApB,EAA0B;AACxB,IAAA,SAAS,GAAG,SAAS,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAD;AAAD,OAAT;AAAc,MAAA,KAAK,EAAE;AAAC,QAAA,IAAI,EAAE;AAAP,OAArB;AAA0C,MAAA,OAAO,EAAP;AAA1C,KAAD,CAArB;AACD;;AACD,MAAM,YAAY,GAAG,YAAY,CAAC,gBAAb,CAA8B,CAA9B,EAAiC,KAAjC,EAAwC,CAAxC,CAArB;AACA,EAAA,YAAY,CAAC,0BAAb,CAAwC,QAAxC,EAAkD,CAAC,YAAD,CAAlD,EAAkE,KAAlE;AAEA,MAAM,WAAW,GAAG,OAAO,CAAC,UAAR,CAAmB,SAAS,CAAC,KAA7B,EAAoC,SAAS,CAAC,KAA9C,CAApB;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAV,CAAgB,YAAhB,CAAjB;AACA,MAAM,WAAW,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,SAAS,CAAC,MAAhC,EAAwC,EAA5D;AACA,MAAM,aAAa,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,WAAW,CAAC,MAAlC,EAA0C,EAAhE;AACA,EAAA,UAAU,CAAC,WAAD,EAAc,SAAS,GAAG,CAAH,GAAO,CAA9B,EAAiC,OAAO,GAAG,CAAH,GAAO,CAA/C,EAAkD,QAAlD,EACC,aADD,EACgB,QAAQ,CAAC,CAAC,CAAC,KAAH,CADxB,CAAV,CAtBsE,CAyBtE;;AACA,MAAI,GAAG,GAAG,WAAV;;AACA,MAAI,WAAW,KAAK,IAApB,EAA0B;AACxB,QAAM,eAAe,GAAG,YAAY,CAAC,sBAAb,CAAoC,WAApC,CAAxB;AACA,IAAA,GAAG,GAAG,SAAS,CACb;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAE;AAAJ,OAAT;AAA2B,MAAA,KAAK,EAAE;AAAC,QAAA,IAAI,EAAE;AAAP,OAAlC;AAA2D,MAAA,OAAO,EAAP;AAA3D,KADa,CAAf;AAEA,IAAA,OAAO,CAAC,WAAR,CAAoB,SAAS,CAAC,MAA9B;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,WAAW,CAAC,MAAhC;AACD;;AACD,SAAO,GAAP;AACD;AAED,OAAO,IAAM,YAAY,GAAiB;AACxC,EAAA,UAAU,EAAE,MAD4B;AAExC,EAAA,WAAW,EAAE,MAF2B;AAGxC,EAAA,SAAS,EAAE,KAH6B;AAIxC,EAAA,UAAU,EAAE;AAJ4B,CAAnC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Cumsum, CumsumAttrs, CumsumInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nimport {transpose} from './Transpose';\n\nlet wasmCumsum: (xId: number, exclusive: number, reverse: number,\n                 finalDim: number, outId: number, dtype: CppDType) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmCumsum = backend.wasm.cwrap(Cumsum, null /* void */, [\n    'number', // x_id\n    'number', // exclusive\n    'number', // reverse\n    'number', // final_dim\n    'number', // out_id\n    'number'  // dtype\n  ]);\n}\n\nexport function cumsum(\n  args: {inputs: CumsumInputs, backend: BackendWasm, attrs: CumsumAttrs}):\nTensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  const xRank = x.shape.length;\n\n  util.assert(x.dtype === 'float32' || x.dtype === 'int32',\n    () => `cumsum does not support ${x.dtype} tensors in the WASM backend`);\n  // permute required axis to inner most axis\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation !== null) {\n    permutedX = transpose({inputs: {x}, attrs: {perm: permutation}, backend});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n  backend_util.assertAxesAreInnerMostDims('cumsum', [permutedAxis], xRank);\n\n  const permutedOut = backend.makeOutput(permutedX.shape, permutedX.dtype);\n  const finalDim = permutedX.shape[permutedAxis];\n  const permutedXId = backend.dataIdMap.get(permutedX.dataId).id;\n  const permutedOutId = backend.dataIdMap.get(permutedOut.dataId).id;\n  wasmCumsum(permutedXId, exclusive ? 1 : 0, reverse ? 1 : 0, finalDim,\n             permutedOutId, CppDType[x.dtype]);\n\n  // transpose data back if permuted\n  let out = permutedOut;\n  if (permutation !== null) {\n    const undoPermutation = backend_util.getUndoAxesPermutation(permutation);\n    out = transpose(\n      {inputs: {x: permutedOut}, attrs: {perm: undoPermutation}, backend});\n    backend.disposeData(permutedX.dataId);\n    backend.disposeData(permutedOut.dataId);\n  }\n  return out;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cumsum as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}