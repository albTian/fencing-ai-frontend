{"ast":null,"code":"import _classCallCheck from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { getCoordsDataType } from './shader_compiler';\nexport var CumSumProgram = function CumSumProgram(shape, exclusive, reverse) {\n  _classCallCheck(this, CumSumProgram);\n\n  this.variableNames = ['x'];\n  this.customUniforms = [{\n    name: 'index',\n    type: 'float'\n  }];\n  this.outputShape = shape;\n  var rank = shape.length;\n  var val = exclusive ? '0.0' : \"getX(\".concat(getCoords(rank, 'coords'), \")\");\n  var length = shape[shape.length - 1];\n  var condition = '';\n  var idxString = ''; // When exclusive is set, the cumsum op becomes roll op that copies the\n  // value from the previous index based on the direction specified by the\n  // reverse flag.\n\n  if (exclusive) {\n    condition = reverse ? \"end != \".concat(length - 1) : 'end != 0';\n    idxString = reverse ? 'end + 1' : 'end - 1';\n  } else {\n    condition = reverse ? \"end + pow2 < \".concat(length) : 'end >= pow2';\n    idxString = reverse ? 'end + pow2' : 'end - pow2';\n  }\n\n  this.userCode = \"\\n      void main() {\\n        \".concat(getCoordsDataType(rank), \" coords = getOutputCoords();\\n        int end = \").concat(getFinalCoord(rank, 'coords'), \";\\n        float val = \").concat(val, \";\\n        int pow2 = int(pow(2.0, index));\\n        if (\").concat(condition, \") {\\n          int idx = \").concat(idxString, \";\\n          \").concat(getFinalCoord(rank, 'coords'), \" = idx;\\n          val += getX(\").concat(getCoords(rank, 'coords'), \");\\n        }\\n        setOutput(val);\\n      }\\n    \");\n};\n\nfunction getCoords(rank, name) {\n  if (rank === 1) {\n    return \"\".concat(name);\n  } else if (rank === 2) {\n    return \"\".concat(name, \".x, \").concat(name, \".y\");\n  } else if (rank === 3) {\n    return \"\".concat(name, \".x, \").concat(name, \".y, \").concat(name, \".z\");\n  } else if (rank === 4) {\n    return \"\".concat(name, \".x, \").concat(name, \".y, \").concat(name, \".z, \").concat(name, \".w\");\n  } else {\n    throw Error(\"Cumulative sum for rank \".concat(rank, \" is not yet supported\"));\n  }\n}\n\nfunction getFinalCoord(rank, name) {\n  if (rank === 1) {\n    return \"\".concat(name);\n  } else if (rank === 2) {\n    return \"\".concat(name, \".y\");\n  } else if (rank === 3) {\n    return \"\".concat(name, \".z\");\n  } else if (rank === 4) {\n    return \"\".concat(name, \".w\");\n  } else {\n    throw Error(\"Cumulative sum for rank \".concat(rank, \" is not yet supported\"));\n  }\n}","map":{"version":3,"sources":["../src/cumsum_gpu.ts"],"names":[],"mappings":";AAiBA,SAAQ,iBAAR,QAA6C,mBAA7C;AAEA,WAAa,aAAb,GAME,uBAAY,KAAZ,EAA6B,SAA7B,EAAiD,OAAjD,EAAiE;AAAA;;AALjE,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAGA,OAAA,cAAA,GAAiB,CAAC;AAAC,IAAA,IAAI,EAAE,OAAP;AAAgB,IAAA,IAAI,EAAE;AAAtB,GAAD,CAAjB;AAGE,OAAK,WAAL,GAAmB,KAAnB;AACA,MAAM,IAAI,GAAG,KAAK,CAAC,MAAnB;AACA,MAAM,GAAG,GAAG,SAAS,GAAG,KAAH,kBAAmB,SAAS,CAAC,IAAD,EAAO,QAAP,CAA5B,MAArB;AACA,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAApB;AACA,MAAI,SAAS,GAAG,EAAhB;AACA,MAAI,SAAS,GAAG,EAAhB,CAN+D,CAO/D;AACA;AACA;;AACA,MAAI,SAAJ,EAAe;AACb,IAAA,SAAS,GAAG,OAAO,oBAAa,MAAM,GAAG,CAAtB,IAA4B,UAA/C;AACA,IAAA,SAAS,GAAG,OAAO,GAAG,SAAH,GAAe,SAAlC;AACD,GAHD,MAGO;AACL,IAAA,SAAS,GAAG,OAAO,0BAAmB,MAAnB,IAA8B,aAAjD;AACA,IAAA,SAAS,GAAI,OAAO,GAAG,YAAH,GAAkB,YAAtC;AACD;;AAED,OAAK,QAAL,4CAEM,iBAAiB,CAAC,IAAD,CAFvB,6DAGgB,aAAa,CAAC,IAAD,EAAO,QAAP,CAH7B,oCAIkB,GAJlB,sEAMU,SANV,sCAOkB,SAPlB,0BAQQ,aAAa,CAAC,IAAD,EAAO,QAAP,CARrB,4CASoB,SAAS,CAAC,IAAD,EAAO,QAAP,CAT7B;AAcD,CAtCH;;AAyCA,SAAS,SAAT,CAAmB,IAAnB,EAAiC,IAAjC,EAA6C;AAC3C,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,qBAAU,IAAV;AACD,GAFD,MAEO,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,qBAAU,IAAV,iBAAqB,IAArB;AACD,GAFM,MAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,qBAAU,IAAV,iBAAqB,IAArB,iBAAgC,IAAhC;AACD,GAFM,MAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,qBAAU,IAAV,iBAAqB,IAArB,iBAAgC,IAAhC,iBAA2C,IAA3C;AACD,GAFM,MAEA;AACL,UAAM,KAAK,mCAA4B,IAA5B,2BAAX;AACD;AACF;;AAED,SAAS,aAAT,CAAuB,IAAvB,EAAqC,IAArC,EAAiD;AAC/C,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,qBAAU,IAAV;AACD,GAFD,MAEO,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,qBAAU,IAAV;AACD,GAFM,MAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,qBAAU,IAAV;AACD,GAFM,MAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,qBAAU,IAAV;AACD,GAFM,MAEA;AACL,UAAM,KAAK,mCAA4B,IAA5B,2BAAX;AACD;AACF","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}