{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue } from '@tensorflow/tfjs-core';\nvar wasmClip;\n\nfunction setup(backend) {\n  wasmClip = backend.wasm.cwrap(ClipByValue, null\n  /* void */\n  , ['number', 'number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction clip(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var clipValueMin = attrs.clipValueMin,\n      clipValueMax = attrs.clipValueMax;\n  var xId = backend.dataIdMap.get(x.dataId).id;\n  var out = backend.makeOutput(x.shape, x.dtype);\n  var outId = backend.dataIdMap.get(out.dataId).id;\n  wasmClip(xId, clipValueMin, clipValueMax, outId);\n  return out;\n}\n\nexport var clipByValueConfig = {\n  kernelName: ClipByValue,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: clip\n};","map":{"version":3,"sources":["../../src/kernels/ClipByValue.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,WAAR,QAAyF,uBAAzF;AAIA,IAAI,QAAJ;;AAEA,SAAS,KAAT,CAAe,OAAf,EAAmC;AACjC,EAAA,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,WAAnB,EAAgC;AAAK;AAArC,IAAiD,CAC1D,QAD0D,EAE1D,QAF0D,EAG1D,QAH0D,EAI1D,QAJ0D,CAI/C;AAJ+C,GAAjD,CAAX;AAMD;;AAED,SAAS,IAAT,CAAc,IAAd,EAIC;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,CAFR,GAEa,MAFb,CAEQ,CAFR;AAAA,MAGQ,YAHR,GAGsC,KAHtC,CAGQ,YAHR;AAAA,MAGsB,YAHtB,GAGsC,KAHtC,CAGsB,YAHtB;AAIC,MAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAC,CAAC,KAArB,EAA4B,CAAC,CAAC,KAA9B,CAAZ;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,EAAhD;AACA,EAAA,QAAQ,CAAC,GAAD,EAAM,YAAN,EAAoB,YAApB,EAAkC,KAAlC,CAAR;AACA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,iBAAiB,GAAiB;AAC7C,EAAA,UAAU,EAAE,WADiC;AAE7C,EAAA,WAAW,EAAE,MAFgC;AAG7C,EAAA,SAAS,EAAE,KAHkC;AAI7C,EAAA,UAAU,EAAE;AAJiC,CAAxC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmClip: (xId: number, min: number, max: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmClip = backend.wasm.cwrap(ClipByValue, null /* void */, [\n    'number',  // x_id\n    'number',  // min\n    'number',  // max\n    'number'   // out_id\n  ]);\n}\n\nfunction clip(args: {\n  inputs: ClipByValueInputs,\n  backend: BackendWasm,\n  attrs: ClipByValueAttrs\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmClip(xId, clipValueMin, clipValueMax, outId);\n  return out;\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: clip as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}