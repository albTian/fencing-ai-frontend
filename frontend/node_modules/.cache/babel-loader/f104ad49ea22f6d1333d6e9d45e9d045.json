{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { transpose } from './Transpose';\n/**\n * Compute permutation axes and do a transpose if necessary.\n *\n * Used by reduction ops.\n * @param x input TensorInfo\n * @param axis reduction axes\n * @param backend wasm backend instance\n */\n\nexport function permuteAxesAndTranspose(x, axis, backend) {\n  var xShape = x.shape;\n  var xRank = x.shape.length;\n  var originalAxes = util.parseAxisParam(axis, xShape);\n  var axes = originalAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  var xTransposed = null;\n  var inputWasTransposed = false;\n\n  if (permutedAxes != null) {\n    var newShape = new Array(xRank);\n\n    for (var i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xTransposed = transpose({\n      inputs: {\n        x: x\n      },\n      attrs: {\n        perm: permutedAxes\n      },\n      backend: backend\n    });\n    var xId = backend.dataIdMap.get(x.dataId).id;\n    var transposedId = backend.dataIdMap.get(xTransposed.dataId).id;\n\n    if (transposedId !== xId) {\n      inputWasTransposed = true;\n    }\n  }\n\n  return {\n    transposed: xTransposed,\n    originalAxes: originalAxes,\n    axes: axes,\n    inputWasTransposed: inputWasTransposed\n  };\n}","map":{"version":3,"sources":["../../src/kernels/kernel_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAkC,IAAlC,QAA6C,uBAA7C;AAEA,SAAQ,SAAR,QAAwB,aAAxB;AAEA;;;;;;;AAOG;;AACH,OAAM,SAAU,uBAAV,CACF,CADE,EACa,IADb,EACoC,OADpC,EACwD;AAM5D,MAAM,MAAM,GAAG,CAAC,CAAC,KAAjB;AACA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AAEA,MAAM,YAAY,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,MAA1B,CAArB;AACA,MAAI,IAAI,GAAG,YAAX;AACA,MAAM,YAAY,GAAG,YAAY,CAAC,kBAAb,CAAgC,IAAhC,EAAsC,KAAtC,CAArB;AACA,MAAI,WAAW,GAAG,IAAlB;AACA,MAAI,kBAAkB,GAAG,KAAzB;;AACA,MAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,QAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,KAAV,CAA3B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,MAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAM,CAAC,YAAY,CAAC,CAAD,CAAb,CAApB;AACD;;AAED,IAAA,IAAI,GAAG,YAAY,CAAC,gBAAb,CAA8B,IAAI,CAAC,MAAnC,EAA2C,KAA3C,CAAP;AACA,IAAA,WAAW,GACP,SAAS,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAD;AAAD,OAAT;AAAc,MAAA,KAAK,EAAE;AAAC,QAAA,IAAI,EAAE;AAAP,OAArB;AAA2C,MAAA,OAAO,EAAP;AAA3C,KAAD,CADb;AAGA,QAAM,GAAG,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,CAAC,CAAC,MAAxB,EAAgC,EAA5C;AACA,QAAM,YAAY,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,WAAW,CAAC,MAAlC,EAA0C,EAA/D;;AACA,QAAI,YAAY,KAAK,GAArB,EAA0B;AACxB,MAAA,kBAAkB,GAAG,IAArB;AACD;AACF;;AAED,SAAO;AAAC,IAAA,UAAU,EAAE,WAAb;AAA0B,IAAA,YAAY,EAAZ,YAA1B;AAAwC,IAAA,IAAI,EAAJ,IAAxC;AAA8C,IAAA,kBAAkB,EAAlB;AAA9C,GAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {BackendWasm} from '../backend_wasm';\nimport {transpose} from './Transpose';\n\n/**\n * Compute permutation axes and do a transpose if necessary.\n *\n * Used by reduction ops.\n * @param x input TensorInfo\n * @param axis reduction axes\n * @param backend wasm backend instance\n */\nexport function permuteAxesAndTranspose(\n    x: TensorInfo, axis: number|number[], backend: BackendWasm): {\n  transposed: TensorInfo|null,\n  axes: number[],\n  originalAxes: number[],\n  inputWasTransposed: boolean\n} {\n  const xShape = x.shape;\n  const xRank = x.shape.length;\n\n  const originalAxes = util.parseAxisParam(axis, xShape);\n  let axes = originalAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xTransposed = null;\n  let inputWasTransposed = false;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xTransposed =\n        transpose({inputs: {x}, attrs: {perm: permutedAxes}, backend});\n\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const transposedId = backend.dataIdMap.get(xTransposed.dataId).id;\n    if (transposedId !== xId) {\n      inputWasTransposed = true;\n    }\n  }\n\n  return {transposed: xTransposed, originalAxes, axes, inputWasTransposed};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}