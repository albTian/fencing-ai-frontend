{"ast":null,"code":"import _classCallCheck from \"/Users/alberttian/f21/playground/frontend/fencing-ai-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var RotateProgram = function RotateProgram(imageShape, fillValue) {\n  _classCallCheck(this, RotateProgram);\n\n  this.variableNames = ['Image'];\n  this.outputShape = [];\n  this.customUniforms = [{\n    name: 'params',\n    type: 'vec4'\n  }];\n  var imageHeight = imageShape[1];\n  var imageWidth = imageShape[2];\n  this.outputShape = imageShape;\n  var fillSnippet = '';\n\n  if (typeof fillValue === 'number') {\n    fillSnippet = \"float outputValue = \".concat(fillValue.toFixed(2), \";\");\n  } else {\n    fillSnippet = \"\\n        vec3 fill = vec3(\".concat(fillValue.join(','), \");\\n        float outputValue = fill[coords[3]];\");\n  }\n\n  this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int x = coords[2];\\n          int y = coords[1];\\n          float coordXFloat = (float(x) - params[0]) * params[3] -\\n            (float(y) - params[1]) * params[2];\\n          float coordYFloat = (float(x) - params[0]) * params[2] +\\n            (float(y) - params[1]) * params[3];\\n          int coordX = int(round(coordXFloat + params[0]));\\n          int coordY = int(round(coordYFloat + params[1]));\\n          \".concat(fillSnippet, \"\\n          if(coordX >= 0 && coordX < \").concat(imageWidth, \" && coordY >= 0 && coordY < \").concat(imageHeight, \") {\\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\\n          }\\n          setOutput(outputValue);\\n        }\\n    \");\n};","map":{"version":3,"sources":["../src/rotate_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,aAAb,GAKE,uBACI,UADJ,EAEI,SAFJ,EAE8C;AAAA;;AAN9C,OAAA,aAAA,GAAgB,CAAC,OAAD,CAAhB;AACA,OAAA,WAAA,GAAwB,EAAxB;AAEA,OAAA,cAAA,GAAiB,CAAC;AAAC,IAAA,IAAI,EAAE,QAAP;AAAiB,IAAA,IAAI,EAAE;AAAvB,GAAD,CAAjB;AAIE,MAAM,WAAW,GAAG,UAAU,CAAC,CAAD,CAA9B;AACA,MAAM,UAAU,GAAG,UAAU,CAAC,CAAD,CAA7B;AACA,OAAK,WAAL,GAAmB,UAAnB;AAEA,MAAI,WAAW,GAAG,EAAlB;;AACA,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,IAAA,WAAW,iCAA0B,SAAS,CAAC,OAAV,CAAkB,CAAlB,CAA1B,MAAX;AACD,GAFD,MAEO;AACL,IAAA,WAAW,wCACU,SAAS,CAAC,IAAV,CAAe,GAAf,CADV,qDAAX;AAGD;;AAED,OAAK,QAAL,6fAWQ,WAXR,oDAYmC,UAZnC,yCAaI,WAbJ;AAmBD,CAxCH","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}