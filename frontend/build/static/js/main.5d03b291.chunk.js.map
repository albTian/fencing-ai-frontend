{"version":3,"sources":["utils/drawUtils.js","components/Camera.jsx","App.jsx","index.js"],"names":["drawResult","pose","ctx","scoreThreshold","keypoints","keypointInd","poseDetection","getKeypointIndexBySide","MoveNet","fillStyle","strokeStyle","lineWidth","middle","drawKeypoint","left","right","drawKeypoints","keypoint","score","circle","Path2D","arc","x","y","Math","PI","fill","stroke","camera","detector","videoDim","Camera","webcamRef","useRef","canvasRef","setupCamera","current","getContext","setupDetector","a","model","detectorConfig","modelType","MULTIPOSE_LIGHTNING","minPoseScore","enableTracking","detect","video","readyState","videoWidth","videoHeight","width","height","estimatePoses","poses","console","log","drawCanvas","canvas","drawResults","renderResult","renderPrediction","requestAnimationFrame","useEffect","run","style","position","ref","mirrored","top","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d03b291.chunk.js","sourcesContent":["import * as poseDetection from '@tensorflow-models/pose-detection'\n\n/**\n * Draw the keypoints and skeleton on the video.\n * @param poses A list of poses to render.\n * @param ctx The context object to draw on\n * @param scoreThreshold The minimum score needed\n */\nfunction drawResults(poses, ctx, scoreThreshold) {\n    if (!poses) return\n    for (const pose of poses) {\n        drawResult(pose, ctx, scoreThreshold);\n    }\n}\n\n/**\n  * Draw the keypoints and skeleton on the video.\n  * @param pose A pose with keypoints to render.\n  */\nfunction drawResult(pose, ctx, scoreThreshold) {\n    if (pose.keypoints != null) {\n        drawKeypoints(pose.keypoints, ctx, scoreThreshold);\n        // drawSkeleton(pose.keypoints, pose.id);\n    }\n}\n\n/**\n * Draw the keypoints on the video.\n * @param keypoints A list of keypoints.\n */\nfunction drawKeypoints(keypoints, ctx, scoreThreshold) {\n    // Hardcoding MoveNet in\n    const keypointInd = poseDetection.util.getKeypointIndexBySide(poseDetection.SupportedModels.MoveNet)\n    ctx.fillStyle = 'Red';\n    ctx.strokeStyle = 'White';\n    ctx.lineWidth = 2;\n\n    for (const i of keypointInd.middle) {\n        drawKeypoint(keypoints[i], ctx, scoreThreshold);\n    }\n\n    ctx.fillStyle = 'Green';\n    for (const i of keypointInd.left) {\n        drawKeypoint(keypoints[i], ctx, scoreThreshold);\n    }\n\n    ctx.fillStyle = 'Orange';\n    for (const i of keypointInd.right) {\n        drawKeypoint(keypoints[i], ctx, scoreThreshold);\n    }\n}\n\nfunction drawKeypoint(keypoint, ctx, scoreThreshold) {\n    // If score is null, just show the keypoint.\n    const score = keypoint.score != null ? keypoint.score : 1;\n    const minScore = scoreThreshold || 0;\n\n    if (score >= minScore) {\n        const circle = new Path2D();\n        circle.arc(keypoint.x, keypoint.y, 2, 0, 2 * Math.PI);\n        ctx.fill(circle);\n        ctx.stroke(circle);\n    }\n}\n\nexport { drawResults }","import React, { useRef, useEffect } from \"react\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@tensorflow/tfjs-backend-wasm\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\nimport Webcam from \"react-webcam\";\nimport { drawResults } from \"../utils/drawUtils\";\n\nconst videoDim = {\n  width: 1280,\n  height: 720,\n};\n\nlet rafId;\nlet camera, detector;\nlet ctx;\n\nexport default function Camera() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function setupCamera() {\n    camera = webcamRef.current;\n    ctx = canvasRef.current.getContext(\"2d\");\n  }\n\n  async function setupDetector() {\n    const model = poseDetection.SupportedModels.MoveNet;\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.MULTIPOSE_LIGHTNING,\n      minPoseScore: 0.2,\n      enableTracking: true,\n    };\n    detector = await poseDetection.createDetector(model, detectorConfig);\n  }\n\n  async function detect(detector) {\n    if (typeof camera === \"undefined\" || camera === null) return;\n    if (camera.video.readyState !== 4) return;\n    if (!detector) return;\n\n    const video = camera.video;\n    const videoWidth = video.videoWidth;\n    const videoHeight = video.videoHeight;\n\n    camera.video.width = videoWidth;\n    camera.video.height = videoHeight;\n\n    const poses = await detector.estimatePoses(video);\n    console.log(\"found poses:\");\n    console.log(poses);\n    drawCanvas(poses, videoWidth, videoHeight, canvasRef);\n  }\n\n  function drawCanvas(poses, videoWidth, videoHeight, canvas) {\n    const ctx = canvas.current.getContext(\"2d\");\n    canvas.current.videoWidth = videoWidth;\n    canvas.current.videoHeight = videoHeight;\n\n    drawResults(poses, ctx, 0);\n  }\n\n  async function renderResult() {\n    if (!detector) return;\n    await detect(detector);\n  }\n\n  async function renderPrediction() {\n    await renderResult();\n    rafId = requestAnimationFrame(renderPrediction);\n    if (rafId) {\n    }\n  }\n\n  async function run() {\n    setupCamera();\n    await setupDetector();\n    renderPrediction();\n  }\n\n  useEffect(() => {\n    console.log(\"LOADING ...\");\n    run();\n    console.log(\"DONE LOADING.\");\n  });\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <Webcam\n        ref={webcamRef}\n        mirrored\n        style={{\n          position: \"absolute\",\n          width: videoDim.width,\n          height: videoDim.height,\n          left: 0,\n          top: 0,\n        }}\n      />\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: \"absolute\",\n          width: videoDim.width,\n          height: videoDim.height,\n          left: 0,\n          top: 0,\n        }}\n      />\n    </div>\n  );\n}\n","import React from \"react\"\nimport Camera from \"./components/Camera\"\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Camera />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}